ee5264b2d715d87bb43a1d1f1193ffc2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractTypeName = exports.applyMap = exports.compact = exports.isEnzymeWrapper = exports.isCheerioWrapper = exports.isReactWrapper = exports.isShallowWrapper = void 0;

var _filter = _interopRequireDefault(require("lodash/filter"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _ShallowWrapper = _interopRequireDefault(require("enzyme/build/ShallowWrapper"));

var _ReactWrapper = _interopRequireDefault(require("enzyme/build/ReactWrapper"));

var _Debug = require("enzyme/build/Debug");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var SHALLOW_WRAPPER_NAME = _ShallowWrapper.default.name;
var REACT_WRAPPER_NAME = _ReactWrapper.default.name;

var isShallowWrapper = function isShallowWrapper(wrapper) {
  return !(0, _isNil.default)(wrapper) && !(0, _isNil.default)(wrapper.constructor) && wrapper.constructor.name === SHALLOW_WRAPPER_NAME;
};

exports.isShallowWrapper = isShallowWrapper;

var isReactWrapper = function isReactWrapper(wrapper) {
  return !(0, _isNil.default)(wrapper) && !(0, _isNil.default)(wrapper.constructor) && wrapper.constructor.name === REACT_WRAPPER_NAME;
};

exports.isReactWrapper = isReactWrapper;

var isCheerioWrapper = function isCheerioWrapper(wrapper) {
  return !(0, _isNil.default)(wrapper) && !(0, _isNil.default)(wrapper.cheerio);
};

exports.isCheerioWrapper = isCheerioWrapper;

var isEnzymeWrapper = function isEnzymeWrapper(wrapper) {
  return isShallowWrapper(wrapper) || isReactWrapper(wrapper) || isCheerioWrapper(wrapper);
};

exports.isEnzymeWrapper = isEnzymeWrapper;

var compact = function compact(array) {
  return (0, _filter.default)(array, function (item) {
    return !(0, _isNil.default)(item) && item !== '';
  });
};

exports.compact = compact;

var applyMap = function applyMap(json, options) {
  if (typeof options.map === 'function') {
    return options.map(json);
  }

  return json;
};

exports.applyMap = applyMap;

var extractTypeName = function extractTypeName(node) {
  var name = (0, _Debug.typeName)(node);

  if (name.$$typeof === Symbol.for('react.lazy')) {
    return 'React.Lazy';
  }

  if (name.$$typeof === Symbol.for('react.memo')) {
    return 'React.Memo';
  }

  if (name === Symbol.for('react.suspense')) {
    return 'React.Suspense';
  }

  return name;
};

exports.extractTypeName = extractTypeName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXh0cmFjdFR5cGVOYW1lIiwiYXBwbHlNYXAiLCJjb21wYWN0IiwiaXNFbnp5bWVXcmFwcGVyIiwiaXNDaGVlcmlvV3JhcHBlciIsImlzUmVhY3RXcmFwcGVyIiwiaXNTaGFsbG93V3JhcHBlciIsIl9maWx0ZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pc05pbCIsIl9TaGFsbG93V3JhcHBlciIsIl9SZWFjdFdyYXBwZXIiLCJfRGVidWciLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlNIQUxMT1dfV1JBUFBFUl9OQU1FIiwibmFtZSIsIlJFQUNUX1dSQVBQRVJfTkFNRSIsIndyYXBwZXIiLCJjb25zdHJ1Y3RvciIsImNoZWVyaW8iLCJhcnJheSIsIml0ZW0iLCJqc29uIiwib3B0aW9ucyIsIm1hcCIsIm5vZGUiLCJ0eXBlTmFtZSIsIiQkdHlwZW9mIiwiU3ltYm9sIiwiZm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsZUFBUixHQUEwQkYsT0FBTyxDQUFDRyxRQUFSLEdBQW1CSCxPQUFPLENBQUNJLE9BQVIsR0FBa0JKLE9BQU8sQ0FBQ0ssZUFBUixHQUEwQkwsT0FBTyxDQUFDTSxnQkFBUixHQUEyQk4sT0FBTyxDQUFDTyxjQUFSLEdBQXlCUCxPQUFPLENBQUNRLGdCQUFSLEdBQTJCLEtBQUssQ0FBN0s7O0FBRUEsSUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGVBQUQsQ0FBUixDQUFwQzs7QUFFQSxJQUFJQyxNQUFNLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsY0FBRCxDQUFSLENB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QUFQO0FBQ0Q7O0FBRUQsU0FBT0EsSUFBUDtBQUNELENBTkQ7O0FBUUEzQixPQUFPLENBQUNHLFFBQVIsR0FBbUJBLFFBQW5COztBQUVBLElBQU1ELGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBQTRCLElBQUksRUFBSTtBQUM5QixNQUFNVixJQUFJLEdBQUcsQ0FBQyxHQUFHTCxNQUFNLENBQUNnQixRQUFYLEVBQXFCRCxJQUFyQixDQUFiOztBQUVBLE1BQUlWLElBQUksQ0FBQ1ksUUFBTCxLQUFrQkMsTUFBTSxDQUFDQyxHQUFQLENBQVcsWUFBWCxDQUF0QixFQUFnRDtBQUM5QyxXQUFPLFlBQVA7QUFDRDs7QUFFRCxNQUFJZCxJQUFJLENBQUNZLFFBQUwsS0FBa0JDLE1BQU0sQ0FBQ0MsR0FBUCxDQUFXLFlBQVgsQ0FBdEIsRUFBZ0Q7QUFDOUMsV0FBTyxZQUFQO0FBQ0Q7O0FBRUQsTUFBSWQsSUFBSSxLQUFLYSxNQUFNLENBQUNDLEdBQVAsQ0FBVyxnQkFBWCxDQUFiLEVBQTJDO0FBQ3pDLFdBQU8sZ0JBQVA7QUFDRDs7QUFFRCxTQUFPZCxJQUFQO0FBQ0QsQ0FoQkQ7O0FBa0JBcEIsT0FBTyxDQUFDRSxlQUFSLEdBQTBCQSxlQUExQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5leHRyYWN0VHlwZU5hbWUgPSBleHBvcnRzLmFwcGx5TWFwID0gZXhwb3J0cy5jb21wYWN0ID0gZXhwb3J0cy5pc0VuenltZVdyYXBwZXIgPSBleHBvcnRzLmlzQ2hlZXJpb1dyYXBwZXIgPSBleHBvcnRzLmlzUmVhY3RXcmFwcGVyID0gZXhwb3J0cy5pc1NoYWxsb3dXcmFwcGVyID0gdm9pZCAwO1xuXG52YXIgX2ZpbHRlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9maWx0ZXJcIikpO1xuXG52YXIgX2lzTmlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2lzTmlsXCIpKTtcblxudmFyIF9TaGFsbG93V3JhcHBlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS9idWlsZC9TaGFsbG93V3JhcHBlclwiKSk7XG5cbnZhciBfUmVhY3RXcmFwcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lL2J1aWxkL1JlYWN0V3JhcHBlclwiKSk7XG5cbnZhciBfRGVidWcgPSByZXF1aXJlKFwiZW56eW1lL2J1aWxkL0RlYnVnXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCBTSEFMTE9XX1dSQVBQRVJfTkFNRSA9IF9TaGFsbG93V3JhcHBlci5kZWZhdWx0Lm5hbWU7XG5jb25zdCBSRUFDVF9XUkFQUEVSX05BTUUgPSBfUmVhY3RXcmFwcGVyLmRlZmF1bHQubmFtZTtcblxuY29uc3QgaXNTaGFsbG93V3JhcHBlciA9IHdyYXBwZXIgPT4gISgwLCBfaXNOaWwuZGVmYXVsdCkod3JhcHBlcikgJiYgISgwLCBfaXNOaWwuZGVmYXVsdCkod3JhcHBlci5jb25zdHJ1Y3RvcikgJiYgd3JhcHBlci5jb25zdHJ1Y3Rvci5uYW1lID09PSBTSEFMTE9XX1dSQVBQRVJfTkFNRTtcblxuZXhwb3J0cy5pc1NoYWxsb3dXcmFwcGVyID0gaXNTaGFsbG93V3JhcHBlcjtcblxuY29uc3QgaXNSZWFjdFdyYXBwZXIgPSB3cmFwcGVyID0+ICEoMCwgX2lzTmlsLmRlZmF1bHQpKHdyYXBwZXIpICYmICEoMCwgX2lzTmlsLmRlZmF1bHQpKHdyYXBwZXIuY29uc3RydWN0b3IpICYmIHdyYXBwZXIuY29uc3RydWN0b3IubmFtZSA9PT0gUkVBQ1RfV1JBUFBFUl9OQU1FO1xuXG5leHBvcnRzLmlzUmVhY3RXcmFwcGVyID0gaXNSZWFjdFdyYXBwZXI7XG5cbmNvbnN0IGlzQ2hlZXJpb1dyYXBwZXIgPSB3cmFwcGVyID0+ICEoMCwgX2lzTmlsLmRlZmF1bHQpKHdyYXBwZXIpICYmICEoMCwgX2lzTmlsLmRlZmF1bHQpKHdyYXBwZXIuY2hlZXJpbyk7XG5cbmV4cG9ydHMuaXNDaGVlcmlvV3JhcHBlciA9IGlzQ2hlZXJpb1dyYXBwZXI7XG5cbmNvbnN0IGlzRW56eW1lV3JhcHBlciA9IHdyYXBwZXIgPT4gaXNTaGFsbG93V3JhcHBlcih3cmFwcGVyKSB8fCBpc1JlYWN0V3JhcHBlcih3cmFwcGVyKSB8fCBpc0NoZWVyaW9XcmFwcGVyKHdyYXBwZXIpO1xuXG5leHBvcnRzLmlzRW56eW1lV3JhcHBlciA9IGlzRW56eW1lV3JhcHBlcjtcblxuY29uc3QgY29tcGFjdCA9IGFycmF5ID0+ICgwLCBfZmlsdGVyLmRlZmF1bHQpKGFycmF5LCBpdGVtID0+ICEoMCwgX2lzTmlsLmRlZmF1bHQpKGl0ZW0pICYmIGl0ZW0gIT09ICcnKTtcblxuZXhwb3J0cy5jb21wYWN0ID0gY29tcGFjdDtcblxuY29uc3QgYXBwbHlNYXAgPSAoanNvbiwgb3B0aW9ucykgPT4ge1xuICBpZiAodHlwZW9mIG9wdGlvbnMubWFwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubWFwKGpzb24pO1xuICB9XG5cbiAgcmV0dXJuIGpzb247XG59O1xuXG5leHBvcnRzLmFwcGx5TWFwID0gYXBwbHlNYXA7XG5cbmNvbnN0IGV4dHJhY3RUeXBlTmFtZSA9IG5vZGUgPT4ge1xuICBjb25zdCBuYW1lID0gKDAsIF9EZWJ1Zy50eXBlTmFtZSkobm9kZSk7XG5cbiAgaWYgKG5hbWUuJCR0eXBlb2YgPT09IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKSkge1xuICAgIHJldHVybiAnUmVhY3QuTGF6eSc7XG4gIH1cblxuICBpZiAobmFtZS4kJHR5cGVvZiA9PT0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpKSB7XG4gICAgcmV0dXJuICdSZWFjdC5NZW1vJztcbiAgfVxuXG4gIGlmIChuYW1lID09PSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZScpKSB7XG4gICAgcmV0dXJuICdSZWFjdC5TdXNwZW5zZSc7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn07XG5cbmV4cG9ydHMuZXh0cmFjdFR5cGVOYW1lID0gZXh0cmFjdFR5cGVOYW1lOyJdfQ==