d651972e634800efe9706b8c7ba5eb1a
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var escapeValue = function escapeValue(value) {
  return JSON.stringify(value);
};

var renderSelector = function renderSelector(selectorToken) {
  var tokens = selectorToken.body;
  var parts = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var token = _step.value;
      var part = void 0;

      if (token.type === 'universalSelector') {
        part = '*';
      } else if (token.type === 'typeSelector') {
        part = token.name;
      } else if (token.type === 'idSelector') {
        part = '#' + token.name;
      } else if (token.type === 'classSelector') {
        part = '.' + token.name;
      } else if (token.type === 'attributePresenceSelector') {
        part = '[' + token.name + ']';
      } else if (token.type === 'attributeValueSelector') {
        part = '[' + token.name + token.operator + escapeValue(token.value) + ']';
      } else if (token.type === 'pseudoClassSelector') {
        part = ':' + token.name;

        if (token.parameters.length) {
          part += '(' + token.parameters.map(escapeValue).join(', ') + ')';
        }
      } else if (token.type === 'pseudoElementSelector') {
        part = '::' + token.name;
      } else {
        throw new Error('Unknown token.');
      }

      parts.push(part);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return parts.join('');
};

exports.default = function () {
  var generate = function generate(tokens) {
    var sequences = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = tokens[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var token = _step2.value;

        if (token.type === 'selector') {
          sequences.push(renderSelector(token));
        } else if (token.type === 'descendantCombinator') {
          sequences.push(' ');
        } else if (token.type === 'childCombinator') {
          sequences.push(' > ');
        } else if (token.type === 'adjacentSiblingCombinator') {
          sequences.push(' + ');
        } else if (token.type === 'generalSiblingCombinator') {
          sequences.push(' ~ ');
        } else {
          throw new Error('Unknown token.');
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return sequences.join('');
  };

  return {
    generate: generate
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVHZW5lcmF0b3IuanMiXSwibmFtZXMiOlsiZXNjYXBlVmFsdWUiLCJKU09OIiwicmVuZGVyU2VsZWN0b3IiLCJ0b2tlbnMiLCJzZWxlY3RvclRva2VuIiwicGFydHMiLCJ0b2tlbiIsInBhcnQiLCJnZW5lcmF0ZSIsInNlcXVlbmNlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0EsSUFBTUEsV0FBQUEsR0FBYyxTQUFkQSxXQUFjLENBQUEsS0FBQSxFQUEyQjtBQUM3QyxTQUFPQyxJQUFBQSxDQUFBQSxTQUFBQSxDQUFQLEtBQU9BLENBQVA7QUFERixDQUFBOztBQUlBLElBQU1DLGNBQUFBLEdBQWlCLFNBQWpCQSxjQUFpQixDQUFBLGFBQUEsRUFBc0M7QUFDM0QsTUFBTUMsTUFBQUEsR0FBU0MsYUFBQUEsQ0FBZixJQUFBO0FBQ0EsTUFBTUMsS0FBQUEsR0FBTixFQUFBO0FBRjJELE1BQUEseUJBQUEsR0FBQSxJQUFBO0FBQUEsTUFBQSxpQkFBQSxHQUFBLEtBQUE7QUFBQSxNQUFBLGNBQUEsR0FBQSxTQUFBOztBQUFBLE1BQUE7QUFJM0QsU0FBQSxJQUFBLFNBQUEsR0FBb0JGLE1BQXBCLENBQUEsTUFBQSxDQUFBLFFBQUEsQ0FBb0JBLEVBQXBCLEVBQUEsS0FBQSxFQUFBLEVBQUEseUJBQUEsR0FBQSxDQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsSUFBQSxFQUFBLEVBQUEsSUFBQSxDQUFBLEVBQUEseUJBQUEsR0FBQSxJQUFBLEVBQTRCO0FBQUEsVUFBakJHLEtBQWlCLEdBQUEsS0FBQSxDQUFBLEtBQUE7QUFDMUIsVUFBSUMsSUFBQUEsR0FBQUEsS0FBSixDQUFBOztBQUVBLFVBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUosbUJBQUEsRUFBd0M7QUFDdENDLFFBQUFBLElBQUFBLEdBQUFBLEdBQUFBO0FBREYsT0FBQSxNQUVPLElBQUlELEtBQUFBLENBQUFBLElBQUFBLEtBQUosY0FBQSxFQUFtQztBQUN4Q0MsUUFBQUEsSUFB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TyxLQUFlUCxDQUFmTztBQURGLFNBQUEsTUFFTyxJQUFJSCxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLHNCQUFBLEVBQTJDO0FBQ2hERyxVQUFBQSxTQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxHQUFBQTtBQURLLFNBQUEsTUFFQSxJQUFJSCxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLGlCQUFBLEVBQXNDO0FBQzNDRyxVQUFBQSxTQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxLQUFBQTtBQURLLFNBQUEsTUFFQSxJQUFJSCxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLDJCQUFBLEVBQWdEO0FBQ3JERyxVQUFBQSxTQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxLQUFBQTtBQURLLFNBQUEsTUFFQSxJQUFJSCxLQUFBQSxDQUFBQSxJQUFBQSxLQUFKLDBCQUFBLEVBQStDO0FBQ3BERyxVQUFBQSxTQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxLQUFBQTtBQURLLFNBQUEsTUFFQTtBQUNMLGdCQUFNLElBQUEsS0FBQSxDQUFOLGdCQUFNLENBQU47QUFDRDtBQUNGO0FBcEJrRixLQUFBLENBQUEsT0FBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLGtCQUFBLEdBQUEsSUFBQTtBQUFBLE1BQUEsZUFBQSxHQUFBLEdBQUE7QUFBQSxLQUFBLFNBQUE7QUFBQSxVQUFBO0FBQUEsWUFBQSxDQUFBLDBCQUFBLElBQUEsVUFBQSxDQUFBLE1BQUEsRUFBQTtBQUFBLFVBQUEsVUFBQSxDQUFBLE1BQUE7QUFBQTtBQUFBLE9BQUEsU0FBQTtBQUFBLFlBQUEsa0JBQUEsRUFBQTtBQUFBLGdCQUFBLGVBQUE7QUFBQTtBQUFBO0FBQUE7O0FBc0JuRixXQUFPQSxTQUFBQSxDQUFBQSxJQUFBQSxDQUFQLEVBQU9BLENBQVA7QUF0QkYsR0FBQTs7QUF5QkEsU0FBTztBQUNMRCxJQUFBQSxRQUFBQSxFQUFBQTtBQURLLEdBQVAiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7XG4gIENvbWJpbmF0b3JUb2tlblR5cGUsXG4gIFNlbGVjdG9yVG9rZW5UeXBlXG59IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBlc2NhcGVWYWx1ZSA9ICh2YWx1ZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbn07XG5cbmNvbnN0IHJlbmRlclNlbGVjdG9yID0gKHNlbGVjdG9yVG9rZW46IFNlbGVjdG9yVG9rZW5UeXBlKSA9PiB7XG4gIGNvbnN0IHRva2VucyA9IHNlbGVjdG9yVG9rZW4uYm9keTtcbiAgY29uc3QgcGFydHMgPSBbXTtcblxuICBmb3IgKGNvbnN0IHRva2VuIG9mIHRva2Vucykge1xuICAgIGxldCBwYXJ0O1xuXG4gICAgaWYgKHRva2VuLnR5cGUgPT09ICd1bml2ZXJzYWxTZWxlY3RvcicpIHtcbiAgICAgIHBhcnQgPSAnKic7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAndHlwZVNlbGVjdG9yJykge1xuICAgICAgcGFydCA9IHRva2VuLm5hbWU7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnaWRTZWxlY3RvcicpIHtcbiAgICAgIHBhcnQgPSAnIycgKyB0b2tlbi5uYW1lO1xuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2NsYXNzU2VsZWN0b3InKSB7XG4gICAgICBwYXJ0ID0gJy4nICsgdG9rZW4ubmFtZTtcbiAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdhdHRyaWJ1dGVQcmVzZW5jZVNlbGVjdG9yJykge1xuICAgICAgcGFydCA9ICdbJyArIHRva2VuLm5hbWUgKyAnXSc7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnYXR0cmlidXRlVmFsdWVTZWxlY3RvcicpIHtcbiAgICAgIHBhcnQgPSAnWycgKyB0b2tlbi5uYW1lICsgdG9rZW4ub3BlcmF0b3IgKyBlc2NhcGVWYWx1ZSh0b2tlbi52YWx1ZSkgKyAnXSc7XG4gICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAncHNldWRvQ2xhc3NTZWxlY3RvcicpIHtcbiAgICAgIHBhcnQgPSAnOicgKyB0b2tlbi5uYW1lO1xuXG4gICAgICBpZiAodG9rZW4ucGFyYW1ldGVycy5sZW5ndGgpIHtcbiAgICAgICAgcGFydCArPSAnKCcgKyB0b2tlbi5wYXJhbWV0ZXJzLm1hcChlc2NhcGVWYWx1ZSkuam9pbignLCAnKSArICcpJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdwc2V1ZG9FbGVtZW50U2VsZWN0b3InKSB7XG4gICAgICBwYXJ0ID0gJzo6JyArIHRva2VuLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0b2tlbi4nKTtcbiAgICB9XG5cbiAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICBjb25zdCBnZW5lcmF0ZSA9ICh0b2tlbnM6IEFycmF5PFNlbGVjdG9yVG9rZW5UeXBlIHwgQ29tYmluYXRvclRva2VuVHlwZT4pOiBzdHJpbmcgPT4ge1xuICAgIC8qKlxuICAgICAqIEB0b2RvIFRoaW5rIG9mIGEgYmV0dGVyIG5hbWUuIFRoaXMgYXJyYXkgY29udGFpbnMgc2VsZWN0b3JzIG9yIGNvbWJpbmF0b3JzLlxuICAgICAqL1xuICAgIGNvbnN0IHNlcXVlbmNlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpIHtcbiAgICAgIGlmICh0b2tlbi50eXBlID09PSAnc2VsZWN0b3InKSB7XG4gICAgICAgIHNlcXVlbmNlcy5wdXNoKHJlbmRlclNlbGVjdG9yKHRva2VuKSk7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdkZXNjZW5kYW50Q29tYmluYXRvcicpIHtcbiAgICAgICAgc2VxdWVuY2VzLnB1c2goJyAnKTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2NoaWxkQ29tYmluYXRvcicpIHtcbiAgICAgICAgc2VxdWVuY2VzLnB1c2goJyA+ICcpO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnYWRqYWNlbnRTaWJsaW5nQ29tYmluYXRvcicpIHtcbiAgICAgICAgc2VxdWVuY2VzLnB1c2goJyArICcpO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnZ2VuZXJhbFNpYmxpbmdDb21iaW5hdG9yJykge1xuICAgICAgICBzZXF1ZW5jZXMucHVzaCgnIH4gJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdG9rZW4uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlcXVlbmNlcy5qb2luKCcnKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGdlbmVyYXRlXG4gIH07XG59O1xuIl19