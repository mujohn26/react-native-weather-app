{"version":3,"sources":["../src/createMountWrapper.jsx"],"names":["stringOrFunction","PropTypes","makeValidElementType","args","adapter","propValue","props","validElementTypeRequired","validElementType","options","WrappingComponent","WrapperComponent","React","wrappingComponentProps","context","mount","callback","undefined","oldProps","oldContext","Component","refProp","component","object","node","childContextTypes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ref } from 'airbnb-prop-types';\nimport RootFinder from './RootFinder';\n\n/* eslint react/forbid-prop-types: 0 */\n\nconst stringOrFunction = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);\nconst makeValidElementType = (adapter) => {\n  if (!adapter) {\n    return stringOrFunction;\n  }\n\n  function validElementTypeRequired(props, propName, ...args) {\n    if (!adapter.isValidElementType) {\n      return stringOrFunction.isRequired(props, propName, ...args);\n    }\n    const propValue = props[propName]; // eslint-disable-line react/destructuring-assignment\n    if (adapter.isValidElementType(propValue)) {\n      return null;\n    }\n    return new TypeError(`${propName} must be a valid element type!`);\n  }\n\n  function validElementType(props, propName, ...args) {\n    const propValue = props[propName];\n    if (propValue == null) {\n      return null;\n    }\n    return validElementTypeRequired(props, propName, ...args);\n  }\n  validElementType.isRequired = validElementTypeRequired;\n\n  return validElementType;\n};\n\n/**\n * This is a utility component to wrap around the nodes we are\n * passing in to `mount()`. Theoretically, you could do everything\n * we are doing without this, but this makes it easier since\n * `renderIntoDocument()` doesn't really pass back a reference to\n * the DOM node it rendered to, so we can't really \"re-render\" to\n * pass new props in.\n */\nexport default function createMountWrapper(node, options = {}) {\n  const { adapter, wrappingComponent: WrappingComponent } = options;\n\n  class WrapperComponent extends React.Component {\n    constructor(...args) {\n      super(...args);\n      const { props, wrappingComponentProps, context } = this.props;\n      this.state = {\n        mount: true,\n        props,\n        wrappingComponentProps,\n        context,\n      };\n    }\n\n    setChildProps(newProps, newContext, callback = undefined) {\n      const { props: oldProps, context: oldContext } = this.state;\n      const props = { ...oldProps, ...newProps };\n      const context = { ...oldContext, ...newContext };\n      this.setState({ props, context }, callback);\n    }\n\n    setWrappingComponentProps(props, callback = undefined) {\n      this.setState({ wrappingComponentProps: props }, callback);\n    }\n\n    render() {\n      const { Component, refProp } = this.props;\n      const { mount, props, wrappingComponentProps } = this.state;\n      if (!mount) return null;\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      const component = <Component ref={refProp} {...props} />;\n      if (WrappingComponent) {\n        return (\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          <WrappingComponent {...wrappingComponentProps}>\n            <RootFinder>{component}</RootFinder>\n          </WrappingComponent>\n        );\n      }\n      return component;\n    }\n  }\n  WrapperComponent.propTypes = {\n    Component: makeValidElementType(adapter).isRequired,\n    refProp: PropTypes.oneOfType([PropTypes.string, ref()]),\n    props: PropTypes.object.isRequired,\n    wrappingComponentProps: PropTypes.object,\n    context: PropTypes.object,\n  };\n  WrapperComponent.defaultProps = {\n    refProp: null,\n    context: null,\n    wrappingComponentProps: null,\n  };\n\n  if (options.context && (node.type.contextTypes || options.childContextTypes)) {\n    // For full rendering, we are using this wrapper component to provide context if it is\n    // specified in both the options AND the child component defines `contextTypes` statically\n    // OR the merged context types for all children (the node component or deeper children) are\n    // specified in options parameter under childContextTypes.\n    // In that case, we define both a `getChildContext()` function and a `childContextTypes` prop.\n    const childContextTypes = {\n      ...node.type.contextTypes,\n      ...options.childContextTypes,\n    };\n\n    WrapperComponent.prototype.getChildContext = function getChildContext() {\n      return this.state.context;\n    };\n    WrapperComponent.childContextTypes = childContextTypes;\n  }\n  return WrapperComponent;\n}\n"]}