97d007b0eadef82a089b8a06c321d5af
'use strict';

var GetIntrinsic = require("../GetIntrinsic");

var $TypeError = GetIntrinsic('%TypeError%');

var callBound = require("../helpers/callBound");

var isLeadingSurrogate = require("../helpers/isLeadingSurrogate");

var isTrailingSurrogate = require("../helpers/isTrailingSurrogate");

var Type = require("./Type");

var UTF16DecodeSurrogatePair = require("./UTF16DecodeSurrogatePair");

var $charAt = callBound('String.prototype.charAt');
var $charCodeAt = callBound('String.prototype.charCodeAt');

module.exports = function CodePointAt(string, position) {
  if (Type(string) !== 'String') {
    throw new $TypeError('Assertion failed: `string` must be a String');
  }

  var size = string.length;

  if (position < 0 || position >= size) {
    throw new $TypeError('Assertion failed: `position` must be >= 0, and < the length of `string`');
  }

  var first = $charCodeAt(string, position);
  var cp = $charAt(string, position);
  var firstIsLeading = isLeadingSurrogate(first);
  var firstIsTrailing = isTrailingSurrogate(first);

  if (!firstIsLeading && !firstIsTrailing) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': false
    };
  }

  if (firstIsTrailing || position + 1 === size) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': true
    };
  }

  var second = $charCodeAt(string, position + 1);

  if (!isTrailingSurrogate(second)) {
    return {
      '[[CodePoint]]': cp,
      '[[CodeUnitCount]]': 1,
      '[[IsUnpairedSurrogate]]': true
    };
  }

  return {
    '[[CodePoint]]': UTF16DecodeSurrogatePair(first, second),
    '[[CodeUnitCount]]': 2,
    '[[IsUnpairedSurrogate]]': false
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNvZGVQb2ludEF0LmpzIl0sIm5hbWVzIjpbIkdldEludHJpbnNpYyIsInJlcXVpcmUiLCIkVHlwZUVycm9yIiwiY2FsbEJvdW5kIiwiaXNMZWFkaW5nU3Vycm9nYXRlIiwiaXNUcmFpbGluZ1N1cnJvZ2F0ZSIsIlR5cGUiLCJVVEYxNkRlY29kZVN1cnJvZ2F0ZVBhaXIiLCIkY2hhckF0IiwiJGNoYXJDb2RlQXQiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ29kZVBvaW50QXQiLCJzdHJpbmciLCJwb3NpdGlvbiIsInNpemUiLCJsZW5ndGgiLCJmaXJzdCIsImNwIiwiZmlyc3RJc0xlYWRpbmciLCJmaXJzdElzVHJhaWxpbmciLCJzZWNvbmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFlBQVksR0FBR0MsT0FBTyxtQkFBMUI7O0FBRUEsSUFBSUMsVUFBVSxHQUFHRixZQUFZLENBQUMsYUFBRCxDQUE3Qjs7QUFDQSxJQUFJRyxTQUFTLEdBQUdGLE9BQU8sd0JBQXZCOztBQUNBLElBQUlHLGtCQUFrQixHQUFHSCxPQUFPLGlDQUFoQzs7QUFDQSxJQUFJSSxtQkFBbUIsR0FBR0osT0FBTyxrQ0FBakM7O0FBRUEsSUFBSUssSUFBSSxHQUFHTCxPQUFPLFVBQWxCOztBQUNBLElBQUlNLHdCQUF3QixHQUFHTixPQUFPLDhCQUF0Qzs7QUFFQSxJQUFJTyxPQUFPLEdBQUdMLFNBQVMsQ0FBQyx5QkFBRCxDQUF2QjtBQUNBLElBQUlNLFdBQVcsR0FBR04sU0FBUyxDQUFDLDZCQUFELENBQTNCOztBQUlBTyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsV0FBVCxDQUFxQkMsTUFBckIsRUFBNkJDLFFBQTdCLEVBQXVDO0FBQ3ZELE1BQUlSLElBQUksQ0FBQ08sTUFBRCxDQUFKLEtBQWlCLFFBQXJCLEVBQStCO0FBQzlCLFVBQU0sSUFBSVgsVUFBSixDQUFlLDZDQUFmLENBQU47QUFDQTs7QUFDRCxNQUFJYSxJQUFJLEdBQUdGLE1BQU0sQ0FBQ0csTUFBbEI7O0FBQ0EsTUFBSUYsUUFBUSxHQUFHLENBQVgsSUFBZ0JBLFFBQVEsSUFBSUMsSUFBaEMsRUFBc0M7QUFDckMsVUFBTSxJQUFJYixVQUFKLENBQWUseUVBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUllLEtBQUssR0FBR1IsV0FBVyxDQUFDSSxNQUFELEVBQVNDLFFBQVQsQ0FBdkI7QUFDQSxNQUFJSSxFQUFFLEdBQUdWLE9BQU8sQ0FBQ0ssTUFBRCxFQUFTQyxRQUFULENBQWhCO0FBQ0EsTUFBSUssY0FBYyxHQUFHZixrQkFBa0IsQ0FBQ2EsS0FBRCxDQUF2QztBQUNBLE1BQUlHLGVBQWUsR0FBR2YsbUJBQW1CLENBQUNZLEtBQUQsQ0FBekM7O0FBQ0EsTUFBSSxDQUFDRSxjQUFELElBQW1CLENBQUNDLGVBQXhCLEVBQXlDO0FBQ3hDLFdBQU87QUFDTix1QkFBaUJGLEVBRFg7QUFFTiwyQkFBcUIsQ0FGZjtBQUdOLGlDQUEyQjtBQUhyQixLQUFQO0FBS0E7O0FBQ0QsTUFBSUUsZUFBZSxJQUFLTixRQUFRLEdBQUcsQ0FBWCxLQUFpQkMsSUFBekMsRUFBZ0Q7QUFDL0MsV0FBTztBQUNOLHVCQUFpQkcsRUFEWDtBQUVOLDJCQUFxQixDQUZmO0FBR04saUNBQTJCO0FBSHJCLEtBQVA7QUFLQTs7QUFDRCxNQUFJRyxNQUFNLEdBQUdaLFdBQVcsQ0FBQ0ksTUFBRCxFQUFTQyxRQUFRLEdBQUcsQ0FBcEIsQ0FBeEI7O0FBQ0EsTUFBSSxDQUFDVCxtQkFBbUIsQ0FBQ2dCLE1BQUQsQ0FBeEIsRUFBa0M7QUFDakMsV0FBTztBQUNOLHVCQUFpQkgsRUFEWDtBQUVOLDJCQUFxQixDQUZmO0FBR04saUNBQTJCO0FBSHJCLEtBQVA7QUFLQTs7QUFFRCxTQUFPO0FBQ04scUJBQWlCWCx3QkFBd0IsQ0FBQ1UsS0FBRCxFQUFRSSxNQUFSLENBRG5DO0FBRU4seUJBQXFCLENBRmY7QUFHTiwrQkFBMkI7QUFIckIsR0FBUDtBQUtBLENBeENEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgaXNMZWFkaW5nU3Vycm9nYXRlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0xlYWRpbmdTdXJyb2dhdGUnKTtcbnZhciBpc1RyYWlsaW5nU3Vycm9nYXRlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1RyYWlsaW5nU3Vycm9nYXRlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG52YXIgVVRGMTZEZWNvZGVTdXJyb2dhdGVQYWlyID0gcmVxdWlyZSgnLi9VVEYxNkRlY29kZVN1cnJvZ2F0ZVBhaXInKTtcblxudmFyICRjaGFyQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckF0Jyk7XG52YXIgJGNoYXJDb2RlQXQgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuY2hhckNvZGVBdCcpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8yMDIwLyNzZWMtY29kZXBvaW50YXRcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDb2RlUG9pbnRBdChzdHJpbmcsIHBvc2l0aW9uKSB7XG5cdGlmIChUeXBlKHN0cmluZykgIT09ICdTdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBzdHJpbmdgIG11c3QgYmUgYSBTdHJpbmcnKTtcblx0fVxuXHR2YXIgc2l6ZSA9IHN0cmluZy5sZW5ndGg7XG5cdGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgcG9zaXRpb25gIG11c3QgYmUgPj0gMCwgYW5kIDwgdGhlIGxlbmd0aCBvZiBgc3RyaW5nYCcpO1xuXHR9XG5cdHZhciBmaXJzdCA9ICRjaGFyQ29kZUF0KHN0cmluZywgcG9zaXRpb24pO1xuXHR2YXIgY3AgPSAkY2hhckF0KHN0cmluZywgcG9zaXRpb24pO1xuXHR2YXIgZmlyc3RJc0xlYWRpbmcgPSBpc0xlYWRpbmdTdXJyb2dhdGUoZmlyc3QpO1xuXHR2YXIgZmlyc3RJc1RyYWlsaW5nID0gaXNUcmFpbGluZ1N1cnJvZ2F0ZShmaXJzdCk7XG5cdGlmICghZmlyc3RJc0xlYWRpbmcgJiYgIWZpcnN0SXNUcmFpbGluZykge1xuXHRcdHJldHVybiB7XG5cdFx0XHQnW1tDb2RlUG9pbnRdXSc6IGNwLFxuXHRcdFx0J1tbQ29kZVVuaXRDb3VudF1dJzogMSxcblx0XHRcdCdbW0lzVW5wYWlyZWRTdXJyb2dhdGVdXSc6IGZhbHNlXG5cdFx0fTtcblx0fVxuXHRpZiAoZmlyc3RJc1RyYWlsaW5nIHx8IChwb3NpdGlvbiArIDEgPT09IHNpemUpKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdbW0NvZGVQb2ludF1dJzogY3AsXG5cdFx0XHQnW1tDb2RlVW5pdENvdW50XV0nOiAxLFxuXHRcdFx0J1tbSXNVbnBhaXJlZFN1cnJvZ2F0ZV1dJzogdHJ1ZVxuXHRcdH07XG5cdH1cblx0dmFyIHNlY29uZCA9ICRjaGFyQ29kZUF0KHN0cmluZywgcG9zaXRpb24gKyAxKTtcblx0aWYgKCFpc1RyYWlsaW5nU3Vycm9nYXRlKHNlY29uZCkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0J1tbQ29kZVBvaW50XV0nOiBjcCxcblx0XHRcdCdbW0NvZGVVbml0Q291bnRdXSc6IDEsXG5cdFx0XHQnW1tJc1VucGFpcmVkU3Vycm9nYXRlXV0nOiB0cnVlXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0J1tbQ29kZVBvaW50XV0nOiBVVEYxNkRlY29kZVN1cnJvZ2F0ZVBhaXIoZmlyc3QsIHNlY29uZCksXG5cdFx0J1tbQ29kZVVuaXRDb3VudF1dJzogMixcblx0XHQnW1tJc1VucGFpcmVkU3Vycm9nYXRlXV0nOiBmYWxzZVxuXHR9O1xufTtcbiJdfQ==