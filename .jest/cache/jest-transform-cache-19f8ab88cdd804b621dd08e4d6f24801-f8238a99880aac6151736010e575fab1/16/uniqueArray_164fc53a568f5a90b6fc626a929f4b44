7d1f379f049877e52fb60ba014955b4f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function uniqueCountWithSet(arr) {
  return new Set(arr).size;
}

function uniqueCountLegacy(arr) {
  var seen = [];
  arr.forEach(function (item) {
    if (seen.indexOf(item) === -1) {
      seen.push(item);
    }
  });
  return seen.length;
}

var getUniqueCount = typeof Set === 'function' ? uniqueCountWithSet : uniqueCountLegacy;

function requiredUniqueArray(props, propName, componentName) {
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  var result = _propTypes.array.isRequired.apply(_propTypes.array, [props, propName, componentName].concat(rest));

  if (result != null) {
    return result;
  }

  var propValue = props[propName];
  var uniqueCount = getUniqueCount(propValue);

  if (uniqueCount !== propValue.length) {
    return new RangeError("".concat(componentName, ": values must be unique. ").concat(propValue.length - uniqueCount, " duplicate values found."));
  }

  return null;
}

function uniqueArray(props, propName) {
  var propValue = props[propName];

  if (propValue == null) {
    return null;
  }

  for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    rest[_key2 - 2] = arguments[_key2];
  }

  return requiredUniqueArray.apply(void 0, [props, propName].concat(rest));
}

uniqueArray.isRequired = requiredUniqueArray;

var _default = function _default() {
  return (0, _wrapValidator["default"])(uniqueArray, 'uniqueArray');
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlxdWVBcnJheS5qcyJdLCJuYW1lcyI6WyJzZWVuIiwiYXJyIiwiZ2V0VW5pcXVlQ291bnQiLCJyZXN0IiwicmVzdWx0IiwiYXJyYXkiLCJwcm9wVmFsdWUiLCJwcm9wcyIsInVuaXF1ZUNvdW50IiwicmVxdWlyZWRVbmlxdWVBcnJheSIsInVuaXF1ZUFycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsMkJBQUEsQ0FBQTs7Ozs7Ozs7QUFFQSxTQUFBLGtCQUFBLENBQUEsR0FBQSxFQUFpQztBQUFFLFNBQU8sSUFBQSxHQUFBLENBQUEsR0FBQSxFQUFQLElBQUE7QUFBMkI7O0FBRTlELFNBQUEsaUJBQUEsQ0FBQSxHQUFBLEVBQWdDO0FBQzlCLE1BQU1BLElBQUksR0FBVixFQUFBO0FBQ0FDLEVBQUFBLEdBQUcsQ0FBSEEsT0FBQUEsQ0FBWSxVQUFBLElBQUEsRUFBVTtBQUNwQixRQUFJRCxJQUFJLENBQUpBLE9BQUFBLENBQUFBLElBQUFBLE1BQXVCLENBQTNCLENBQUEsRUFBK0I7QUFDN0JBLE1BQUFBLElBQUksQ0FBSkEsSUFBQUEsQ0FBQUEsSUFBQUE7QUFDRDtBQUhIQyxHQUFBQTtBQUtBLFNBQU9ELElBQUksQ0FBWCxNQUFBO0FBQ0Q7O0FBRUQsSUFBTUUsY0FBYyxHQUFHLE9BQUEsR0FBQSxLQUFBLFVBQUEsR0FBQSxrQkFBQSxHQUF2QixpQkFBQTs7QUFFQSxTQUFBLG1CQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQXNFO0FBQUEsT0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFOQyxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFOQSxJQUFBQSxJQUFNLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsSUFBQSxDQUFOQTtBQUFNOztBQUNwRSxNQUFNQyxNQUFNLEdBQUdDLFVBQUFBLENBQUFBLEtBQUFBLENBQUFBLFVBQUFBLENBQUFBLEtBQUFBLENBQUFBLFVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLE1BQUFBLENBQWYsSUFBZUEsQ0FBQUEsQ0FBZjs7QUFDQSxNQUFJRCxNQUFNLElBQVYsSUFBQSxFQUFvQjtBQUNsQixXQUFBLE1BQUE7QUFDRDs7QUFKbUUsTUFNaERFLFNBTmdELEdBTWxDQyxLQU5rQyxDQUFBLFFBQUEsQ0FBQTtBQU9wRSxNQUFNQyxXQUFXLEdBQUdOLGNBQWMsQ0FBbEMsU0FBa0MsQ0FBbEM7O0FBQ0EsTUFBSU0sV0FBVyxLQUFLRixTQUFTLENBQTdCLE1BQUEsRUFBc0M7QUFDcEMsV0FBTyxJQUFBLFVBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsMkJBQUEsRUFBQSxNQUFBLENBQTJEQSxTQUFTLENBQVRBLE1BQUFBLEdBQTNELFdBQUEsRUFBUCwwQkFBTyxDQUFBLENBQVA7QUFDRDs7QUFDRCxTQUFBLElBQUE7QUFDRDs7QUFFRCxTQUFBLFdBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUErQztBQUFBLE1BQ3pCQSxTQUR5QixHQUNYQyxLQURXLENBQUEsUUFBQSxDQUFBOztBQUU3QyxNQUFJRCxTQUFTLElBQWIsSUFBQSxFQUF1QjtBQUNyQixXQUFBLElBQUE7QUFDRDs7QUFKNEMsT0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFOSCxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxJQUFBQSxJQUFNLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsS0FBQSxDQUFOQTtBQUFNOztBQU03QyxTQUFPTSxtQkFBbUIsQ0FBbkJBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLE1BQUFBLENBQVAsSUFBT0EsQ0FBQUEsQ0FBUDtBQUNEOztBQUNEQyxXQUFXLENBQVhBLFVBQUFBLEdBQUFBLG1CQUFBQTs7ZUFFZSxTQUFBLFFBQUEsR0FBQTtBQUFBLFNBQU0sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxXQUFBLEVBQU4sYUFBTSxDQUFOIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXkgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZnVuY3Rpb24gdW5pcXVlQ291bnRXaXRoU2V0KGFycikgeyByZXR1cm4gbmV3IFNldChhcnIpLnNpemU7IH1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiB1bmlxdWVDb3VudExlZ2FjeShhcnIpIHtcbiAgY29uc3Qgc2VlbiA9IFtdO1xuICBhcnIuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChzZWVuLmluZGV4T2YoaXRlbSkgPT09IC0xKSB7XG4gICAgICBzZWVuLnB1c2goaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZW4ubGVuZ3RoO1xufVxuXG5jb25zdCBnZXRVbmlxdWVDb3VudCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgPyB1bmlxdWVDb3VudFdpdGhTZXQgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1bmlxdWVDb3VudExlZ2FjeTtcblxuZnVuY3Rpb24gcmVxdWlyZWRVbmlxdWVBcnJheShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgY29uc3QgcmVzdWx0ID0gYXJyYXkuaXNSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICBjb25zdCB1bmlxdWVDb3VudCA9IGdldFVuaXF1ZUNvdW50KHByb3BWYWx1ZSk7XG4gIGlmICh1bmlxdWVDb3VudCAhPT0gcHJvcFZhbHVlLmxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgUmFuZ2VFcnJvcihgJHtjb21wb25lbnROYW1lfTogdmFsdWVzIG11c3QgYmUgdW5pcXVlLiAke3Byb3BWYWx1ZS5sZW5ndGggLSB1bmlxdWVDb3VudH0gZHVwbGljYXRlIHZhbHVlcyBmb3VuZC5gKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gdW5pcXVlQXJyYXkocHJvcHMsIHByb3BOYW1lLCAuLi5yZXN0KSB7XG4gIGNvbnN0IHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0gPSBwcm9wcztcbiAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gcmVxdWlyZWRVbmlxdWVBcnJheShwcm9wcywgcHJvcE5hbWUsIC4uLnJlc3QpO1xufVxudW5pcXVlQXJyYXkuaXNSZXF1aXJlZCA9IHJlcXVpcmVkVW5pcXVlQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHdyYXBWYWxpZGF0b3IodW5pcXVlQXJyYXksICd1bmlxdWVBcnJheScpO1xuIl19