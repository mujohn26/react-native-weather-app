63d36a75ce76d15403f22e3396887fa7
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map) {
  var keys = Object.keys(map).join("|"),
      replace = getReplacer(map);
  keys += "|#[xX][\\da-fA-F]+|#\\d+";
  var re = new RegExp("&(?:" + keys + ");", "g");
  return function (str) {
    return String(str).replace(re, replace);
  };
}

var decodeHTML = function () {
  var legacy = Object.keys(legacyMap).sort(sorter);
  var keys = Object.keys(entityMap).sort(sorter);

  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }

  var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
      replace = getReplacer(entityMap);

  function replacer(str) {
    if (str.substr(-1) !== ";") str += ";";
    return replace(str);
  }

  return function (str) {
    return String(str).replace(re, replacer);
  };
}();

function sorter(a, b) {
  return a < b ? 1 : -1;
}

function getReplacer(map) {
  return function replace(str) {
    if (str.charAt(1) === "#") {
      if (str.charAt(2) === "X" || str.charAt(2) === "x") {
        return decodeCodePoint(parseInt(str.substr(3), 16));
      }

      return decodeCodePoint(parseInt(str.substr(2), 10));
    }

    return map[str.slice(1, -1)];
  };
}

module.exports = {
  XML: decodeXMLStrict,
  HTML: decodeHTML,
  HTMLStrict: decodeHTMLStrict
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY29kZS5qcyJdLCJuYW1lcyI6WyJlbnRpdHlNYXAiLCJyZXF1aXJlIiwibGVnYWN5TWFwIiwieG1sTWFwIiwiZGVjb2RlQ29kZVBvaW50IiwiZGVjb2RlWE1MU3RyaWN0IiwiZ2V0U3RyaWN0RGVjb2RlciIsImRlY29kZUhUTUxTdHJpY3QiLCJtYXAiLCJrZXlzIiwiT2JqZWN0Iiwiam9pbiIsInJlcGxhY2UiLCJnZXRSZXBsYWNlciIsInJlIiwiUmVnRXhwIiwic3RyIiwiU3RyaW5nIiwiZGVjb2RlSFRNTCIsImxlZ2FjeSIsInNvcnQiLCJzb3J0ZXIiLCJpIiwiaiIsImxlbmd0aCIsInJlcGxhY2VyIiwic3Vic3RyIiwiYSIsImIiLCJjaGFyQXQiLCJwYXJzZUludCIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlhNTCIsIkhUTUwiLCJIVE1MU3RyaWN0Il0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8seUJBQXZCO0FBQUEsSUFDSUMsU0FBUyxHQUFHRCxPQUFPLHVCQUR2QjtBQUFBLElBRUlFLE1BQU0sR0FBR0YsT0FBTyxvQkFGcEI7QUFBQSxJQUdJRyxlQUFlLEdBQUdILE9BQU8seUJBSDdCOztBQUtBLElBQUlJLGVBQWUsR0FBR0MsZ0JBQWdCLENBQUNILE1BQUQsQ0FBdEM7QUFBQSxJQUNJSSxnQkFBZ0IsR0FBR0QsZ0JBQWdCLENBQUNOLFNBQUQsQ0FEdkM7O0FBR0EsU0FBU00sZ0JBQVQsQ0FBMEJFLEdBQTFCLEVBQStCO0FBQzNCLE1BQUlDLElBQUksR0FBR0MsTUFBTSxDQUFDRCxJQUFQLENBQVlELEdBQVosRUFBaUJHLElBQWpCLENBQXNCLEdBQXRCLENBQVg7QUFBQSxNQUNJQyxPQUFPLEdBQUdDLFdBQVcsQ0FBQ0wsR0FBRCxDQUR6QjtBQUdBQyxFQUFBQSxJQUFJLElBQUksMEJBQVI7QUFFQSxNQUFJSyxFQUFFLEdBQUcsSUFBSUMsTUFBSixDQUFXLFNBQVNOLElBQVQsR0FBZ0IsSUFBM0IsRUFBaUMs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QWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGVudGl0eU1hcCA9IHJlcXVpcmUoXCIuLi9tYXBzL2VudGl0aWVzLmpzb25cIiksXG4gICAgbGVnYWN5TWFwID0gcmVxdWlyZShcIi4uL21hcHMvbGVnYWN5Lmpzb25cIiksXG4gICAgeG1sTWFwID0gcmVxdWlyZShcIi4uL21hcHMveG1sLmpzb25cIiksXG4gICAgZGVjb2RlQ29kZVBvaW50ID0gcmVxdWlyZShcIi4vZGVjb2RlX2NvZGVwb2ludC5qc1wiKTtcblxudmFyIGRlY29kZVhNTFN0cmljdCA9IGdldFN0cmljdERlY29kZXIoeG1sTWFwKSxcbiAgICBkZWNvZGVIVE1MU3RyaWN0ID0gZ2V0U3RyaWN0RGVjb2RlcihlbnRpdHlNYXApO1xuXG5mdW5jdGlvbiBnZXRTdHJpY3REZWNvZGVyKG1hcCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMobWFwKS5qb2luKFwifFwiKSxcbiAgICAgICAgcmVwbGFjZSA9IGdldFJlcGxhY2VyKG1hcCk7XG5cbiAgICBrZXlzICs9IFwifCNbeFhdW1xcXFxkYS1mQS1GXSt8I1xcXFxkK1wiO1xuXG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMgKyBcIik7XCIsIFwiZ1wiKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UocmUsIHJlcGxhY2UpO1xuICAgIH07XG59XG5cbnZhciBkZWNvZGVIVE1MID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWdhY3kgPSBPYmplY3Qua2V5cyhsZWdhY3lNYXApLnNvcnQoc29ydGVyKTtcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZW50aXR5TWFwKS5zb3J0KHNvcnRlcik7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChsZWdhY3lbal0gPT09IGtleXNbaV0pIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7P1wiO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5c1tpXSArPSBcIjtcIjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZSA9IG5ldyBSZWdFeHAoXCImKD86XCIgKyBrZXlzLmpvaW4oXCJ8XCIpICsgXCJ8I1t4WF1bXFxcXGRhLWZBLUZdKzs/fCNcXFxcZCs7PylcIiwgXCJnXCIpLFxuICAgICAgICByZXBsYWNlID0gZ2V0UmVwbGFjZXIoZW50aXR5TWFwKTtcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKHN0cikge1xuICAgICAgICBpZiAoc3RyLnN1YnN0cigtMSkgIT09IFwiO1wiKSBzdHIgKz0gXCI7XCI7XG4gICAgICAgIHJldHVybiByZXBsYWNlKHN0cik7XG4gICAgfVxuXG4gICAgLy9UT0RPIGNvbnNpZGVyIGNyZWF0aW5nIGEgbWVyZ2VkIG1hcFxuICAgIHJldHVybiBmdW5jdGlvbihzdHIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UocmUsIHJlcGxhY2VyKTtcbiAgICB9O1xufSkoKTtcblxuZnVuY3Rpb24gc29ydGVyKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAxIDogLTE7XG59XG5cbmZ1bmN0aW9uIGdldFJlcGxhY2VyKG1hcCkge1xuICAgIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKHN0cikge1xuICAgICAgICBpZiAoc3RyLmNoYXJBdCgxKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlmIChzdHIuY2hhckF0KDIpID09PSBcIlhcIiB8fCBzdHIuY2hhckF0KDIpID09PSBcInhcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWNvZGVDb2RlUG9pbnQocGFyc2VJbnQoc3RyLnN1YnN0cigzKSwgMTYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVDb2RlUG9pbnQocGFyc2VJbnQoc3RyLnN1YnN0cigyKSwgMTApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwW3N0ci5zbGljZSgxLCAtMSldO1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFhNTDogZGVjb2RlWE1MU3RyaWN0LFxuICAgIEhUTUw6IGRlY29kZUhUTUwsXG4gICAgSFRNTFN0cmljdDogZGVjb2RlSFRNTFN0cmljdFxufTtcbiJdfQ==