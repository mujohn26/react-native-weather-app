92f34629530c7350a8b188b50dbd7d9b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUTCWeekYear;

var _index = _interopRequireDefault(require("../toInteger/index.js"));

var _index2 = _interopRequireDefault(require("../../toDate/index.js"));

var _index3 = _interopRequireDefault(require("../startOfUTCWeek/index.js"));

var _index4 = _interopRequireDefault(require("../requiredArgs/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  (0, _index4.default)(1, arguments);
  var date = (0, _index2.default)(dirtyDate, dirtyOptions);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index.default)(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index.default)(options.firstWeekContainsDate);

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0, _index3.default)(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0, _index3.default)(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImdldFVUQ1dlZWtZZWFyIiwiX2luZGV4IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfaW5kZXgyIiwiX2luZGV4MyIsIl9pbmRleDQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGlydHlEYXRlIiwiZGlydHlPcHRpb25zIiwiYXJndW1lbnRzIiwiZGF0ZSIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsIm9wdGlvbnMiLCJsb2NhbGUiLCJsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiUmFuZ2VFcnJvciIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJEYXRlIiwic2V0VVRDRnVsbFllYXIiLCJzZXRVVENIb3VycyIsInN0YXJ0T2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJnZXRUaW1lIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsY0FBbEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyx5QkFBUixDQUFuQzs7QUFFQSxJQUFJQyxPQUFPLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLHlCQUFSLENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sOEJBQVIsQ0FBcEM7O0FBRUEsSUFBSUcsT0FBTyxHQUFHSixzQkFBc0IsQ0FBQ0MsT0FBTyw0QkFBUixDQUFwQzs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0ssR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRVIsSUFBQUEsT0FBTyxFQUFFUTtBQUFYLEdBQXJDO0FBQXdEOztBQUkvRixTQUFTUCxjQUFULENBQXdCUyxTQUF4QixFQUFtQ0MsWUFBbkMsRUFBaUQ7QUFDL0MsR0FBQyxHQUFHSixPQUFPLENBQUNQLE9BQVosRUFBcUIsQ0FBckIsRUFBd0JZLFNBQXhCO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLENBQUMsR0FBR1IsT0FBTyxDQUFDTCxPQUFaLEVBQXFCVSxTQUFyQixFQUFnQ0MsWUFBaEMsQ0FBWDtBQUNBLE1BQUlHLElBQUksR0FBR0QsSUFBSSxDQUFDRSxjQUFMLEVBQVg7QUFDQSxNQUFJQyxPQUFPLEdBQUdMLFlBQVksSUFBSSxFQUE5QjtBQUNBLE1BQUlNLE1BQU0sR0FBR0QsT0FBTyxDQUFDQyxNQUFyQjtBQUNBLE1BQUlDLDJCQUEyQixHQUFHRCxNQUFNLElBQUlBLE1BQU0sQ0FBQ0QsT0FBakIsSUFBNEJDLE1BQU0sQ0FBQ0QsT0FBUCxDQUFlRyxxQkFBN0U7QUFDQSxNQUFJQyw0QkFBNEIsR0FBR0YsMkJBQTJCLElBQUksSUFBL0IsR0FBc0MsQ0FBdEMsR0FBMEMsQ0FBQyxHQUFHaEIsTUFBTSxDQUFDRixPQUFYLEVBQW9Ca0IsMkJBQXBCLENBQTdFO0FBQ0EsTUFBSUMscUJBQXFCLEdBQUdILE9BQU8sQ0FBQ0cscUJBQVIsSUFBaUMsSUFBakMsR0FBd0NDLDRCQUF4QyxHQUF1RSxDQUFDLEdBQUdsQixNQUFNLENBQUNGLE9BQVgsRUFBb0JnQixPQUFPLENBQUNHLHFCQUE1QixDQUFuRzs7QUFFQSxNQUFJLEVBQUVBLHFCQUFxQixJQUFJLENBQXpCLElBQThCQSxxQkFBcUIsSUFBSSxDQUF6RCxDQUFKLEVBQWlFO0FBQy9ELFVBQU0sSUFBSUUsVUFBSixDQUFlLDJEQUFmLENBQU47QUFDRDs7QUFFRCxNQUFJQyxtQkFBbUIsR0FBRyxJQUFJQyxJQUFKLENBQVMsQ0FBVCxDQUExQjtBQUNBRCxFQUFBQSxtQkFBbUIsQ0FBQ0UsY0FBcEIsQ0FBbUNWLElBQUksR0FBRyxDQUExQyxFQUE2QyxDQUE3QyxFQUFnREsscUJBQWhEO0FBQ0FHLEVBQUFBLG1CQUFtQixDQUFDRyxXQUFwQixDQUFnQyxDQUFoQyxFQUFtQyxDQUFuQyxFQUFzQyxDQUF0QyxFQUF5QyxDQUF6QztBQUNBLE1BQUlDLGVBQWUsR0FBRyxDQUFDLEdBQUdwQixPQUFPLENBQUNOLE9BQVosRUFBcUJzQixtQkFBckIsRUFBMENYLFlBQTFDLENBQXRCO0FBQ0EsTUFBSWdCLG1CQUFtQixHQUFHLElBQUlKLElBQUosQ0FBUyxDQUFULENBQTFCO0FBQ0FJLEVBQUFBLG1CQUFtQixDQUFDSCxjQUFwQixDQUFtQ1YsSUFBbkMsRUFBeUMsQ0FBekMsRUFBNENLLHFCQUE1QztBQUNBUSxFQUFBQSxtQkFBbUIsQ0FBQ0YsV0FBcEIsQ0FBZ0MsQ0FBaEMsRUFBbUMsQ0FBbkMsRUFBc0MsQ0FBdEMsRUFBeUMsQ0FBekM7QUFDQSxNQUFJRyxlQUFlLEdBQUcsQ0FBQyxHQUFHdEIsT0FBTyxDQUFDTixPQUFaLEVBQXFCMkIsbUJBQXJCLEVBQTBDaEIsWUFBMUMsQ0FBdEI7O0FBRUEsTUFBSUUsSUFBSSxDQUFDZ0IsT0FBTCxNQUFrQkgsZUFBZSxDQUFDRyxPQUFoQixFQUF0QixFQUFpRDtBQUMvQyxXQUFPZixJQUFJLEdBQUcsQ0FBZDtBQUNELEdBRkQsTUFFTyxJQUFJRCxJQUFJLENBQUNnQixPQUFMLE1BQWtCRCxlQUFlLENBQUNDLE9BQWhCLEVBQXRCLEVBQWlEO0FBQ3RELFdBQU9mLElBQVA7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPQSxJQUFJLEdBQUcsQ0FBZDtBQUNEO0FBQ0Y7O0FBRURnQixNQUFNLENBQUNoQyxPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRVVENXZWVrWWVhcjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5mdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICAoMCwgX2luZGV4NC5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXgyLmRlZmF1bHQpKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6ICgwLCBfaW5kZXguZGVmYXVsdCkobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogKDAsIF9pbmRleC5kZWZhdWx0KShvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=