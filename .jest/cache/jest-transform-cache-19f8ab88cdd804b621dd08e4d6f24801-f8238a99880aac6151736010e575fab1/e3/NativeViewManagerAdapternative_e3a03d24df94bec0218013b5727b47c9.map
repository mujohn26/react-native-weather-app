{"version":3,"sources":["../src/NativeViewManagerAdapter.native.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAcA,IAAM,iBAAiB,GAAG,MAAM,CAAC,IAAP,CAAY,0BAAZ,CAA1B;;AASM,SAAU,wBAAV,CAA4C,QAA5C,EAA4D;AAChE,MAAI,OAAJ,EAAa;AAAA,QACH,oBADG,GACsB,0BADtB,CACH,oBADG;;AAEX,QAAI,CAAC,oBAAoB,CAAC,iBAArB,CAAuC,QAAvC,CAAgD,QAAhD,CAAL,EAAgE;AAC9D,UAAM,wBAAwB,GAAG,oBAAoB,CAAC,iBAArB,CAAuC,IAAvC,CAA4C,IAA5C,CAAjC;AACA,MAAA,OAAO,CAAC,IAAR,gDAC+C,QAD/C,kKACoN,wBADpN;AAGD;AACF;;AAID,MAAM,mBAAmB,2BAAyB,QAAlD;AACA,MAAM,oBAAoB,GAAG,yCAC3B,mBAD2B,CAA7B;AAGA,MAAM,0BAA0B,GAAG,CAAC,uBAAU,oBAAV,GAChC,uBAAU,oBAAV,CAA+B,mBAA/B,CADgC,GAEhC,uBAAU,mBAAV,CAF+B,KAEI;AACrC,IAAA,WAAW,EAAE,EADwB;AAErC,IAAA,gBAAgB,EAAE;AAFmB,GAFvC;AAMA,MAAM,6BAA6B,IACjC,UADiC,0CAE9B,iBAF8B,oCAG9B,MAAM,CAAC,IAAP,CAAY,0BAA0B,CAAC,WAAvC,CAH8B,oCAI9B,MAAM,CAAC,IAAP,CAAY,0BAA0B,CAAC,gBAAvC,CAJ8B,EAAnC;;AAQA,WAAS,sBAAT,CAAgC,KAAhC,EAAuC,GAAvC,EAA0C;AAGxC,QAAM,WAAW,GAAG,mBAAK,KAAL,EAAY,6BAAZ,CAApB;AACA,QAAM,YAAY,GAAG,mBAAK,KAAL,EAAY,6BAAZ,CAArB;AACA,WAAO,eAAA,aAAA,CAAC,oBAAD,EAAqB,uBAAA,EAAA,EAAK,WAAL,EAAgB;AAAE,MAAA,iBAAiB,EAAE,YAArB;AAAmC,MAAA,GAAG,EAAE;AAAxC,KAAhB,CAArB,CAAP;AACD;;AACD,EAAA,sBAAsB,CAAC,WAAvB,gBAAgD,QAAhD;AACA,SAAO,eAAM,UAAN,CAAiB,sBAAjB,CAAP;AACD","sourcesContent":["import omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport React from 'react';\nimport { NativeModules, UIManager, ViewPropTypes, requireNativeComponent } from 'react-native';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n// NOTE: React Native is moving away from runtime PropTypes and may remove ViewPropTypes, in which\n// case we will need another way to separate standard React Native view props from other props,\n// which we proxy through the adapter\nconst ViewPropTypesKeys = Object.keys(ViewPropTypes);\n\ntype NativeExpoComponentProps = {\n  proxiedProperties: object;\n};\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P = any>(viewName: string): React.ComponentType<P> {\n  if (__DEV__) {\n    const { NativeUnimoduleProxy } = NativeModules;\n    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {\n      const exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');\n      console.warn(\n        `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n      );\n    }\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent = requireNativeComponent<NativeExpoComponentProps>(\n    reactNativeViewName\n  );\n  const reactNativeUIConfiguration = (UIManager.getViewManagerConfig\n    ? UIManager.getViewManagerConfig(reactNativeViewName)\n    : UIManager[reactNativeViewName]) || {\n    NativeProps: {},\n    directEventTypes: {},\n  };\n  const reactNativeComponentPropNames = [\n    'children',\n    ...ViewPropTypesKeys,\n    ...Object.keys(reactNativeUIConfiguration.NativeProps),\n    ...Object.keys(reactNativeUIConfiguration.directEventTypes),\n  ];\n\n  // Define a component for universal-module authors to access their native view manager\n  function NativeComponentAdapter(props, ref) {\n    // TODO: `omit` may incur a meaningful performance cost across many native components rendered\n    // in the same update. Profile this and write out a partition function if this is a bottleneck.\n    const nativeProps = pick(props, reactNativeComponentPropNames);\n    const proxiedProps = omit(props, reactNativeComponentPropNames);\n    return <ReactNativeComponent {...nativeProps} proxiedProperties={proxiedProps} ref={ref} />;\n  }\n  NativeComponentAdapter.displayName = `Adapter<${viewName}>`;\n  return React.forwardRef(NativeComponentAdapter);\n}\n"],"sourceRoot":""}