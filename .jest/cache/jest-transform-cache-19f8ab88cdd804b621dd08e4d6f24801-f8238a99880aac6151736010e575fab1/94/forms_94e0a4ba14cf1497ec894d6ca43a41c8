ddb20022b33592d156c1fcf70743bddf
var submittableSelector = 'input,select,textarea,keygen',
    r20 = /%20/g,
    rCRLF = /\r?\n/g,
    _ = {
  map: require('lodash/map')
};

exports.serialize = function () {
  var arr = this.serializeArray();

  var retArr = _.map(arr, function (data) {
    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);
  });

  return retArr.join('&').replace(r20, '+');
};

exports.serializeArray = function () {
  var Cheerio = this.constructor;
  return this.map(function () {
    var elem = this;
    var $elem = Cheerio(elem);

    if (elem.name === 'form') {
      return $elem.find(submittableSelector).toArray();
    } else {
      return $elem.filter(submittableSelector).toArray();
    }
  }).filter('[name!=""]:not(:disabled)' + ':not(:submit, :button, :image, :reset, :file)' + ':matches([checked], :not(:checkbox, :radio))').map(function (i, elem) {
    var $elem = Cheerio(elem);
    var name = $elem.attr('name');
    var value = $elem.val();

    if (value == null) {
      value = '';
    }

    if (Array.isArray(value)) {
      return _.map(value, function (val) {
        return {
          name: name,
          value: val.replace(rCRLF, '\r\n')
        };
      });
    } else {
      return {
        name: name,
        value: value.replace(rCRLF, '\r\n')
      };
    }
  }).get();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvcm1zLmpzIl0sIm5hbWVzIjpbInN1Ym1pdHRhYmxlU2VsZWN0b3IiLCJyMjAiLCJyQ1JMRiIsIl8iLCJtYXAiLCJyZXF1aXJlIiwiZXhwb3J0cyIsInNlcmlhbGl6ZSIsImFyciIsInNlcmlhbGl6ZUFycmF5IiwicmV0QXJyIiwiZGF0YSIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5hbWUiLCJ2YWx1ZSIsImpvaW4iLCJyZXBsYWNlIiwiQ2hlZXJpbyIsImNvbnN0cnVjdG9yIiwiZWxlbSIsIiRlbGVtIiwiZmluZCIsInRvQXJyYXkiLCJmaWx0ZXIiLCJpIiwiYXR0ciIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImdldCJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBSUEsbUJBQW1CLEdBQUcsOEJBQTFCO0FBQUEsSUFDSUMsR0FBRyxHQUFHLE1BRFY7QUFBQSxJQUVJQyxLQUFLLEdBQUcsUUFGWjtBQUFBLElBR0lDLENBQUMsR0FBRztBQUNGQyxFQUFBQSxHQUFHLEVBQUVDLE9BQU8sQ0FBQyxZQUFEO0FBRFYsQ0FIUjs7QUFPQUMsT0FBTyxDQUFDQyxTQUFSLEdBQW9CLFlBQVc7QUFFN0IsTUFBSUMsR0FBRyxHQUFHLEtBQUtDLGNBQUwsRUFBVjs7QUFHQSxNQUFJQyxNQUFNLEdBQUdQLENBQUMsQ0FBQ0MsR0FBRixDQUFNSSxHQUFOLEVBQVcsVUFBU0csSUFBVCxFQUFlO0FBQ3JDLFdBQU9DLGtCQUFrQixDQUFDRCxJQUFJLENBQUNFLElBQU4sQ0FBbEIsR0FBZ0MsR0FBaEMsR0FBc0NELGtCQUFrQixDQUFDRCxJQUFJLENBQUNHLEtBQU4sQ0FBL0Q7QUFDRCxHQUZZLENBQWI7O0FBS0EsU0FBT0osTUFBTSxDQUFDSyxJQUFQLENBQVksR0FBWixFQUFpQkMsT0FBakIsQ0FBeUJmLEdBQXpCLEVBQThCLEdBQTlCLENBQVA7QUFDRCxDQVhEOztBQWFBSyxPQUFPLENBQUNHLGNBQVIsR0FBeUIsWUFBVztBQUVsQyxNQUFJUSxPQUFPLEdBQUcsS0FBS0MsV0FBbkI7QUFDQSxTQUFPLEtBQUtkLEdBQUwsQ0FBUyxZQUFXO0FBQ3ZCLFFBQUllLElBQUksR0FBRyxJQUFYO0FBQ0EsUUFBSUMsS0FBSyxHQUFHSCxPQUFPLENBQUNFLElBQUQsQ0FBbkI7O0FBQ0EsUUFBSUEsSUFBSSxDQUFDTixJQUFMLEtBQWMsTUFBbEIsRUFBMEI7QUFDeEIsYUFBT08sS0FBSyxDQUFDQyxJQUFOLENBQVdyQixtQkFBWCxFQUFnQ3NCLE9BQWhDLEVBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPRixLQUFLLENBQUNHLE1BQU4sQ0FBYXZCLG1CQUFiLEVBQWtDc0IsT0FBbEMsRUFBUDtBQUNEO0FBQ0YsR0FSSSxFQVFGQyxNQVJFLENBVUQsOEJBRUUsK0NBRkYsR0FJRSw4Q0FkRCxFQWdCSG5CLEdBaEJHLENBZ0JDLFVBQVNvQixDQUFULEVBQVlMLElBQVosRUFBa0I7QUFDdEIsUUFBSUMsS0FBSyxHQUFHSCxPQUFPLENBQUNFLElBQUQsQ0FBbkI7QUFDQSxRQUFJTixJQUFJLEdBQUdPLEtBQUssQ0FBQ0ssSUFBTixDQUFXLE1BQVgsQ0FBWDtBQUNBLFFBQUlYLEtBQUssR0FBR00sS0FBSyxDQUFDTSxHQUFOLEVBQVo7O0FBR0EsUUFBSVosS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDakJBLE1BQUFBLEtBQUssR0FBRyxFQUFSO0FBQ0Q7O0FBR0QsUUFBSWEsS0FBSyxDQUFDQyxPQUFOLENBQWNkLEtBQWQsQ0FBSixFQUEwQjtBQUN4QixhQUFPWCxDQUFDLENBQUNDLEdBQUYsQ0FBTVUsS0FBTixFQUFhLFVBQVNZLEdBQVQsRUFBYztBQUdoQyxlQUFPO0FBQUNiLFVBQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxVQUFBQSxLQUFLLEVBQUVZLEdBQUcsQ0FBQ1YsT0FBSixDQUFhZCxLQUFiLEVBQW9CLE1BQXBCO0FBQXBCLFNBQVA7QUFDRCxPQUpNLENBQVA7QUFNRCxLQVBELE1BT087QUFDTCxhQUFPO0FBQUNXLFFBQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxRQUFBQSxLQUFLLEVBQUVBLEtBQUssQ0FBQ0UsT0FBTixDQUFlZCxLQUFmLEVBQXNCLE1BQXRCO0FBQXBCLE9BQVA7QUFDRDtBQUVGLEdBdENJLEVBc0NGMkIsR0F0Q0UsRUFBUDtBQXVDRCxDQTFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMi4xLjMvc3JjL21hbmlwdWxhdGlvbi92YXIvcmNoZWNrYWJsZVR5cGUuanNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L2Jsb2IvMi4xLjMvc3JjL3NlcmlhbGl6ZS5qc1xudmFyIHN1Ym1pdHRhYmxlU2VsZWN0b3IgPSAnaW5wdXQsc2VsZWN0LHRleHRhcmVhLGtleWdlbicsXG4gICAgcjIwID0gLyUyMC9nLFxuICAgIHJDUkxGID0gL1xccj9cXG4vZyxcbiAgICBfID0ge1xuICAgICAgbWFwOiByZXF1aXJlKCdsb2Rhc2gvbWFwJylcbiAgICB9O1xuXG5leHBvcnRzLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAvLyBDb252ZXJ0IGZvcm0gZWxlbWVudHMgaW50byBuYW1lL3ZhbHVlIG9iamVjdHNcbiAgdmFyIGFyciA9IHRoaXMuc2VyaWFsaXplQXJyYXkoKTtcblxuICAvLyBTZXJpYWxpemUgZWFjaCBlbGVtZW50IGludG8gYSBrZXkvdmFsdWUgc3RyaW5nXG4gIHZhciByZXRBcnIgPSBfLm1hcChhcnIsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEubmFtZSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoZGF0YS52YWx1ZSk7XG4gIH0pO1xuXG4gIC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cbiAgcmV0dXJuIHJldEFyci5qb2luKCcmJykucmVwbGFjZShyMjAsICcrJyk7XG59O1xuXG5leHBvcnRzLnNlcmlhbGl6ZUFycmF5ID0gZnVuY3Rpb24oKSB7XG4gIC8vIFJlc29sdmUgYWxsIGZvcm0gZWxlbWVudHMgZnJvbSBlaXRoZXIgZm9ybXMgb3IgY29sbGVjdGlvbnMgb2YgZm9ybSBlbGVtZW50c1xuICB2YXIgQ2hlZXJpbyA9IHRoaXMuY29uc3RydWN0b3I7XG4gIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtID0gdGhpcztcbiAgICAgIHZhciAkZWxlbSA9IENoZWVyaW8oZWxlbSk7XG4gICAgICBpZiAoZWxlbS5uYW1lID09PSAnZm9ybScpIHtcbiAgICAgICAgcmV0dXJuICRlbGVtLmZpbmQoc3VibWl0dGFibGVTZWxlY3RvcikudG9BcnJheSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICRlbGVtLmZpbHRlcihzdWJtaXR0YWJsZVNlbGVjdG9yKS50b0FycmF5KCk7XG4gICAgICB9XG4gICAgfSkuZmlsdGVyKFxuICAgICAgICAvLyBWZXJpZnkgZWxlbWVudHMgaGF2ZSBhIG5hbWUgKGBhdHRyLm5hbWVgKSBhbmQgYXJlIG5vdCBkaXNhYmxlZCAoYDpkaXNhYmxlZGApXG4gICAgICAgICdbbmFtZSE9XCJcIl06bm90KDpkaXNhYmxlZCknXG4gICAgICAgIC8vIGFuZCBjYW5ub3QgYmUgY2xpY2tlZCAoYFt0eXBlPXN1Ym1pdF1gKSBvciBhcmUgdXNlZCBpbiBgeC13d3ctZm9ybS11cmxlbmNvZGVkYCAoYFt0eXBlPWZpbGVdYClcbiAgICAgICAgKyAnOm5vdCg6c3VibWl0LCA6YnV0dG9uLCA6aW1hZ2UsIDpyZXNldCwgOmZpbGUpJ1xuICAgICAgICAvLyBhbmQgYXJlIGVpdGhlciBjaGVja2VkL2Rvbid0IGhhdmUgYSBjaGVja2FibGUgc3RhdGVcbiAgICAgICAgKyAnOm1hdGNoZXMoW2NoZWNrZWRdLCA6bm90KDpjaGVja2JveCwgOnJhZGlvKSknXG4gICAgLy8gQ29udmVydCBlYWNoIG9mIHRoZSBlbGVtZW50cyB0byBpdHMgdmFsdWUocylcbiAgICApLm1hcChmdW5jdGlvbihpLCBlbGVtKSB7XG4gICAgICB2YXIgJGVsZW0gPSBDaGVlcmlvKGVsZW0pO1xuICAgICAgdmFyIG5hbWUgPSAkZWxlbS5hdHRyKCduYW1lJyk7XG4gICAgICB2YXIgdmFsdWUgPSAkZWxlbS52YWwoKTtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gdmFsdWUgc2V0IChlLmcuIGB1bmRlZmluZWRgLCBgbnVsbGApLCB0aGVuIGRlZmF1bHQgdmFsdWUgdG8gZW1wdHlcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHdlIGhhdmUgYW4gYXJyYXkgb2YgdmFsdWVzIChlLmcuIGA8c2VsZWN0IG11bHRpcGxlPmApLCByZXR1cm4gYW4gYXJyYXkgb2Yga2V5L3ZhbHVlIHBhaXJzXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIF8ubWFwKHZhbHVlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAvLyBXZSB0cmltIHJlcGxhY2UgYW55IGxpbmUgZW5kaW5ncyAoZS5nLiBgXFxyYCBvciBgXFxyXFxuYCB3aXRoIGBcXHJcXG5gKSB0byBndWFyYW50ZWUgY29uc2lzdGVuY3kgYWNyb3NzIHBsYXRmb3Jtc1xuICAgICAgICAgIC8vICAgVGhlc2UgY2FuIG9jY3VyIGluc2lkZSBvZiBgPHRleHRhcmVhPidzYFxuICAgICAgICAgIHJldHVybiB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgJ1xcclxcbicgKX07XG4gICAgICAgIH0pO1xuICAgICAgLy8gT3RoZXJ3aXNlIChlLmcuIGA8aW5wdXQgdHlwZT1cInRleHRcIj5gLCByZXR1cm4gb25seSBvbmUga2V5L3ZhbHVlIHBhaXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7bmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLnJlcGxhY2UoIHJDUkxGLCAnXFxyXFxuJyApfTtcbiAgICAgIH1cbiAgICAvLyBDb252ZXJ0IG91ciByZXN1bHQgdG8gYW4gYXJyYXlcbiAgICB9KS5nZXQoKTtcbn07XG4iXX0=