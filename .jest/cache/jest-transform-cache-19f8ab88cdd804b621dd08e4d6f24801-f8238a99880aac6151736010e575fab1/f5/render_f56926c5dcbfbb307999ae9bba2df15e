83e55af9ef3e3b8f9cdaa2b5b930f639
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _range = _interopRequireDefault(require("lodash/range"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var renderChildToJson = function renderChildToJson(child, options) {
  if ((0, _isNil.default)(child)) {
    return null;
  }

  if (['tag', 'script'].includes(child.type)) {
    return (0, _utils.applyMap)({
      node: child,
      type: child.name,
      props: child.attribs,
      children: (0, _utils.compact)(child.children.map(function (c) {
        return renderChildToJson(c, options);
      })),
      $$typeof: Symbol.for('react.test.json')
    }, options);
  } else if (child.type === 'text') {
    return child.data;
  }

  return null;
};

var renderToJson = function renderToJson(wrapper) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if ((0, _isNil.default)(wrapper) || wrapper.length === 0) {
    return null;
  }

  return wrapper.length > 1 ? (0, _range.default)(0, wrapper.length).map(function (node) {
    return renderChildToJson(wrapper[node], options);
  }) : renderChildToJson(wrapper[0], options);
};

var _default = renderToJson;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmFuZ2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pc05pbCIsIl91dGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJyZW5kZXJDaGlsZFRvSnNvbiIsImNoaWxkIiwib3B0aW9ucyIsImluY2x1ZGVzIiwidHlwZSIsImFwcGx5TWFwIiwibm9kZSIsIm5hbWUiLCJwcm9wcyIsImF0dHJpYnMiLCJjaGlsZHJlbiIsImNvbXBhY3QiLCJtYXAiLCJjIiwiJCR0eXBlb2YiLCJTeW1ib2wiLCJmb3IiLCJkYXRhIiwicmVuZGVyVG9Kc29uIiwid3JhcHBlciIsImxlbmd0aCIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxjQUFELENBQVIsQ0FBbkM7O0FBRUEsSUFBSUMsTUFBTSxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGNBQUQsQ0FBUixDQUFuQzs7QUFFQSxJQUFJRSxNQUFNLEdBQUdGLE9BQU8sV0FBcEI7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NJLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVOLElBQUFBLE9BQU8sRUFBRU07QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsSUFBTUUsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBb0I7QUFDNUMsTUFBSSxDQUFDLEdBQUdOLE1BQU0sQ0FBQ0osT0FBWCxFQUFvQlMsS0FBcEIsQ0FBSixFQUFnQztBQUM5QixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUFJLENBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0JFLFFBQWxCLENBQTJCRixLQUFLLENBQUNHLElBQWpDLENBQUosRUFBNEM7QUFDMUMsV0FBTyxDQUFDLEdBQUdQLE1BQU0sQ0FBQ1EsUUFBWCxFQUFxQjtBQUMxQkMsTUFBQUEsSUFBSSxFQUFFTCxLQURvQjtBQUUxQkcsTUFBQUEsSUFBSSxFQUFFSCxLQUFLLENBQUNNLElBRmM7QUFHMUJDLE1BQUFBLEtBQUssRUFBRVAsS0FBSyxDQUFDUSxPQUhhO0FBSTFCQyxNQUFBQSxRQUFRLEVBQUUsQ0FBQyxHQUFHYixNQUFNLENBQUNjLE9BQVgsRUFBb0JWLEtBQUssQ0FBQ1MsUUFBTixDQUFlRSxHQUFmLENBQW1CLFVBQUFDLENBQUM7QUFBQSxlQUFJYixpQkFBaUIsQ0FBQ2EsQ0FBRCxFQUFJWCxPQUFKLENBQXJCO0FBQUEsT0FBcEIsQ0FBcEIsQ0FKZ0I7QUFLMUJZLE1BQUFBLFFBQVEsRUFBRUMsTUFBTSxDQUFDQyxHQUFQLENBQVcsaUJBQVg7QUFMZ0IsS0FBckIsRUFNSmQsT0FOSSxDQUFQO0FBT0QsR0FSRCxNQVFPLElBQUlELEtBQUssQ0FBQ0csSUFBTixLQUFlLE1BQW5CLEVBQTJCO0FBQ2hDLFdBQU9ILEtBQUssQ0FBQ2dCLElBQWI7QUFDRDs7QUFFRCxTQUFPLElBQVA7QUFDRCxDQWxCRDs7QUFvQkEsSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBQ0MsT0FBRCxFQUEyQjtBQUFBLE1BQWpCakIsT0FBaUIsdUVBQVAsRUFBTzs7QUFDOUMsTUFBSSxDQUFDLEdBQUdOLE1BQU0sQ0FBQ0osT0FBWCxFQUFvQjJCLE9BQXBCLEtBQWdDQSxPQUFPLENBQUNDLE1BQVIsS0FBbUIsQ0FBdkQsRUFBMEQ7QUFDeEQsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsU0FBT0QsT0FBTyxDQUFDQyxNQUFSLEdBQWlCLENBQWpCLEdBQXFCLENBQUMsR0FBRzNCLE1BQU0sQ0FBQ0QsT0FBWCxFQUFvQixDQUFwQixFQUF1QjJCLE9BQU8sQ0FBQ0MsTUFBL0IsRUFBdUNSLEdBQXZDLENBQTJDLFVBQUFOLElBQUk7QUFBQSxXQUFJTixpQkFBaUIsQ0FBQ21CLE9BQU8sQ0FBQ2IsSUFBRCxDQUFSLEVBQWdCSixPQUFoQixDQUFyQjtBQUFBLEdBQS9DLENBQXJCLEdBQXFIRixpQkFBaUIsQ0FBQ21CLE9BQU8sQ0FBQyxDQUFELENBQVIsRUFBYWpCLE9BQWIsQ0FBN0k7QUFDRCxDQU5EOztBQVFBLElBQUltQixRQUFRLEdBQUdILFlBQWY7QUFDQTVCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQjZCLFFBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmFuZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvcmFuZ2VcIikpO1xuXG52YXIgX2lzTmlsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL2lzTmlsXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCByZW5kZXJDaGlsZFRvSnNvbiA9IChjaGlsZCwgb3B0aW9ucykgPT4ge1xuICBpZiAoKDAsIF9pc05pbC5kZWZhdWx0KShjaGlsZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChbJ3RhZycsICdzY3JpcHQnXS5pbmNsdWRlcyhjaGlsZC50eXBlKSkge1xuICAgIHJldHVybiAoMCwgX3V0aWxzLmFwcGx5TWFwKSh7XG4gICAgICBub2RlOiBjaGlsZCxcbiAgICAgIHR5cGU6IGNoaWxkLm5hbWUsXG4gICAgICBwcm9wczogY2hpbGQuYXR0cmlicyxcbiAgICAgIGNoaWxkcmVuOiAoMCwgX3V0aWxzLmNvbXBhY3QpKGNoaWxkLmNoaWxkcmVuLm1hcChjID0+IHJlbmRlckNoaWxkVG9Kc29uKGMsIG9wdGlvbnMpKSksXG4gICAgICAkJHR5cGVvZjogU3ltYm9sLmZvcigncmVhY3QudGVzdC5qc29uJylcbiAgICB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChjaGlsZC50eXBlID09PSAndGV4dCcpIHtcbiAgICByZXR1cm4gY2hpbGQuZGF0YTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcblxuY29uc3QgcmVuZGVyVG9Kc29uID0gKHdyYXBwZXIsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBpZiAoKDAsIF9pc05pbC5kZWZhdWx0KSh3cmFwcGVyKSB8fCB3cmFwcGVyLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHdyYXBwZXIubGVuZ3RoID4gMSA/ICgwLCBfcmFuZ2UuZGVmYXVsdCkoMCwgd3JhcHBlci5sZW5ndGgpLm1hcChub2RlID0+IHJlbmRlckNoaWxkVG9Kc29uKHdyYXBwZXJbbm9kZV0sIG9wdGlvbnMpKSA6IHJlbmRlckNoaWxkVG9Kc29uKHdyYXBwZXJbMF0sIG9wdGlvbnMpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gcmVuZGVyVG9Kc29uO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il19