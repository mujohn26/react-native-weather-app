f9a08c10dc0ded0542f13e81a1637f25
'use strict';

var Mixin = require("../../utils/mixin"),
    Tokenizer = require("../../tokenizer"),
    PositionTrackingPreprocessorMixin = require("../position_tracking/preprocessor_mixin"),
    inherits = require('util').inherits;

var LocationInfoTokenizerMixin = module.exports = function (tokenizer) {
  Mixin.call(this, tokenizer);
  this.tokenizer = tokenizer;
  this.posTracker = new PositionTrackingPreprocessorMixin(tokenizer.preprocessor);
  this.currentAttrLocation = null;
  this.currentTokenLocation = null;
};

inherits(LocationInfoTokenizerMixin, Mixin);

LocationInfoTokenizerMixin.prototype._getCurrentLocation = function () {
  return {
    line: this.posTracker.line,
    col: this.posTracker.col,
    startOffset: this.posTracker.offset,
    endOffset: -1
  };
};

LocationInfoTokenizerMixin.prototype._attachCurrentAttrLocationInfo = function () {
  this.currentAttrLocation.endOffset = this.posTracker.offset;
  var currentToken = this.tokenizer.currentToken,
      currentAttr = this.tokenizer.currentAttr;
  if (!currentToken.location.attrs) currentToken.location.attrs = Object.create(null);
  currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
};

LocationInfoTokenizerMixin.prototype._getOverriddenMethods = function (mxn, orig) {
  var methods = {
    _createStartTagToken: function _createStartTagToken() {
      orig._createStartTagToken.call(this);

      this.currentToken.location = mxn.currentTokenLocation;
    },
    _createEndTagToken: function _createEndTagToken() {
      orig._createEndTagToken.call(this);

      this.currentToken.location = mxn.currentTokenLocation;
    },
    _createCommentToken: function _createCommentToken() {
      orig._createCommentToken.call(this);

      this.currentToken.location = mxn.currentTokenLocation;
    },
    _createDoctypeToken: function _createDoctypeToken(initialName) {
      orig._createDoctypeToken.call(this, initialName);

      this.currentToken.location = mxn.currentTokenLocation;
    },
    _createCharacterToken: function _createCharacterToken(type, ch) {
      orig._createCharacterToken.call(this, type, ch);

      this.currentCharacterToken.location = mxn.currentTokenLocation;
    },
    _createAttr: function _createAttr(attrNameFirstCh) {
      orig._createAttr.call(this, attrNameFirstCh);

      mxn.currentAttrLocation = mxn._getCurrentLocation();
    },
    _leaveAttrName: function _leaveAttrName(toState) {
      orig._leaveAttrName.call(this, toState);

      mxn._attachCurrentAttrLocationInfo();
    },
    _leaveAttrValue: function _leaveAttrValue(toState) {
      orig._leaveAttrValue.call(this, toState);

      mxn._attachCurrentAttrLocationInfo();
    },
    _emitCurrentToken: function _emitCurrentToken() {
      if (this.currentCharacterToken) this.currentCharacterToken.location.endOffset = this.currentToken.location.startOffset;
      this.currentToken.location.endOffset = mxn.posTracker.offset + 1;

      orig._emitCurrentToken.call(this);
    },
    _emitCurrentCharacterToken: function _emitCurrentCharacterToken() {
      if (this.currentCharacterToken && this.currentCharacterToken.location.endOffset === -1) this.currentCharacterToken.location.endOffset = mxn.posTracker.offset;

      orig._emitCurrentCharacterToken.call(this);
    }
  };
  Object.keys(Tokenizer.MODE).forEach(function (modeName) {
    var state = Tokenizer.MODE[modeName];

    methods[state] = function (cp) {
      mxn.currentTokenLocation = mxn._getCurrentLocation();
      orig[state].call(this, cp);
    };
  });
  return methods;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,