c9e5aee9196c52d665fb6dda6cafb888
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatDistance;
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

function formatDistance(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImZvcm1hdERpc3RhbmNlIiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsInRva2VuIiwiY291bnQiLCJvcHRpb25zIiwicmVzdWx0IiwicmVwbGFjZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxjQUFsQjtBQUNBLElBQUlDLG9CQUFvQixHQUFHO0FBQ3pCQyxFQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkMsSUFBQUEsR0FBRyxFQUFFLG9CQURXO0FBRWhCQyxJQUFBQSxLQUFLLEVBQUU7QUFGUyxHQURPO0FBS3pCQyxFQUFBQSxRQUFRLEVBQUU7QUFDUkYsSUFBQUEsR0FBRyxFQUFFLFVBREc7QUFFUkMsSUFBQUEsS0FBSyxFQUFFO0FBRkMsR0FMZTtBQVN6QkUsRUFBQUEsV0FBVyxFQUFFLGVBVFk7QUFVekJDLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCSixJQUFBQSxHQUFHLEVBQUUsb0JBRFc7QUFFaEJDLElBQUFBLEtBQUssRUFBRTtBQUZTLEdBVk87QUFjekJJLEVBQUFBLFFBQVEsRUFBRTtBQUNSTCxJQUFBQSxHQUFHLEVBQUUsVUFERztBQUVSQyxJQUFBQSxLQUFLLEVBQUU7QUFGQyxHQWRlO0FBa0J6QkssRUFBQUEsV0FBVyxFQUFFO0FBQ1hOLElBQUFBLEdBQUcsRUFBRSxjQURNO0FBRVhDLElBQUFBLEtBQUssRUFBRTtBQUZJLEdBbEJZO0FBc0J6Qk0sRUFBQUEsTUFBTSxFQUFFO0FBQ05QLElBQUFBLEdBQUcsRUFBRSxRQURDO0FBRU5DLElBQUFBLEtBQUssRUFBRTtBQUZELEdBdEJpQjtBQTBCekJPLEVBQUFBLEtBQUssRUFBRTtBQUNMUixJQUFBQSxHQUFHLEVBQUUsT0FEQTtBQUVMQyxJQUFBQSxLQUFLLEVBQUU7QUFGRixHQTFCa0I7QUE4QnpCUSxFQUFBQSxXQUFXLEVBQUU7QUFDWFQsSUFBQUEsR0FBRyxFQUFFLGNBRE07QUFFWEMsSUFBQUEsS0FBSyxFQUFFO0FBRkksR0E5Qlk7QUFrQ3pCUyxFQUFBQSxNQUFNLEVBQUU7QUFDTlYsSUFBQUEsR0FBRyxFQUFFLFFBREM7QUFFTkMsSUFBQUEsS0FBSyxFQUFFO0FBRkQsR0FsQ2lCO0FBc0N6QlUsRUFBQUEsWUFBWSxFQUFFO0FBQ1pYLElBQUFBLEdBQUcsRUFBRSxlQURPO0FBRVpDLElBQUFBLEtBQUssRUFBRTtBQUZLLEdBdENXO0FBMEN6QlcsRUFBQUEsT0FBTyxFQUFFO0FBQ1BaLElBQUFBLEdBQUcsRUFBRSxTQURFO0FBRVBDLElBQUFBLEtBQUssRUFBRTtBQUZBLEdBMUNnQjtBQThDekJZLEVBQUFBLFdBQVcsRUFBRTtBQUNYYixJQUFBQSxHQUFHLEVBQUUsY0FETTtBQUVYQyxJQUFBQSxLQUFLLEVBQUU7QUFGSSxHQTlDWTtBQWtEekJhLEVBQUFBLE1BQU0sRUFBRTtBQUNOZCxJQUFBQSxHQUFHLEVBQUUsUUFEQztBQUVOQyxJQUFBQSxLQUFLLEVBQUU7QUFGRCxHQWxEaUI7QUFzRHpCYyxFQUFBQSxVQUFVLEVBQUU7QUFDVmYsSUFBQUEsR0FBRyxFQUFFLGFBREs7QUFFVkMsSUFBQUEsS0FBSyxFQUFFO0FBRkcsR0F0RGE7QUEwRHpCZSxFQUFBQSxZQUFZLEVBQUU7QUFDWmhCLElBQUFBLEdBQUcsRUFBRSxlQURPO0FBRVpDLElBQUFBLEtBQUssRUFBRTtBQUZLO0FBMURXLENBQTNCOztBQWdFQSxTQUFTSixjQUFULENBQXdCb0IsS0FBeEIsRUFBK0JDLEtBQS9CLEVBQXNDQyxPQUF0QyxFQUErQztBQUM3Q0EsRUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFDQSxNQUFJQyxNQUFKOztBQUVBLE1BQUksT0FBT3RCLG9CQUFvQixDQUFDbUIsS0FBRCxDQUEzQixLQUF1QyxRQUEzQyxFQUFxRDtBQUNuREcsSUFBQUEsTUFBTSxHQUFHdEIsb0JBQW9CLENBQUNtQixLQUFELENBQTdCO0FBQ0QsR0FGRCxNQUVPLElBQUlDLEtBQUssS0FBSyxDQUFkLEVBQWlCO0FBQ3RCRSxJQUFBQSxNQUFNLEdBQUd0QixvQkFBb0IsQ0FBQ21CLEtBQUQsQ0FBcEIsQ0FBNEJqQixHQUFyQztBQUNELEdBRk0sTUFFQTtBQUNMb0IsSUFBQUEsTUFBTSxHQUFHdEIsb0JBQW9CLENBQUNtQixLQUFELENBQXBCLENBQTRCaEIsS0FBNUIsQ0FBa0NvQixPQUFsQyxDQUEwQyxXQUExQyxFQUF1REgsS0FBdkQsQ0FBVDtBQUNEOztBQUVELE1BQUlDLE9BQU8sQ0FBQ0csU0FBWixFQUF1QjtBQUNyQixRQUFJSCxPQUFPLENBQUNJLFVBQVIsR0FBcUIsQ0FBekIsRUFBNEI7QUFDMUIsYUFBTyxRQUFRSCxNQUFmO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0EsTUFBTSxHQUFHLE1BQWhCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQSxNQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQzlCLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZvcm1hdERpc3RhbmNlO1xudmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==