239ae2d3af273b9762acbb32c909c48f
'use strict';

var GetIntrinsic = require("../GetIntrinsic");

var $TypeError = GetIntrinsic('%TypeError%');

var MAX_SAFE_INTEGER = require("../helpers/maxSafeInteger");

var Call = require("./Call");

var CreateDataPropertyOrThrow = require("./CreateDataPropertyOrThrow");

var Get = require("./Get");

var HasProperty = require("./HasProperty");

var IsArray = require("./IsArray");

var LengthOfArrayLike = require("./LengthOfArrayLike");

var ToString = require("./ToString");

module.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {
  var mapperFunction;

  if (arguments.length > 5) {
    mapperFunction = arguments[5];
  }

  var targetIndex = start;
  var sourceIndex = 0;

  while (sourceIndex < sourceLen) {
    var P = ToString(sourceIndex);
    var exists = HasProperty(source, P);

    if (exists === true) {
      var element = Get(source, P);

      if (typeof mapperFunction !== 'undefined') {
        if (arguments.length <= 6) {
          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');
        }

        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);
      }

      var shouldFlatten = false;

      if (depth > 0) {
        shouldFlatten = IsArray(element);
      }

      if (shouldFlatten) {
        var elementLen = LengthOfArrayLike(element);
        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);
      } else {
        if (targetIndex >= MAX_SAFE_INTEGER) {
          throw new $TypeError('index too large');
        }

        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);
        targetIndex += 1;
      }
    }

    sourceIndex += 1;
  }

  return targetIndex;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZsYXR0ZW5JbnRvQXJyYXkuanMiXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsIiRUeXBlRXJyb3IiLCJNQVhfU0FGRV9JTlRFR0VSIiwiQ2FsbCIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJHZXQiLCJIYXNQcm9wZXJ0eSIsIklzQXJyYXkiLCJMZW5ndGhPZkFycmF5TGlrZSIsIlRvU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyIsIkZsYXR0ZW5JbnRvQXJyYXkiLCJ0YXJnZXQiLCJzb3VyY2UiLCJzb3VyY2VMZW4iLCJzdGFydCIsImRlcHRoIiwibWFwcGVyRnVuY3Rpb24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwiUCIsImV4aXN0cyIsImVsZW1lbnQiLCJzaG91bGRGbGF0dGVuIiwiZWxlbWVudExlbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLG1CQUExQjs7QUFFQSxJQUFJQyxVQUFVLEdBQUdGLFlBQVksQ0FBQyxhQUFELENBQTdCOztBQUVBLElBQUlHLGdCQUFnQixHQUFHRixPQUFPLDZCQUE5Qjs7QUFFQSxJQUFJRyxJQUFJLEdBQUdILE9BQU8sVUFBbEI7O0FBQ0EsSUFBSUkseUJBQXlCLEdBQUdKLE9BQU8sK0JBQXZDOztBQUNBLElBQUlLLEdBQUcsR0FBR0wsT0FBTyxTQUFqQjs7QUFDQSxJQUFJTSxXQUFXLEdBQUdOLE9BQU8saUJBQXpCOztBQUNBLElBQUlPLE9BQU8sR0FBR1AsT0FBTyxhQUFyQjs7QUFDQSxJQUFJUSxpQkFBaUIsR0FBR1IsT0FBTyx1QkFBL0I7O0FBQ0EsSUFBSVMsUUFBUSxHQUFHVCxPQUFPLGNBQXRCOztBQUtBVSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsZ0JBQVQsQ0FBMEJDLE1BQTFCLEVBQWtDQyxNQUFsQyxFQUEwQ0MsU0FBMUMsRUFBcURDLEtBQXJELEVBQTREQyxLQUE1RCxFQUFtRTtBQUNuRixNQUFJQyxjQUFKOztBQUNBLE1BQUlDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN6QkYsSUFBQUEsY0FBYyxHQUFHQyxTQUFTLENBQUMsQ0FBRCxDQUExQjtBQUNBOztBQUVELE1BQUlFLFdBQVcsR0FBR0wsS0FBbEI7QUFDQSxNQUFJTSxXQUFXLEdBQUcsQ0FBbEI7O0FBQ0EsU0FBT0EsV0FBVyxHQUFHUCxTQUFyQixFQUFnQztBQUMvQixRQUFJUSxDQUFDLEdBQUdkLFFBQVEsQ0FBQ2EsV0FBRCxDQUFoQjtBQUNBLFFBQUlFLE1BQU0sR0FBR2xCLFdBQVcsQ0FBQ1EsTUFBRCxFQUFTUyxDQUFULENBQXhCOztBQUNBLFFBQUlDLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ3BCLFVBQUlDLE9BQU8sR0FBR3BCLEdBQUcsQ0FBQ1MsTUFBRCxFQUFTUyxDQUFULENBQWpCOztBQUNBLFVBQUksT0FBT0wsY0FBUCxLQUEwQixXQUE5QixFQUEyQztBQUMxQyxZQUFJQyxTQUFTLENBQUNDLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDMUIsZ0JBQU0sSUFBSW5CLFVBQUosQ0FBZSx1RUFBZixDQUFOO0FBQ0E7O0FBQ0R3QixRQUFBQSxPQUFPLEdBQUd0QixJQUFJLENBQUNlLGNBQUQsRUFBaUJDLFNBQVMsQ0FBQyxDQUFELENBQTFCLEVBQStCLENBQUNNLE9BQUQsRUFBVUgsV0FBVixFQUF1QlIsTUFBdkIsQ0FBL0IsQ0FBZDtBQUNBOztBQUNELFVBQUlZLGFBQWEsR0FBRyxLQUFwQjs7QUFDQSxVQUFJVCxLQUFLLEdBQUcsQ0FBWixFQUFlO0FBQ2RTLFFBQUFBLGFBQWEsR0FBR25CLE9BQU8sQ0FBQ2tCLE9BQUQsQ0FBdkI7QUFDQTs7QUFDRCxVQUFJQyxhQUFKLEVBQW1CO0FBQ2xCLFlBQUlDLFVBQVUsR0FBR25CLGlCQUFpQixDQUFDaUIsT0FBRCxDQUFsQztBQUNBSixRQUFBQSxXQUFXLEdBQUdULGdCQUFnQixDQUFDQyxNQUFELEVBQVNZLE9BQVQsRUFBa0JFLFVBQWxCLEVBQThCTixXQUE5QixFQUEyQ0osS0FBSyxHQUFHLENBQW5ELENBQTlCO0FBQ0EsT0FIRCxNQUdPO0FBQ04sWUFBSUksV0FBVyxJQUFJbkIsZ0JBQW5CLEVBQXFDO0FBQ3BDLGdCQUFNLElBQUlELFVBQUosQ0FBZSxpQkFBZixDQUFOO0FBQ0E7O0FBQ0RHLFFBQUFBLHlCQUF5QixDQUFDUyxNQUFELEVBQVNKLFFBQVEsQ0FBQ1ksV0FBRCxDQUFqQixFQUFnQ0ksT0FBaEMsQ0FBekI7QUFDQUosUUFBQUEsV0FBVyxJQUFJLENBQWY7QUFDQTtBQUNEOztBQUNEQyxJQUFBQSxXQUFXLElBQUksQ0FBZjtBQUNBOztBQUVELFNBQU9ELFdBQVA7QUFDQSxDQXRDRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4vQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdycpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSGFzUHJvcGVydHkgPSByZXF1aXJlKCcuL0hhc1Byb3BlcnR5Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIExlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9MZW5ndGhPZkFycmF5TGlrZScpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnLi9Ub1N0cmluZycpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8yMDIwLyNzZWMtZmxhdHRlbmludG9hcnJheVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCkge1xuXHR2YXIgbWFwcGVyRnVuY3Rpb247XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNSkge1xuXHRcdG1hcHBlckZ1bmN0aW9uID0gYXJndW1lbnRzWzVdO1xuXHR9XG5cblx0dmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG5cdHZhciBzb3VyY2VJbmRleCA9IDA7XG5cdHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuXHRcdHZhciBQID0gVG9TdHJpbmcoc291cmNlSW5kZXgpO1xuXHRcdHZhciBleGlzdHMgPSBIYXNQcm9wZXJ0eShzb3VyY2UsIFApO1xuXHRcdGlmIChleGlzdHMgPT09IHRydWUpIHtcblx0XHRcdHZhciBlbGVtZW50ID0gR2V0KHNvdXJjZSwgUCk7XG5cdFx0XHRpZiAodHlwZW9mIG1hcHBlckZ1bmN0aW9uICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA8PSA2KSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IHRoaXNBcmcgaXMgcmVxdWlyZWQgd2hlbiBtYXBwZXJGdW5jdGlvbiBpcyBwcm92aWRlZCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW1lbnQgPSBDYWxsKG1hcHBlckZ1bmN0aW9uLCBhcmd1bWVudHNbNl0sIFtlbGVtZW50LCBzb3VyY2VJbmRleCwgc291cmNlXSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc2hvdWxkRmxhdHRlbiA9IGZhbHNlO1xuXHRcdFx0aWYgKGRlcHRoID4gMCkge1xuXHRcdFx0XHRzaG91bGRGbGF0dGVuID0gSXNBcnJheShlbGVtZW50KTtcblx0XHRcdH1cblx0XHRcdGlmIChzaG91bGRGbGF0dGVuKSB7XG5cdFx0XHRcdHZhciBlbGVtZW50TGVuID0gTGVuZ3RoT2ZBcnJheUxpa2UoZWxlbWVudCk7XG5cdFx0XHRcdHRhcmdldEluZGV4ID0gRmxhdHRlbkludG9BcnJheSh0YXJnZXQsIGVsZW1lbnQsIGVsZW1lbnRMZW4sIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRhcmdldEluZGV4ID49IE1BWF9TQUZFX0lOVEVHRVIpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignaW5kZXggdG9vIGxhcmdlJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Q3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyh0YXJnZXQsIFRvU3RyaW5nKHRhcmdldEluZGV4KSwgZWxlbWVudCk7XG5cdFx0XHRcdHRhcmdldEluZGV4ICs9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHNvdXJjZUluZGV4ICs9IDE7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0SW5kZXg7XG59O1xuIl19