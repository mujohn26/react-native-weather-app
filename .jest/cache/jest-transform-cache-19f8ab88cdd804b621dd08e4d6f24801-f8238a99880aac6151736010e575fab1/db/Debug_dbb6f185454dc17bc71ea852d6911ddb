d9a7cb573174d5829a51a5f83098bdeb
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

exports.typeName = typeName;
exports.spaces = spaces;
exports.indent = indent;
exports.debugNode = debugNode;
exports.debugNodes = debugNodes;

var _lodash = require('lodash.escape');

var _lodash2 = _interopRequireDefault(_lodash);

var _functionPrototype = require('function.prototype.name');

var _functionPrototype2 = _interopRequireDefault(_functionPrototype);

var _isString = require('is-string');

var _isString2 = _interopRequireDefault(_isString);

var _isNumberObject = require('is-number-object');

var _isNumberObject2 = _interopRequireDefault(_isNumberObject);

var _isCallable = require('is-callable');

var _isCallable2 = _interopRequireDefault(_isCallable);

var _isBooleanObject = require('is-boolean-object');

var _isBooleanObject2 = _interopRequireDefault(_isBooleanObject);

var _objectInspect = require('object-inspect');

var _objectInspect2 = _interopRequireDefault(_objectInspect);

var _has = require('has');

var _has2 = _interopRequireDefault(_has);

var _RSTTraversal = require("./RSTTraversal");

var _getAdapter = require("./getAdapter");

var _getAdapter2 = _interopRequireDefault(_getAdapter);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    'default': obj
  };
}

var booleanValue = Function.bind.call(Function.call, Boolean.prototype.valueOf);

function typeName(node) {
  var adapter = (0, _getAdapter2['default'])();

  if (adapter.displayNameOfNode) {
    return (0, _getAdapter2['default'])().displayNameOfNode(node) || 'Component';
  }

  return typeof node.type === 'function' ? node.type.displayName || (0, _functionPrototype2['default'])(node.type) || 'Component' : node.type;
}

function spaces(n) {
  return Array(n + 1).join(' ');
}

function indent(depth, string) {
  return string.split('\n').map(function (x) {
    return '' + String(spaces(depth)) + String(x);
  }).join('\n');
}

function propString(prop, options) {
  if ((0, _isString2['default'])(prop)) {
    return (0, _objectInspect2['default'])(String(prop), {
      quoteStyle: 'double'
    });
  }

  if ((0, _isNumberObject2['default'])(prop)) {
    return '{' + String((0, _objectInspect2['default'])(Number(prop))) + '}';
  }

  if ((0, _isBooleanObject2['default'])(prop)) {
    return '{' + String((0, _objectInspect2['default'])(booleanValue(prop))) + '}';
  }

  if ((0, _isCallable2['default'])(prop)) {
    return '{' + String((0, _objectInspect2['default'])(prop)) + '}';
  }

  if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
    if (options.verbose) {
      return '{' + String((0, _objectInspect2['default'])(prop)) + '}';
    }

    return '{{...}}';
  }

  return '{[' + (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) + ']}';
}

function propsString(node, options) {
  var props = (0, _RSTTraversal.propsOfNode)(node);
  var keys = Object.keys(props).filter(function (x) {
    return x !== 'children';
  });
  return keys.map(function (key) {
    return String(key) + '=' + String(propString(props[key], options));
  }).join(' ');
}

function indentChildren(childrenStrs, indentLength) {
  return childrenStrs.length ? '\n' + String(childrenStrs.map(function (x) {
    return indent(indentLength, x);
  }).join('\n')) + '\n' : '';
}

function isRSTNodeLike(node) {
  return (0, _has2['default'])(node, 'nodeType') && typeof node.nodeType === 'string' && (0, _has2['default'])(node, 'type') && (0, _has2['default'])(node, 'key') && (0, _has2['default'])(node, 'ref') && (0, _has2['default'])(node, 'instance') && (0, _has2['default'])(node, 'rendered');
}

function debugNode(node) {
  var indentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (typeof node === 'string' || typeof node === 'number') return (0, _lodash2['default'])(node);

  if (typeof node === 'function') {
    var name = (0, _functionPrototype2['default'])(node);
    return '[function' + (name ? ' ' + String(name) : '') + ']';
  }

  if (!node) return '';
  var adapter = (0, _getAdapter2['default'])();

  if (!adapter.isValidElement(node) && !isRSTNodeLike(node)) {
    return '{' + String((0, _objectInspect2['default'])(node)) + '}';
  }

  var childrenStrs = (0, _RSTTraversal.childrenOfNode)(node).map(function (n) {
    return debugNode(n, indentLength, options);
  }).filter(Boolean);
  var type = typeName(node);
  var props = options.ignoreProps ? '' : propsString(node, options);
  var beforeProps = props ? ' ' : '';
  var afterProps = childrenStrs.length ? '>' : ' ';
  var childrenIndented = indentChildren(childrenStrs, indentLength);
  var nodeClose = childrenStrs.length ? '</' + String(type) + '>' : '/>';
  return '<' + String(type) + beforeProps + String(props) + afterProps + String(childrenIndented) + nodeClose;
}

function debugNodes(nodes) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return nodes.map(function (node) {
    return debugNode(node, undefined, options);
  }).join('\n\n\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EZWJ1Zy5qcyJdLCJuYW1lcyI6WyJib29sZWFuVmFsdWUiLCJGdW5jdGlvbiIsIkJvb2xlYW4iLCJ0eXBlTmFtZSIsImFkYXB0ZXIiLCJub2RlIiwic3BhY2VzIiwiQXJyYXkiLCJuIiwiaW5kZW50IiwiU3RyaW5nIiwicXVvdGVTdHlsZSIsIk51bWJlciIsIm9wdGlvbnMiLCJwcm9wcyIsImtleXMiLCJ4IiwicHJvcFN0cmluZyIsImNoaWxkcmVuU3RycyIsImRlYnVnTm9kZSIsImluZGVudExlbmd0aCIsIm5hbWUiLCJpc1JTVE5vZGVMaWtlIiwidHlwZSIsInByb3BzU3RyaW5nIiwiYmVmb3JlUHJvcHMiLCJhZnRlclByb3BzIiwiY2hpbGRyZW5JbmRlbnRlZCIsImluZGVudENoaWxkcmVuIiwibm9kZUNsb3NlIiwiZGVidWdOb2RlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O1FBaUJnQkcsUSxHQUFBQSxRO1FBVUFHLE0sR0FBQUEsTTtRQUlBRyxNLEdBQUFBLE07UUFpREFVLFMsR0FBQUEsUztRQTRCQVcsVSxHQUFBQSxVOztBQTVHaEIsSUFBQSxPQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQTs7OztBQUNBLElBQUEsa0JBQUEsR0FBQSxPQUFBLENBQUEseUJBQUEsQ0FBQTs7OztBQUNBLElBQUEsU0FBQSxHQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUE7Ozs7QUFDQSxJQUFBLGVBQUEsR0FBQSxPQUFBLENBQUEsa0JBQUEsQ0FBQTs7OztBQUNBLElBQUEsV0FBQSxHQUFBLE9BQUEsQ0FBQSxhQUFBLENBQUE7Ozs7QUFDQSxJQUFBLGdCQUFBLEdBQUEsT0FBQSxDQUFBLG1CQUFBLENBQUE7Ozs7QUFDQSxJQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQTs7OztBQUNBLElBQUEsSUFBQSxHQUFBLE9BQUEsQ0FBQSxLQUFBLENBQUE7Ozs7QUFFQSxJQUFBLGFBQUEsR0FBQSxPQUFBLGtCQUFBOztBQUlBLElBQUEsV0FB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Q0EsU0FBQSxNQUFBLE1BQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxXQUFBLEdBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLFVBQUEsR0FBQSxNQUFBLENBQUEsZ0JBQUEsQ0FBQSxHQUFBLFNBQUE7QUFDRDs7QUFFTSxTQUFBLFVBQUEsQ0FBQSxLQUFBLEVBQXlDO0FBQUEsTUFBZEwsT0FBYyxHQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFKLEVBQUk7QUFDOUMsU0FBTyxLQUFBLENBQUEsR0FBQSxDQUFVLFVBQUEsSUFBQSxFQUFBO0FBQUEsV0FBVU0sU0FBQUEsQ0FBQUEsSUFBQUEsRUFBQUEsU0FBQUEsRUFBVixPQUFVQSxDQUFWO0FBQVYsR0FBQSxFQUFBLElBQUEsQ0FBUCxRQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlc2NhcGUgZnJvbSAnbG9kYXNoLmVzY2FwZSc7XG5pbXBvcnQgZnVuY3Rpb25OYW1lIGZyb20gJ2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICdpcy1zdHJpbmcnO1xuaW1wb3J0IGlzTnVtYmVyIGZyb20gJ2lzLW51bWJlci1vYmplY3QnO1xuaW1wb3J0IGlzQ2FsbGFibGUgZnJvbSAnaXMtY2FsbGFibGUnO1xuaW1wb3J0IGlzQm9vbGVhbiBmcm9tICdpcy1ib29sZWFuLW9iamVjdCc7XG5pbXBvcnQgaW5zcGVjdCBmcm9tICdvYmplY3QtaW5zcGVjdCc7XG5pbXBvcnQgaGFzIGZyb20gJ2hhcyc7XG5cbmltcG9ydCB7XG4gIHByb3BzT2ZOb2RlLFxuICBjaGlsZHJlbk9mTm9kZSxcbn0gZnJvbSAnLi9SU1RUcmF2ZXJzYWwnO1xuaW1wb3J0IGdldEFkYXB0ZXIgZnJvbSAnLi9nZXRBZGFwdGVyJztcblxuY29uc3QgYm9vbGVhblZhbHVlID0gRnVuY3Rpb24uYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YpO1xuXG5leHBvcnQgZnVuY3Rpb24gdHlwZU5hbWUobm9kZSkge1xuICBjb25zdCBhZGFwdGVyID0gZ2V0QWRhcHRlcigpO1xuICBpZiAoYWRhcHRlci5kaXNwbGF5TmFtZU9mTm9kZSkge1xuICAgIHJldHVybiBnZXRBZGFwdGVyKCkuZGlzcGxheU5hbWVPZk5vZGUobm9kZSkgfHwgJ0NvbXBvbmVudCc7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBub2RlLnR5cGUgPT09ICdmdW5jdGlvbidcbiAgICA/IChub2RlLnR5cGUuZGlzcGxheU5hbWUgfHwgZnVuY3Rpb25OYW1lKG5vZGUudHlwZSkgfHwgJ0NvbXBvbmVudCcpXG4gICAgOiBub2RlLnR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGFjZXMobikge1xuICByZXR1cm4gQXJyYXkobiArIDEpLmpvaW4oJyAnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluZGVudChkZXB0aCwgc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJ1xcbicpLm1hcCgoeCkgPT4gYCR7c3BhY2VzKGRlcHRoKX0ke3h9YCkuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIHByb3BTdHJpbmcocHJvcCwgb3B0aW9ucykge1xuICBpZiAoaXNTdHJpbmcocHJvcCkpIHtcbiAgICByZXR1cm4gaW5zcGVjdChTdHJpbmcocHJvcCksIHsgcXVvdGVTdHlsZTogJ2RvdWJsZScgfSk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyKHByb3ApKSB7XG4gICAgcmV0dXJuIGB7JHtpbnNwZWN0KE51bWJlcihwcm9wKSl9fWA7XG4gIH1cbiAgaWYgKGlzQm9vbGVhbihwcm9wKSkge1xuICAgIHJldHVybiBgeyR7aW5zcGVjdChib29sZWFuVmFsdWUocHJvcCkpfX1gO1xuICB9XG4gIGlmIChpc0NhbGxhYmxlKHByb3ApKSB7XG4gICAgcmV0dXJuIGB7JHtpbnNwZWN0KHByb3ApfX1gO1xuICB9XG4gIGlmICh0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAob3B0aW9ucy52ZXJib3NlKSB7XG4gICAgICByZXR1cm4gYHske2luc3BlY3QocHJvcCl9fWA7XG4gICAgfVxuXG4gICAgcmV0dXJuICd7ey4uLn19JztcbiAgfVxuICByZXR1cm4gYHtbJHt0eXBlb2YgcHJvcH1dfWA7XG59XG5cbmZ1bmN0aW9uIHByb3BzU3RyaW5nKG5vZGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgcHJvcHMgPSBwcm9wc09mTm9kZShub2RlKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKS5maWx0ZXIoKHgpID0+IHggIT09ICdjaGlsZHJlbicpO1xuICByZXR1cm4ga2V5cy5tYXAoKGtleSkgPT4gYCR7a2V5fT0ke3Byb3BTdHJpbmcocHJvcHNba2V5XSwgb3B0aW9ucyl9YCkuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiBpbmRlbnRDaGlsZHJlbihjaGlsZHJlblN0cnMsIGluZGVudExlbmd0aCkge1xuICByZXR1cm4gY2hpbGRyZW5TdHJzLmxlbmd0aFxuICAgID8gYFxcbiR7Y2hpbGRyZW5TdHJzLm1hcCgoeCkgPT4gaW5kZW50KGluZGVudExlbmd0aCwgeCkpLmpvaW4oJ1xcbicpfVxcbmBcbiAgICA6ICcnO1xufVxuXG5mdW5jdGlvbiBpc1JTVE5vZGVMaWtlKG5vZGUpIHtcbiAgcmV0dXJuIGhhcyhub2RlLCAnbm9kZVR5cGUnKVxuICAgICYmIHR5cGVvZiBub2RlLm5vZGVUeXBlID09PSAnc3RyaW5nJ1xuICAgICYmIGhhcyhub2RlLCAndHlwZScpXG4gICAgJiYgaGFzKG5vZGUsICdrZXknKVxuICAgICYmIGhhcyhub2RlLCAncmVmJylcbiAgICAmJiBoYXMobm9kZSwgJ2luc3RhbmNlJylcbiAgICAmJiBoYXMobm9kZSwgJ3JlbmRlcmVkJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z05vZGUobm9kZSwgaW5kZW50TGVuZ3RoID0gMiwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSByZXR1cm4gZXNjYXBlKG5vZGUpO1xuICBpZiAodHlwZW9mIG5vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBuYW1lID0gZnVuY3Rpb25OYW1lKG5vZGUpO1xuICAgIHJldHVybiBgW2Z1bmN0aW9uJHtuYW1lID8gYCAke25hbWV9YCA6ICcnfV1gO1xuICB9XG4gIGlmICghbm9kZSkgcmV0dXJuICcnO1xuXG4gIGNvbnN0IGFkYXB0ZXIgPSBnZXRBZGFwdGVyKCk7XG4gIGlmICghYWRhcHRlci5pc1ZhbGlkRWxlbWVudChub2RlKSAmJiAhaXNSU1ROb2RlTGlrZShub2RlKSkge1xuICAgIHJldHVybiBgeyR7aW5zcGVjdChub2RlKX19YDtcbiAgfVxuXG4gIGNvbnN0IGNoaWxkcmVuU3RycyA9IGNoaWxkcmVuT2ZOb2RlKG5vZGUpXG4gICAgLm1hcCgobikgPT4gZGVidWdOb2RlKG4sIGluZGVudExlbmd0aCwgb3B0aW9ucykpXG4gICAgLmZpbHRlcihCb29sZWFuKTtcbiAgY29uc3QgdHlwZSA9IHR5cGVOYW1lKG5vZGUpO1xuXG4gIGNvbnN0IHByb3BzID0gb3B0aW9ucy5pZ25vcmVQcm9wcyA/ICcnIDogcHJvcHNTdHJpbmcobm9kZSwgb3B0aW9ucyk7XG4gIGNvbnN0IGJlZm9yZVByb3BzID0gcHJvcHMgPyAnICcgOiAnJztcbiAgY29uc3QgYWZ0ZXJQcm9wcyA9IGNoaWxkcmVuU3Rycy5sZW5ndGhcbiAgICA/ICc+J1xuICAgIDogJyAnO1xuICBjb25zdCBjaGlsZHJlbkluZGVudGVkID0gaW5kZW50Q2hpbGRyZW4oY2hpbGRyZW5TdHJzLCBpbmRlbnRMZW5ndGgpO1xuICBjb25zdCBub2RlQ2xvc2UgPSBjaGlsZHJlblN0cnMubGVuZ3RoID8gYDwvJHt0eXBlfT5gIDogJy8+JztcbiAgcmV0dXJuIGA8JHt0eXBlfSR7YmVmb3JlUHJvcHN9JHtwcm9wc30ke2FmdGVyUHJvcHN9JHtjaGlsZHJlbkluZGVudGVkfSR7bm9kZUNsb3NlfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z05vZGVzKG5vZGVzLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIG5vZGVzLm1hcCgobm9kZSkgPT4gZGVidWdOb2RlKG5vZGUsIHVuZGVmaW5lZCwgb3B0aW9ucykpLmpvaW4oJ1xcblxcblxcbicpO1xufVxuIl19