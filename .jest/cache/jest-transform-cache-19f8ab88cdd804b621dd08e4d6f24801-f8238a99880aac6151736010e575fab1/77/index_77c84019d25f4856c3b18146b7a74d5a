dde5fabcf83254fa5e287c0b9e879297
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addBusinessDays;

var _index = _interopRequireDefault(require("../isWeekend/index.js"));

var _index2 = _interopRequireDefault(require("../toDate/index.js"));

var _index3 = _interopRequireDefault(require("../_lib/toInteger/index.js"));

var _index4 = _interopRequireDefault(require("../_lib/requiredArgs/index.js"));

var _index5 = _interopRequireDefault(require("../isSunday/index.js"));

var _index6 = _interopRequireDefault(require("../isSaturday/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function addBusinessDays(dirtyDate, dirtyAmount) {
  (0, _index4.default)(2, arguments);
  var date = (0, _index2.default)(dirtyDate);
  var startedOnWeekend = (0, _index.default)(date);
  var amount = (0, _index3.default)(dirtyAmount);
  if (isNaN(amount)) return new Date(NaN);
  var hours = date.getHours();
  var sign = amount < 0 ? -1 : 1;
  var fullWeeks = (0, _index3.default)(amount / 5);
  date.setDate(date.getDate() + fullWeeks * 7);
  var restDays = Math.abs(amount % 5);

  while (restDays > 0) {
    date.setDate(date.getDate() + sign);
    if (!(0, _index.default)(date)) restDays -= 1;
  }

  if (startedOnWeekend && (0, _index.default)(date) && amount !== 0) {
    if ((0, _index6.default)(date)) date.setDate(date.getDate() + (sign < 0 ? 2 : -1));
    if ((0, _index5.default)(date)) date.setDate(date.getDate() + (sign < 0 ? 1 : -2));
  }

  date.setHours(hours);
  return date;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImFkZEJ1c2luZXNzRGF5cyIsIl9pbmRleCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsIl9pbmRleDYiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGlydHlEYXRlIiwiZGlydHlBbW91bnQiLCJhcmd1bWVudHMiLCJkYXRlIiwic3RhcnRlZE9uV2Vla2VuZCIsImFtb3VudCIsImlzTmFOIiwiRGF0ZSIsIk5hTiIsImhvdXJzIiwiZ2V0SG91cnMiLCJzaWduIiwiZnVsbFdlZWtzIiwic2V0RGF0ZSIsImdldERhdGUiLCJyZXN0RGF5cyIsIk1hdGgiLCJhYnMiLCJzZXRIb3VycyIsIm1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLGVBQWxCOztBQUVBLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8seUJBQVIsQ0FBbkM7O0FBRUEsSUFBSUMsT0FBTyxHQUFHRixzQkFBc0IsQ0FBQ0MsT0FBTyxzQkFBUixDQUFwQzs7QUFFQSxJQUFJRSxPQUFPLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLDhCQUFSLENBQXBDOztBQUVBLElBQUlHLE9BQU8sR0FBR0osc0JBQXNCLENBQUNDLE9BQU8saUNBQVIsQ0FBcEM7O0FBRUEsSUFBSUksT0FBTyxHQUFHTCxzQkFBc0IsQ0FBQ0MsT0FBTyx3QkFBUixDQUFwQzs7QUFFQSxJQUFJSyxPQUFPLEdBQUdOLHNCQUFzQixDQUFDQyxPQUFPLDBCQUFSLENBQXBDOztBQUVBLFNBQVNELHNCQUFULENBQWdDTyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFVixJQUFBQSxPQUFPLEVBQUVVO0FBQVgsR0FBckM7QUFBd0Q7O0FBb0IvRixTQUFTVCxlQUFULENBQXlCVyxTQUF6QixFQUFvQ0MsV0FBcEMsRUFBaUQ7QUFDL0MsR0FBQyxHQUFHTixPQUFPLENBQUNQLE9BQVosRUFBcUIsQ0FBckIsRUFBd0JjLFNBQXhCO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLENBQUMsR0FBR1YsT0FBTyxDQUFDTCxPQUFaLEVBQXFCWSxTQUFyQixDQUFYO0FBQ0EsTUFBSUksZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHZCxNQUFNLENBQUNGLE9BQVgsRUFBb0JlLElBQXBCLENBQXZCO0FBQ0EsTUFBSUUsTUFBTSxHQUFHLENBQUMsR0FBR1gsT0FBTyxDQUFDTixPQUFaLEVBQXFCYSxXQUFyQixDQUFiO0FBQ0EsTUFBSUssS0FBSyxDQUFDRCxNQUFELENBQVQsRUFBbUIsT0FBTyxJQUFJRSxJQUFKLENBQVNDLEdBQVQsQ0FBUDtBQUNuQixNQUFJQyxLQUFLLEdBQUdOLElBQUksQ0FBQ08sUUFBTCxFQUFaO0FBQ0EsTUFBSUMsSUFBSSxHQUFHTixNQUFNLEdBQUcsQ0FBVCxHQUFhLENBQUMsQ0FBZCxHQUFrQixDQUE3QjtBQUNBLE1BQUlPLFNBQVMsR0FBRyxDQUFDLEdBQUdsQixPQUFPLENBQUNOLE9BQVosRUFBcUJpQixNQUFNLEdBQUcsQ0FBOUIsQ0FBaEI7QUFDQUYsRUFBQUEsSUFBSSxDQUFDVSxPQUFMLENBQWFWLElBQUksQ0FBQ1csT0FBTCxLQUFpQkYsU0FBUyxHQUFHLENBQTFDO0FBRUEsTUFBSUcsUUFBUSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1osTUFBTSxHQUFHLENBQWxCLENBQWY7O0FBRUEsU0FBT1UsUUFBUSxHQUFHLENBQWxCLEVBQXFCO0FBQ25CWixJQUFBQSxJQUFJLENBQUNVLE9BQUwsQ0FBYVYsSUFBSSxDQUFDVyxPQUFMLEtBQWlCSCxJQUE5QjtBQUNBLFFBQUksQ0FBQyxDQUFDLEdBQUdyQixNQUFNLENBQUNGLE9BQVgsRUFBb0JlLElBQXBCLENBQUwsRUFBZ0NZLFFBQVEsSUFBSSxDQUFaO0FBQ2pDOztBQUtELE1BQUlYLGdCQUFnQixJQUFJLENBQUMsR0FBR2QsTUFBTSxDQUFDRixPQUFYLEVBQW9CZSxJQUFwQixDQUFwQixJQUFpREUsTUFBTSxLQUFLLENBQWhFLEVBQW1FO0FBR2pFLFFBQUksQ0FBQyxHQUFHUixPQUFPLENBQUNULE9BQVosRUFBcUJlLElBQXJCLENBQUosRUFBZ0NBLElBQUksQ0FBQ1UsT0FBTCxDQUFhVixJQUFJLENBQUNXLE9BQUwsTUFBa0JILElBQUksR0FBRyxDQUFQLEdBQVcsQ0FBWCxHQUFlLENBQUMsQ0FBbEMsQ0FBYjtBQUNoQyxRQUFJLENBQUMsR0FBR2YsT0FBTyxDQUFDUixPQUFaLEVBQXFCZSxJQUFyQixDQUFKLEVBQWdDQSxJQUFJLENBQUNVLE9BQUwsQ0FBYVYsSUFBSSxDQUFDVyxPQUFMLE1BQWtCSCxJQUFJLEdBQUcsQ0FBUCxHQUFXLENBQVgsR0FBZSxDQUFDLENBQWxDLENBQWI7QUFDakM7O0FBR0RSLEVBQUFBLElBQUksQ0FBQ2UsUUFBTCxDQUFjVCxLQUFkO0FBQ0EsU0FBT04sSUFBUDtBQUNEOztBQUVEZ0IsTUFBTSxDQUFDakMsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkQnVzaW5lc3NEYXlzO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaXNXZWVrZW5kL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaXNTdW5kYXkvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2lzU2F0dXJkYXkvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGFkZEJ1c2luZXNzRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgYnVzaW5lc3MgZGF5cyAobW9uIC0gZnJpKSB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBidXNpbmVzcyBkYXlzIChtb24gLSBmcmkpIHRvIHRoZSBnaXZlbiBkYXRlLCBpZ25vcmluZyB3ZWVrZW5kcy5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgYnVzaW5lc3MgZGF5cyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBidXNpbmVzcyBkYXlzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBidXNpbmVzcyBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiB2YXIgcmVzdWx0ID0gYWRkQnVzaW5lc3NEYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gTW9uIFNlcCAxNSAyMDE0IDAwOjAwOjAwIChza2lwcGVkIHdlZWtlbmQgZGF5cylcbiAqL1xuZnVuY3Rpb24gYWRkQnVzaW5lc3NEYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgKDAsIF9pbmRleDQuZGVmYXVsdCkoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4Mi5kZWZhdWx0KShkaXJ0eURhdGUpO1xuICB2YXIgc3RhcnRlZE9uV2Vla2VuZCA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZSk7XG4gIHZhciBhbW91bnQgPSAoMCwgX2luZGV4My5kZWZhdWx0KShkaXJ0eUFtb3VudCk7XG4gIGlmIChpc05hTihhbW91bnQpKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIGhvdXJzID0gZGF0ZS5nZXRIb3VycygpO1xuICB2YXIgc2lnbiA9IGFtb3VudCA8IDAgPyAtMSA6IDE7XG4gIHZhciBmdWxsV2Vla3MgPSAoMCwgX2luZGV4My5kZWZhdWx0KShhbW91bnQgLyA1KTtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgZnVsbFdlZWtzICogNyk7IC8vIEdldCByZW1haW5pbmcgZGF5cyBub3QgcGFydCBvZiBhIGZ1bGwgd2Vla1xuXG4gIHZhciByZXN0RGF5cyA9IE1hdGguYWJzKGFtb3VudCAlIDUpOyAvLyBMb29wcyBvdmVyIHJlbWFpbmluZyBkYXlzXG5cbiAgd2hpbGUgKHJlc3REYXlzID4gMCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHNpZ24pO1xuICAgIGlmICghKDAsIF9pbmRleC5kZWZhdWx0KShkYXRlKSkgcmVzdERheXMgLT0gMTtcbiAgfSAvLyBJZiB0aGUgZGF0ZSBpcyBhIHdlZWtlbmQgZGF5IGFuZCB3ZSByZWR1Y2UgYSBkaXZpZGFibGUgb2ZcbiAgLy8gNSBmcm9tIGl0LCB3ZSBsYW5kIG9uIGEgd2Vla2VuZCBkYXRlLlxuICAvLyBUbyBjb3VudGVyIHRoaXMsIHdlIGFkZCBkYXlzIGFjY29yZGluZ2x5IHRvIGxhbmQgb24gdGhlIG5leHQgYnVzaW5lc3MgZGF5XG5cblxuICBpZiAoc3RhcnRlZE9uV2Vla2VuZCAmJiAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUpICYmIGFtb3VudCAhPT0gMCkge1xuICAgIC8vIElmIHdlJ3JlIHJlZHVjaW5nIGRheXMsIHdlIHdhbnQgdG8gYWRkIGRheXMgdW50aWwgd2UgbGFuZCBvbiBhIHdlZWtkYXlcbiAgICAvLyBJZiB3ZSdyZSBhZGRpbmcgZGF5cyB3ZSB3YW50IHRvIHJlZHVjZSBkYXlzIHVudGlsIHdlIGxhbmQgb24gYSB3ZWVrZGF5XG4gICAgaWYgKCgwLCBfaW5kZXg2LmRlZmF1bHQpKGRhdGUpKSBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAoc2lnbiA8IDAgPyAyIDogLTEpKTtcbiAgICBpZiAoKDAsIF9pbmRleDUuZGVmYXVsdCkoZGF0ZSkpIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIChzaWduIDwgMCA/IDEgOiAtMikpO1xuICB9IC8vIFJlc3RvcmUgaG91cnMgdG8gYXZvaWQgRFNUIGxhZ1xuXG5cbiAgZGF0ZS5zZXRIb3Vycyhob3Vycyk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=