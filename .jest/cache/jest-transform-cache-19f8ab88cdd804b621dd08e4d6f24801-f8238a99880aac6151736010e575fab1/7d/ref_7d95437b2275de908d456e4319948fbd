8d6c2d9511405c271575d350e75aaac5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _isPlainObject = _interopRequireDefault(require("./helpers/isPlainObject"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var isPrototypeOf = Object.prototype.isPrototypeOf;

function isNewRef(prop) {
  if (!(0, _isPlainObject["default"])(prop)) {
    return false;
  }

  var ownProperties = Object.keys(prop);
  return ownProperties.length === 1 && ownProperties[0] === 'current';
}

function isCallbackRef(prop) {
  return typeof prop === 'function' && !isPrototypeOf.call(_react.Component, prop) && (!_react.PureComponent || !isPrototypeOf.call(_react.PureComponent, prop));
}

function requiredRef(props, propName, componentName) {
  var propValue = props[propName];

  if (isCallbackRef(propValue) || isNewRef(propValue)) {
    return null;
  }

  return new TypeError("".concat(propName, " in ").concat(componentName, " must be a ref"));
}

function ref(props, propName, componentName) {
  var propValue = props[propName];

  if (propValue == null) {
    return null;
  }

  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  return requiredRef.apply(void 0, [props, propName, componentName].concat(rest));
}

ref.isRequired = requiredRef;

var _default = function _default() {
  return (0, _wrapValidator["default"])(ref, 'ref');
};

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWYuanMiXSwibmFtZXMiOlsiaXNQcm90b3R5cGVPZiIsIk9iamVjdCIsInByb3RvdHlwZSIsIm93blByb3BlcnRpZXMiLCJDb21wb25lbnQiLCJQdXJlQ29tcG9uZW50IiwicHJvcFZhbHVlIiwicHJvcHMiLCJpc0NhbGxiYWNrUmVmIiwiaXNOZXdSZWYiLCJyZXN0IiwicmVxdWlyZWRSZWYiLCJyZWYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOzs7Ozs7OztJQUVRQSxhLEdBQWtCQyxNQUFNLENBQUNDLFNBQVBELENBQWxCRCxhOztBQUVSLFNBQUEsUUFBQSxDQUFBLElBQUEsRUFBd0I7QUFDdEIsTUFBSSxDQUFDLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUwsSUFBSyxDQUFMLEVBQTBCO0FBQ3hCLFdBQUEsS0FBQTtBQUNEOztBQUNELE1BQU1HLGFBQWEsR0FBR0YsTUFBTSxDQUFOQSxJQUFBQSxDQUF0QixJQUFzQkEsQ0FBdEI7QUFDQSxTQUFPRSxhQUFhLENBQWJBLE1BQUFBLEtBQUFBLENBQUFBLElBQThCQSxhQUFhLENBQWJBLENBQWEsQ0FBYkEsS0FBckMsU0FBQTtBQUNEOztBQUVELFNBQUEsYUFBQSxDQUFBLElBQUEsRUFBNkI7QUFDM0IsU0FBTyxPQUFBLElBQUEsS0FBQSxVQUFBLElBQ0YsQ0FBQ0gsYUFBYSxDQUFiQSxJQUFBQSxDQUFtQkksTUFBQUEsQ0FBbkJKLFNBQUFBLEVBREMsSUFDREEsQ0FEQyxLQUVELENBQUNLLE1BQUFBLENBQUQsYUFBQSxJQUFrQixDQUFDTCxhQUFhLENBQWJBLElBQUFBLENBQW1CSyxNQUFBQSxDQUFuQkwsYUFBQUEsRUFGekIsSUFFeUJBLENBRmxCLENBQVA7QUFHRDs7QUFFRCxTQUFBLFdBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBcUQ7QUFDbkQsTUFBTU0sU0FBUyxHQUFHQyxLQUFLLENBQXZCLFFBQXVCLENBQXZCOztBQUVBLE1BQUlDLGFBQWEsQ0FBYkEsU0FBYSxDQUFiQSxJQUE0QkMsUUFBUSxDQUF4QyxTQUF3QyxDQUF4QyxFQUFxRDtBQUNuRCxXQUFBLElBQUE7QUFDRDs7QUFFRCxTQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLFFBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxDQUFBLGFBQUEsRUFBUCxnQkFBTyxDQUFBLENBQVA7QUFDRDs7QUFFRCxTQUFBLEdBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBc0Q7QUFDcEQsTUFBTUgsU0FBUyxHQUFHQyxLQUFLLENBQXZCLFFBQXVCLENBQXZCOztBQUVBLE1BQUlELFNBQVMsSUFBYixJQUFBLEVBQXVCO0FBQ3JCLFdBQUEsSUFBQTtBQUNEOztBQUxtRCxPQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5JLElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLElBQUFBLElBQU0sQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxJQUFBLENBQU5BO0FBQU07O0FBT3BELFNBQU9DLFdBQVcsQ0FBWEEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBQ0Q7O0FBRURDLEdBQUcsQ0FBSEEsVUFBQUEsR0FBQUEsV0FBQUE7O2VBRWUsU0FBQSxRQUFBLEdBQUE7QUFBQSxTQUFNLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsR0FBQSxFQUFOLEtBQU0sQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgUHVyZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJy4vaGVscGVycy9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuY29uc3QgeyBpc1Byb3RvdHlwZU9mIH0gPSBPYmplY3QucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBpc05ld1JlZihwcm9wKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdChwcm9wKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBvd25Qcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMocHJvcCk7XG4gIHJldHVybiBvd25Qcm9wZXJ0aWVzLmxlbmd0aCA9PT0gMSAmJiBvd25Qcm9wZXJ0aWVzWzBdID09PSAnY3VycmVudCc7XG59XG5cbmZ1bmN0aW9uIGlzQ2FsbGJhY2tSZWYocHJvcCkge1xuICByZXR1cm4gdHlwZW9mIHByb3AgPT09ICdmdW5jdGlvbidcbiAgICAmJiAhaXNQcm90b3R5cGVPZi5jYWxsKENvbXBvbmVudCwgcHJvcClcbiAgICAmJiAoIVB1cmVDb21wb25lbnQgfHwgIWlzUHJvdG90eXBlT2YuY2FsbChQdXJlQ29tcG9uZW50LCBwcm9wKSk7XG59XG5cbmZ1bmN0aW9uIHJlcXVpcmVkUmVmKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG5cbiAgaWYgKGlzQ2FsbGJhY2tSZWYocHJvcFZhbHVlKSB8fCBpc05ld1JlZihwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtwcm9wTmFtZX0gaW4gJHtjb21wb25lbnROYW1lfSBtdXN0IGJlIGEgcmVmYCk7XG59XG5cbmZ1bmN0aW9uIHJlZihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuXG4gIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHJlcXVpcmVkUmVmKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG59XG5cbnJlZi5pc1JlcXVpcmVkID0gcmVxdWlyZWRSZWY7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHdyYXBWYWxpZGF0b3IocmVmLCAncmVmJyk7XG4iXX0=