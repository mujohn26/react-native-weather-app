{"version":3,"sources":["../src/Location.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\nimport { PermissionStatus } from 'unimodules-permissions-interface';\n\nimport ExpoLocation from './ExpoLocation';\nimport {\n  LocationAccuracy,\n  LocationCallback,\n  LocationGeocodedAddress,\n  LocationGeocodedLocation,\n  LocationHeadingCallback,\n  LocationHeadingObject,\n  LocationLastKnownOptions,\n  LocationObject,\n  LocationOptions,\n  LocationPermissionResponse,\n  LocationProviderStatus,\n  LocationRegion,\n  LocationSubscription,\n  LocationTaskOptions,\n  LocationActivityType,\n  LocationGeofencingEventType,\n  LocationGeofencingRegionState,\n  LocationGeocodingOptions,\n} from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nimport {\n  setGoogleApiKey,\n  googleGeocodeAsync,\n  googleReverseGeocodeAsync,\n} from './LocationGoogleGeocoding';\nimport { LocationSubscriber, HeadingSubscriber, _getCurrentWatchId } from './LocationSubscribers';\n\nexport async function getProviderStatusAsync(): Promise<LocationProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\n/**\n * Requests for one-time delivery of the user's current location.\n * Depending on given `accuracy` option it may take some time to resolve,\n * especially when you're inside a building.\n */\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationObject> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\n/**\n * Gets the last known position of the device or `null` if it's not available\n * or doesn't match given requirements such as maximum age or required accuracy.\n * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current location.\n */\nexport async function getLastKnownPositionAsync(\n  options: LocationLastKnownOptions = {}\n): Promise<LocationObject | null> {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\n\n/**\n * Starts watching for location changes.\n * Given callback will be called once the new location is available.\n */\nexport async function watchPositionAsync(options: LocationOptions, callback: LocationCallback) {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n/**\n * Resolves to an object with current heading details.\n * To simplify, it calls `watchHeadingAsync` and waits for a couple of updates\n * and returns the one that is accurate enough.\n */\nexport async function getHeadingAsync(): Promise<LocationHeadingObject> {\n  return new Promise<LocationHeadingObject>(async resolve => {\n    let tries = 0;\n\n    const subscription = await watchHeadingAsync(heading => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\n\n/**\n * Starts watching for heading changes.\n * Given callback will be called once the new heading is available.\n */\nexport async function watchHeadingAsync(\n  callback: LocationHeadingCallback\n): Promise<LocationSubscription> {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n/**\n * Geocodes given address to an array of latitude-longitude coordinates.\n */\nexport async function geocodeAsync(\n  address: string,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedLocation[]> {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleGeocodeAsync(address);\n  }\n  return await ExpoLocation.geocodeAsync(address);\n}\n\n/**\n * The opposite behavior of `geocodeAsync` â€” translates location coordinates to an array of addresses.\n */\nexport async function reverseGeocodeAsync(\n  location: Pick<LocationGeocodedLocation, 'latitude' | 'longitude'>,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedAddress[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleReverseGeocodeAsync(location);\n  }\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\n\n/**\n * Gets the current state of location permissions.\n */\nexport async function getPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.getPermissionsAsync();\n}\n\n/**\n * Requests the user to grant location permissions.\n */\nexport async function requestPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.requestPermissionsAsync();\n}\n\n// --- Location service\n\n/**\n * Returns `true` if the device has location services enabled or `false` otherwise.\n */\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n}\n\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: LocationRegion[]) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: LocationRegion[] = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\n/**\n * @deprecated\n * Deprecated as of SDK39 in favour of `setGoogleApiKey`.\n */\nexport function setApiKey(apiKey: string): void {\n  console.warn(\"Location's method `setApiKey` is deprecated in favor of `setGoogleApiKey`.\");\n  setGoogleApiKey(apiKey);\n}\n\n// For internal purposes\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\n\n// Export as namespaced types.\nexport {\n  LocationAccuracy as Accuracy,\n  LocationActivityType as ActivityType,\n  LocationGeofencingEventType as GeofencingEventType,\n  LocationGeofencingRegionState as GeofencingRegionState,\n  PermissionStatus,\n  setGoogleApiKey,\n};\n\nexport { installWebGeolocationPolyfill } from './GeolocationPolyfill';\nexport * from './Location.types';\n"],"sourceRoot":""}