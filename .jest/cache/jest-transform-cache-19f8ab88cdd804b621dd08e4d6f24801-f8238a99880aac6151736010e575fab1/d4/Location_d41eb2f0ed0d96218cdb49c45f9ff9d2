e85bde1f57c0f676b0bd00d4973a7fa5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  getProviderStatusAsync: true,
  enableNetworkProviderAsync: true,
  getCurrentPositionAsync: true,
  getLastKnownPositionAsync: true,
  watchPositionAsync: true,
  getHeadingAsync: true,
  watchHeadingAsync: true,
  geocodeAsync: true,
  reverseGeocodeAsync: true,
  getPermissionsAsync: true,
  requestPermissionsAsync: true,
  hasServicesEnabledAsync: true,
  isBackgroundLocationAvailableAsync: true,
  startLocationUpdatesAsync: true,
  stopLocationUpdatesAsync: true,
  hasStartedLocationUpdatesAsync: true,
  startGeofencingAsync: true,
  stopGeofencingAsync: true,
  hasStartedGeofencingAsync: true,
  setApiKey: true,
  PermissionStatus: true,
  Accuracy: true,
  ActivityType: true,
  GeofencingEventType: true,
  GeofencingRegionState: true,
  EventEmitter: true,
  setGoogleApiKey: true,
  _getCurrentWatchId: true,
  installWebGeolocationPolyfill: true
};
exports.getProviderStatusAsync = getProviderStatusAsync;
exports.enableNetworkProviderAsync = enableNetworkProviderAsync;
exports.getCurrentPositionAsync = getCurrentPositionAsync;
exports.getLastKnownPositionAsync = getLastKnownPositionAsync;
exports.watchPositionAsync = watchPositionAsync;
exports.getHeadingAsync = getHeadingAsync;
exports.watchHeadingAsync = watchHeadingAsync;
exports.geocodeAsync = geocodeAsync;
exports.reverseGeocodeAsync = reverseGeocodeAsync;
exports.getPermissionsAsync = getPermissionsAsync;
exports.requestPermissionsAsync = requestPermissionsAsync;
exports.hasServicesEnabledAsync = hasServicesEnabledAsync;
exports.isBackgroundLocationAvailableAsync = isBackgroundLocationAvailableAsync;
exports.startLocationUpdatesAsync = startLocationUpdatesAsync;
exports.stopLocationUpdatesAsync = stopLocationUpdatesAsync;
exports.hasStartedLocationUpdatesAsync = hasStartedLocationUpdatesAsync;
exports.startGeofencingAsync = startGeofencingAsync;
exports.stopGeofencingAsync = stopGeofencingAsync;
exports.hasStartedGeofencingAsync = hasStartedGeofencingAsync;
exports.setApiKey = setApiKey;
Object.defineProperty(exports, "PermissionStatus", {
  enumerable: true,
  get: function get() {
    return _unimodulesPermissionsInterface.PermissionStatus;
  }
});
Object.defineProperty(exports, "Accuracy", {
  enumerable: true,
  get: function get() {
    return _Location.LocationAccuracy;
  }
});
Object.defineProperty(exports, "ActivityType", {
  enumerable: true,
  get: function get() {
    return _Location.LocationActivityType;
  }
});
Object.defineProperty(exports, "GeofencingEventType", {
  enumerable: true,
  get: function get() {
    return _Location.LocationGeofencingEventType;
  }
});
Object.defineProperty(exports, "GeofencingRegionState", {
  enumerable: true,
  get: function get() {
    return _Location.LocationGeofencingRegionState;
  }
});
Object.defineProperty(exports, "EventEmitter", {
  enumerable: true,
  get: function get() {
    return _LocationEventEmitter.LocationEventEmitter;
  }
});
Object.defineProperty(exports, "setGoogleApiKey", {
  enumerable: true,
  get: function get() {
    return _LocationGoogleGeocoding.setGoogleApiKey;
  }
});
Object.defineProperty(exports, "_getCurrentWatchId", {
  enumerable: true,
  get: function get() {
    return _LocationSubscribers._getCurrentWatchId;
  }
});
Object.defineProperty(exports, "installWebGeolocationPolyfill", {
  enumerable: true,
  get: function get() {
    return _GeolocationPolyfill.installWebGeolocationPolyfill;
  }
});

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _core = require("@unimodules/core");

var _unimodulesPermissionsInterface = require("unimodules-permissions-interface");

var _ExpoLocation = _interopRequireDefault(require("./ExpoLocation"));

var _Location = require("./Location.types");

Object.keys(_Location).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Location[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _Location[key];
    }
  });
});

var _LocationEventEmitter = require("./LocationEventEmitter");

var _LocationGoogleGeocoding = require("./LocationGoogleGeocoding");

var _LocationSubscribers = require("./LocationSubscribers");

var _GeolocationPolyfill = require("./GeolocationPolyfill");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getProviderStatusAsync() {
  return _regenerator.default.async(function getProviderStatusAsync$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.abrupt("return", _ExpoLocation.default.getProviderStatusAsync());

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

function enableNetworkProviderAsync() {
  return _regenerator.default.async(function enableNetworkProviderAsync$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!(_core.Platform.OS === 'android')) {
            _context2.next = 2;
            break;
          }

          return _context2.abrupt("return", _ExpoLocation.default.enableNetworkProviderAsync());

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, null, null, null, Promise);
}

function getCurrentPositionAsync() {
  var options,
      _args3 = arguments;
  return _regenerator.default.async(function getCurrentPositionAsync$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
          return _context3.abrupt("return", _ExpoLocation.default.getCurrentPositionAsync(options));

        case 2:
        case "end":
          return _context3.stop();
      }
    }
  }, null, null, null, Promise);
}

function getLastKnownPositionAsync() {
  var options,
      _args4 = arguments;
  return _regenerator.default.async(function getLastKnownPositionAsync$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};
          return _context4.abrupt("return", _ExpoLocation.default.getLastKnownPositionAsync(options));

        case 2:
        case "end":
          return _context4.stop();
      }
    }
  }, null, null, null, Promise);
}

function watchPositionAsync(options, callback) {
  var watchId;
  return _regenerator.default.async(function watchPositionAsync$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          watchId = _LocationSubscribers.LocationSubscriber.registerCallback(callback);
          _context5.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.watchPositionImplAsync(watchId, options));

        case 3:
          return _context5.abrupt("return", {
            remove: function remove() {
              _LocationSubscribers.LocationSubscriber.unregisterCallback(watchId);
            }
          });

        case 4:
        case "end":
          return _context5.stop();
      }
    }
  }, null, null, null, Promise);
}

function getHeadingAsync() {
  return _regenerator.default.async(function getHeadingAsync$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          return _context7.abrupt("return", new Promise(function _callee(resolve) {
            var tries, subscription;
            return _regenerator.default.async(function _callee$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    tries = 0;
                    _context6.next = 3;
                    return _regenerator.default.awrap(watchHeadingAsync(function (heading) {
                      if (heading.accuracy > 1 || tries > 5) {
                        subscription.remove();
                        resolve(heading);
                      } else {
                        tries += 1;
                      }
                    }));

                  case 3:
                    subscription = _context6.sent;

                  case 4:
                  case "end":
                    return _context6.stop();
                }
              }
            }, null, null, null, Promise);
          }));

        case 1:
        case "end":
          return _context7.stop();
      }
    }
  }, null, null, null, Promise);
}

function watchHeadingAsync(callback) {
  var watchId;
  return _regenerator.default.async(function watchHeadingAsync$(_context8) {
    while (1) {
      switch (_context8.prev = _context8.next) {
        case 0:
          watchId = _LocationSubscribers.HeadingSubscriber.registerCallback(callback);
          _context8.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.watchDeviceHeading(watchId));

        case 3:
          return _context8.abrupt("return", {
            remove: function remove() {
              _LocationSubscribers.HeadingSubscriber.unregisterCallback(watchId);
            }
          });

        case 4:
        case "end":
          return _context8.stop();
      }
    }
  }, null, null, null, Promise);
}

function geocodeAsync(address, options) {
  return _regenerator.default.async(function geocodeAsync$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          if (!(typeof address !== 'string')) {
            _context9.next = 2;
            break;
          }

          throw new TypeError("Address to geocode must be a string. Got " + address + " instead.");

        case 2:
          if (!(options != null && options.useGoogleMaps || _core.Platform.OS === 'web')) {
            _context9.next = 6;
            break;
          }

          _context9.next = 5;
          return _regenerator.default.awrap((0, _LocationGoogleGeocoding.googleGeocodeAsync)(address));

        case 5:
          return _context9.abrupt("return", _context9.sent);

        case 6:
          _context9.next = 8;
          return _regenerator.default.awrap(_ExpoLocation.default.geocodeAsync(address));

        case 8:
          return _context9.abrupt("return", _context9.sent);

        case 9:
        case "end":
          return _context9.stop();
      }
    }
  }, null, null, null, Promise);
}

function reverseGeocodeAsync(location, options) {
  return _regenerator.default.async(function reverseGeocodeAsync$(_context10) {
    while (1) {
      switch (_context10.prev = _context10.next) {
        case 0:
          if (!(typeof location.latitude !== 'number' || typeof location.longitude !== 'number')) {
            _context10.next = 2;
            break;
          }

          throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');

        case 2:
          if (!(options != null && options.useGoogleMaps || _core.Platform.OS === 'web')) {
            _context10.next = 6;
            break;
          }

          _context10.next = 5;
          return _regenerator.default.awrap((0, _LocationGoogleGeocoding.googleReverseGeocodeAsync)(location));

        case 5:
          return _context10.abrupt("return", _context10.sent);

        case 6:
          _context10.next = 8;
          return _regenerator.default.awrap(_ExpoLocation.default.reverseGeocodeAsync(location));

        case 8:
          return _context10.abrupt("return", _context10.sent);

        case 9:
        case "end":
          return _context10.stop();
      }
    }
  }, null, null, null, Promise);
}

function getPermissionsAsync() {
  return _regenerator.default.async(function getPermissionsAsync$(_context11) {
    while (1) {
      switch (_context11.prev = _context11.next) {
        case 0:
          _context11.next = 2;
          return _regenerator.default.awrap(_ExpoLocation.default.getPermissionsAsync());

        case 2:
          return _context11.abrupt("return", _context11.sent);

        case 3:
        case "end":
          return _context11.stop();
      }
    }
  }, null, null, null, Promise);
}

function requestPermissionsAsync() {
  return _regenerator.default.async(function requestPermissionsAsync$(_context12) {
    while (1) {
      switch (_context12.prev = _context12.next) {
        case 0:
          _context12.next = 2;
          return _regenerator.default.awrap(_ExpoLocation.default.requestPermissionsAsync());

        case 2:
          return _context12.abrupt("return", _context12.sent);

        case 3:
        case "end":
          return _context12.stop();
      }
    }
  }, null, null, null, Promise);
}

function hasServicesEnabledAsync() {
  return _regenerator.default.async(function hasServicesEnabledAsync$(_context13) {
    while (1) {
      switch (_context13.prev = _context13.next) {
        case 0:
          _context13.next = 2;
          return _regenerator.default.awrap(_ExpoLocation.default.hasServicesEnabledAsync());

        case 2:
          return _context13.abrupt("return", _context13.sent);

        case 3:
        case "end":
          return _context13.stop();
      }
    }
  }, null, null, null, Promise);
}

function _validateTaskName(taskName) {
  if (!taskName || typeof taskName !== 'string') {
    throw new Error("`taskName` must be a non-empty string. Got " + taskName + " instead.");
  }
}

function isBackgroundLocationAvailableAsync() {
  var providerStatus;
  return _regenerator.default.async(function isBackgroundLocationAvailableAsync$(_context14) {
    while (1) {
      switch (_context14.prev = _context14.next) {
        case 0:
          _context14.next = 2;
          return _regenerator.default.awrap(getProviderStatusAsync());

        case 2:
          providerStatus = _context14.sent;
          return _context14.abrupt("return", providerStatus.backgroundModeEnabled);

        case 4:
        case "end":
          return _context14.stop();
      }
    }
  }, null, null, null, Promise);
}

function startLocationUpdatesAsync(taskName) {
  var options,
      _args15 = arguments;
  return _regenerator.default.async(function startLocationUpdatesAsync$(_context15) {
    while (1) {
      switch (_context15.prev = _context15.next) {
        case 0:
          options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {
            accuracy: _Location.LocationAccuracy.Balanced
          };

          _validateTaskName(taskName);

          _context15.next = 4;
          return _regenerator.default.awrap(_ExpoLocation.default.startLocationUpdatesAsync(taskName, options));

        case 4:
        case "end":
          return _context15.stop();
      }
    }
  }, null, null, null, Promise);
}

function stopLocationUpdatesAsync(taskName) {
  return _regenerator.default.async(function stopLocationUpdatesAsync$(_context16) {
    while (1) {
      switch (_context16.prev = _context16.next) {
        case 0:
          _validateTaskName(taskName);

          _context16.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.stopLocationUpdatesAsync(taskName));

        case 3:
        case "end":
          return _context16.stop();
      }
    }
  }, null, null, null, Promise);
}

function hasStartedLocationUpdatesAsync(taskName) {
  return _regenerator.default.async(function hasStartedLocationUpdatesAsync$(_context17) {
    while (1) {
      switch (_context17.prev = _context17.next) {
        case 0:
          _validateTaskName(taskName);

          return _context17.abrupt("return", _ExpoLocation.default.hasStartedLocationUpdatesAsync(taskName));

        case 2:
        case "end":
          return _context17.stop();
      }
    }
  }, null, null, null, Promise);
}

function _validateRegions(regions) {
  if (!regions || regions.length === 0) {
    throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');
  }

  for (var _iterator = _createForOfIteratorHelperLoose(regions), _step; !(_step = _iterator()).done;) {
    var region = _step.value;

    if (typeof region.latitude !== 'number') {
      throw new TypeError("Region's latitude must be a number. Got '" + region.latitude + "' instead.");
    }

    if (typeof region.longitude !== 'number') {
      throw new TypeError("Region's longitude must be a number. Got '" + region.longitude + "' instead.");
    }

    if (typeof region.radius !== 'number') {
      throw new TypeError("Region's radius must be a number. Got '" + region.radius + "' instead.");
    }
  }
}

function startGeofencingAsync(taskName) {
  var regions,
      _args18 = arguments;
  return _regenerator.default.async(function startGeofencingAsync$(_context18) {
    while (1) {
      switch (_context18.prev = _context18.next) {
        case 0:
          regions = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : [];

          _validateTaskName(taskName);

          _validateRegions(regions);

          _context18.next = 5;
          return _regenerator.default.awrap(_ExpoLocation.default.startGeofencingAsync(taskName, {
            regions: regions
          }));

        case 5:
        case "end":
          return _context18.stop();
      }
    }
  }, null, null, null, Promise);
}

function stopGeofencingAsync(taskName) {
  return _regenerator.default.async(function stopGeofencingAsync$(_context19) {
    while (1) {
      switch (_context19.prev = _context19.next) {
        case 0:
          _validateTaskName(taskName);

          _context19.next = 3;
          return _regenerator.default.awrap(_ExpoLocation.default.stopGeofencingAsync(taskName));

        case 3:
        case "end":
          return _context19.stop();
      }
    }
  }, null, null, null, Promise);
}

function hasStartedGeofencingAsync(taskName) {
  return _regenerator.default.async(function hasStartedGeofencingAsync$(_context20) {
    while (1) {
      switch (_context20.prev = _context20.next) {
        case 0:
          _validateTaskName(taskName);

          return _context20.abrupt("return", _ExpoLocation.default.hasStartedGeofencingAsync(taskName));

        case 2:
        case "end":
          return _context20.stop();
      }
    }
  }, null, null, null, Promise);
}

function setApiKey(apiKey) {
  console.warn("Location's method `setApiKey` is deprecated in favor of `setGoogleApiKey`.");
  (0, _LocationGoogleGeocoding.setGoogleApiKey)(apiKey);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,