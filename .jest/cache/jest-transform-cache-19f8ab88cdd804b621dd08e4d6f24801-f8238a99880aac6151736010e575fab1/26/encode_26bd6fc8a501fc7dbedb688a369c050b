27f5787f92ec9c13af3b2cecf3d181bd
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);
exports.XML = getInverse(inverseXML, xmlReplacer);
var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);
exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj) {
  return Object.keys(obj).sort().reduce(function (inverse, name) {
    inverse[obj[name]] = "&" + name + ";";
    return inverse;
  }, {});
}

function getInverseReplacer(inverse) {
  var single = [],
      multiple = [];
  Object.keys(inverse).forEach(function (k) {
    if (k.length === 1) {
      single.push("\\" + k);
    } else {
      multiple.push(k);
    }
  });
  multiple.unshift("[" + single.join("") + "]");
  return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c) {
  return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c) {
  var high = c.charCodeAt(0);
  var low = c.charCodeAt(1);
  var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
  return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re) {
  function func(name) {
    return inverse[name];
  }

  return function (data) {
    return data.replace(re, func).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
  };
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data) {
  return data.replace(re_xmlChars, singleCharReplacer).replace(re_astralSymbols, astralReplacer).replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kZS5qcyJdLCJuYW1lcyI6WyJpbnZlcnNlWE1MIiwiZ2V0SW52ZXJzZU9iaiIsInJlcXVpcmUiLCJ4bWxSZXBsYWNlciIsImdldEludmVyc2VSZXBsYWNlciIsImV4cG9ydHMiLCJYTUwiLCJnZXRJbnZlcnNlIiwiaW52ZXJzZUhUTUwiLCJodG1sUmVwbGFjZXIiLCJIVE1MIiwib2JqIiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJyZWR1Y2UiLCJpbnZlcnNlIiwibmFtZSIsInNpbmdsZSIsIm11bHRpcGxlIiwiZm9yRWFjaCIsImsiLCJsZW5ndGgiLCJwdXNoIiwidW5zaGlmdCIsImpvaW4iLCJSZWdFeHAiLCJyZV9ub25BU0NJSSIsInJlX2FzdHJhbFN5bWJvbHMiLCJzaW5nbGVDaGFyUmVwbGFjZXIiLCJjIiwiY2hhckNvZGVBdCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJhc3RyYWxSZXBsYWNlciIsImhpZ2giLCJsb3ciLCJjb2RlUG9pbnQiLCJyZSIsImZ1bmMiLCJkYXRhIiwicmVwbGFjZSIsInJlX3htbENoYXJzIiwiZXNjYXBlWE1MIiwiZXNjYXBlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFVLEdBQUdDLGFBQWEsQ0FBQ0MsT0FBTyxvQkFBUixDQUE5QjtBQUFBLElBQ0lDLFdBQVcsR0FBR0Msa0JBQWtCLENBQUNKLFVBQUQsQ0FEcEM7QUFHQUssT0FBTyxDQUFDQyxHQUFSLEdBQWNDLFVBQVUsQ0FBQ1AsVUFBRCxFQUFhRyxXQUFiLENBQXhCO0FBRUEsSUFBSUssV0FBVyxHQUFHUCxhQUFhLENBQUNDLE9BQU8seUJBQVIsQ0FBL0I7QUFBQSxJQUNJTyxZQUFZLEdBQUdMLGtCQUFrQixDQUFDSSxXQUFELENBRHJDO0FBR0FILE9BQU8sQ0FBQ0ssSUFBUixHQUFlSCxVQUFVLENBQUNDLFdBQUQsRUFBY0MsWUFBZCxDQUF6Qjs7QUFFQSxTQUFTUixhQUFULENBQXVCVSxHQUF2QixFQUE0QjtBQUN4QixTQUFPQyxNQUFNLENB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aXJlKFwiLi4vbWFwcy94bWwuanNvblwiKSksXG4gICAgeG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZVhNTCk7XG5cbmV4cG9ydHMuWE1MID0gZ2V0SW52ZXJzZShpbnZlcnNlWE1MLCB4bWxSZXBsYWNlcik7XG5cbnZhciBpbnZlcnNlSFRNTCA9IGdldEludmVyc2VPYmoocmVxdWlyZShcIi4uL21hcHMvZW50aXRpZXMuanNvblwiKSksXG4gICAgaHRtbFJlcGxhY2VyID0gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2VIVE1MKTtcblxuZXhwb3J0cy5IVE1MID0gZ2V0SW52ZXJzZShpbnZlcnNlSFRNTCwgaHRtbFJlcGxhY2VyKTtcblxuZnVuY3Rpb24gZ2V0SW52ZXJzZU9iaihvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKVxuICAgICAgICAuc29ydCgpXG4gICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24oaW52ZXJzZSwgbmFtZSkge1xuICAgICAgICAgICAgaW52ZXJzZVtvYmpbbmFtZV1dID0gXCImXCIgKyBuYW1lICsgXCI7XCI7XG4gICAgICAgICAgICByZXR1cm4gaW52ZXJzZTtcbiAgICAgICAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZSkge1xuICAgIHZhciBzaW5nbGUgPSBbXSxcbiAgICAgICAgbXVsdGlwbGUgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKGludmVyc2UpLmZvckVhY2goZnVuY3Rpb24oaykge1xuICAgICAgICBpZiAoay5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHNpbmdsZS5wdXNoKFwiXFxcXFwiICsgayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0aXBsZS5wdXNoKGspO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvL1RPRE8gYWRkIHJhbmdlc1xuICAgIG11bHRpcGxlLnVuc2hpZnQoXCJbXCIgKyBzaW5nbGUuam9pbihcIlwiKSArIFwiXVwiKTtcblxuICAgIHJldHVybiBuZXcgUmVnRXhwKG11bHRpcGxlLmpvaW4oXCJ8XCIpLCBcImdcIik7XG59XG5cbnZhciByZV9ub25BU0NJSSA9IC9bXlxcMC1cXHg3Rl0vZyxcbiAgICByZV9hc3RyYWxTeW1ib2xzID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZztcblxuZnVuY3Rpb24gc2luZ2xlQ2hhclJlcGxhY2VyKGMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBcIiYjeFwiICtcbiAgICAgICAgY1xuICAgICAgICAgICAgLmNoYXJDb2RlQXQoMClcbiAgICAgICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpICtcbiAgICAgICAgXCI7XCJcbiAgICApO1xufVxuXG5mdW5jdGlvbiBhc3RyYWxSZXBsYWNlcihjKSB7XG4gICAgLy8gaHR0cDovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcbiAgICB2YXIgaGlnaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgbG93ID0gYy5jaGFyQ29kZUF0KDEpO1xuICAgIHZhciBjb2RlUG9pbnQgPSAoaGlnaCAtIDB4ZDgwMCkgKiAweDQwMCArIGxvdyAtIDB4ZGMwMCArIDB4MTAwMDA7XG4gICAgcmV0dXJuIFwiJiN4XCIgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgKyBcIjtcIjtcbn1cblxuZnVuY3Rpb24gZ2V0SW52ZXJzZShpbnZlcnNlLCByZSkge1xuICAgIGZ1bmN0aW9uIGZ1bmMobmFtZSkge1xuICAgICAgICByZXR1cm4gaW52ZXJzZVtuYW1lXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgLnJlcGxhY2UocmUsIGZ1bmMpXG4gICAgICAgICAgICAucmVwbGFjZShyZV9hc3RyYWxTeW1ib2xzLCBhc3RyYWxSZXBsYWNlcilcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlX25vbkFTQ0lJLCBzaW5nbGVDaGFyUmVwbGFjZXIpO1xuICAgIH07XG59XG5cbnZhciByZV94bWxDaGFycyA9IGdldEludmVyc2VSZXBsYWNlcihpbnZlcnNlWE1MKTtcblxuZnVuY3Rpb24gZXNjYXBlWE1MKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YVxuICAgICAgICAucmVwbGFjZShyZV94bWxDaGFycywgc2luZ2xlQ2hhclJlcGxhY2VyKVxuICAgICAgICAucmVwbGFjZShyZV9hc3RyYWxTeW1ib2xzLCBhc3RyYWxSZXBsYWNlcilcbiAgICAgICAgLnJlcGxhY2UocmVfbm9uQVNDSUksIHNpbmdsZUNoYXJSZXBsYWNlcik7XG59XG5cbmV4cG9ydHMuZXNjYXBlID0gZXNjYXBlWE1MO1xuIl19