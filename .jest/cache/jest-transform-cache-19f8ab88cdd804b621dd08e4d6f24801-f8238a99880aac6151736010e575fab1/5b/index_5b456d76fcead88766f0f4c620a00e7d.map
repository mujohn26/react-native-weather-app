{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","closestTo","_index","_interopRequireDefault","require","_index2","obj","__esModule","dirtyDateToCompare","dirtyDatesArray","arguments","dateToCompare","isNaN","Date","NaN","timeToCompare","getTime","datesArray","forEach","Array","prototype","slice","call","result","minDistance","dirtyDate","currentDate","distance","Math","abs","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,sBAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,iCAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AA+B/F,SAASL,SAAT,CAAmBO,kBAAnB,EAAuCC,eAAvC,EAAwD;AACtD,GAAC,GAAGJ,OAAO,CAACL,OAAZ,EAAqB,CAArB,EAAwBU,SAAxB;AACA,MAAIC,aAAa,GAAG,CAAC,GAAGT,MAAM,CAACF,OAAX,EAAoBQ,kBAApB,CAApB;;AAEA,MAAII,KAAK,CAACD,aAAD,CAAT,EAA0B;AACxB,WAAO,IAAIE,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIC,aAAa,GAAGJ,aAAa,CAACK,OAAd,EAApB;AACA,MAAIC,UAAJ;;AAEA,MAAIR,eAAe,IAAI,IAAvB,EAA6B;AAC3BQ,IAAAA,UAAU,GAAG,EAAb;AACD,GAFD,MAEO,IAAI,OAAOR,eAAe,CAACS,OAAvB,KAAmC,UAAvC,EAAmD;AACxDD,IAAAA,UAAU,GAAGR,eAAb;AACD,GAFM,MAEA;AACLQ,IAAAA,UAAU,GAAGE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2Bb,eAA3B,CAAb;AACD;;AAED,MAAIc,MAAJ;AACA,MAAIC,WAAJ;AACAP,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUO,SAAV,EAAqB;AACtC,QAAIC,WAAW,GAAG,CAAC,GAAGxB,MAAM,CAACF,OAAX,EAAoByB,SAApB,CAAlB;;AAEA,QAAIb,KAAK,CAACc,WAAD,CAAT,EAAwB;AACtBH,MAAAA,MAAM,GAAG,IAAIV,IAAJ,CAASC,GAAT,CAAT;AACAU,MAAAA,WAAW,GAAGV,GAAd;AACA;AACD;;AAED,QAAIa,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASd,aAAa,GAAGW,WAAW,CAACV,OAAZ,EAAzB,CAAf;;AAEA,QAAIO,MAAM,IAAI,IAAV,IAAkBI,QAAQ,GAAGH,WAAjC,EAA8C;AAC5CD,MAAAA,MAAM,GAAGG,WAAT;AACAF,MAAAA,WAAW,GAAGG,QAAd;AACD;AACF,GAfD;AAgBA,SAAOJ,MAAP;AACD;;AAEDO,MAAM,CAAChC,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = closestTo;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name closestTo\n * @category Common Helpers\n * @summary Return a date from the array closest to the given date.\n *\n * @description\n * Return a date from the array closest to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Date} the date from the array closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?\n * var dateToCompare = new Date(2015, 8, 6)\n * var result = closestTo(dateToCompare, [\n *   new Date(2000, 0, 1),\n *   new Date(2030, 0, 1)\n * ])\n * //=> Tue Jan 01 2030 00:00:00\n */\nfunction closestTo(dirtyDateToCompare, dirtyDatesArray) {\n  (0, _index2.default)(2, arguments);\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return new Date(NaN);\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = (0, _index.default)(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = new Date(NaN);\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = currentDate;\n      minDistance = distance;\n    }\n  });\n  return result;\n}\n\nmodule.exports = exports.default;"]}