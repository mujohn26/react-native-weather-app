67198b7b01ecddf2732278deaa555762
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getWeekOfMonth;

var _index = _interopRequireDefault(require("../getDate/index.js"));

var _index2 = _interopRequireDefault(require("../getDay/index.js"));

var _index3 = _interopRequireDefault(require("../startOfMonth/index.js"));

var _index4 = _interopRequireDefault(require("../_lib/toInteger/index.js"));

var _index5 = _interopRequireDefault(require("../_lib/requiredArgs/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function getWeekOfMonth(date, dirtyOptions) {
  (0, _index5.default)(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index4.default)(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index4.default)(options.weekStartsOn);

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var currentDayOfMonth = (0, _index.default)(date);

  if (isNaN(currentDayOfMonth)) {
    return currentDayOfMonth;
  }

  var startWeekDay = (0, _index2.default)((0, _index3.default)(date));
  var lastDayOfFirstWeek = 0;

  if (startWeekDay >= weekStartsOn) {
    lastDayOfFirstWeek = weekStartsOn + 7 - startWeekDay;
  } else {
    lastDayOfFirstWeek = weekStartsOn - startWeekDay;
  }

  var weekNumber = 1;

  if (currentDayOfMonth > lastDayOfFirstWeek) {
    var remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
    weekNumber = weekNumber + Math.ceil(remainingDaysAfterFirstWeek / 7);
  }

  return weekNumber;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImdldFdlZWtPZk1vbnRoIiwiX2luZGV4IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfaW5kZXgyIiwiX2luZGV4MyIsIl9pbmRleDQiLCJfaW5kZXg1Iiwib2JqIiwiX19lc01vZHVsZSIsImRhdGUiLCJkaXJ0eU9wdGlvbnMiLCJhcmd1bWVudHMiLCJvcHRpb25zIiwibG9jYWxlIiwibG9jYWxlV2Vla1N0YXJ0c09uIiwid2Vla1N0YXJ0c09uIiwiZGVmYXVsdFdlZWtTdGFydHNPbiIsIlJhbmdlRXJyb3IiLCJjdXJyZW50RGF5T2ZNb250aCIsImlzTmFOIiwic3RhcnRXZWVrRGF5IiwibGFzdERheU9mRmlyc3RXZWVrIiwid2Vla051bWJlciIsInJlbWFpbmluZ0RheXNBZnRlckZpcnN0V2VlayIsIk1hdGgiLCJjZWlsIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsY0FBbEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyx1QkFBUixDQUFuQzs7QUFFQSxJQUFJQyxPQUFPLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLHNCQUFSLENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sNEJBQVIsQ0FBcEM7O0FBRUEsSUFBSUcsT0FBTyxHQUFHSixzQkFBc0IsQ0FBQ0MsT0FBTyw4QkFBUixDQUFwQzs7QUFFQSxJQUFJSSxPQUFPLEdBQUdMLHNCQUFzQixDQUFDQyxPQUFPLGlDQUFSLENBQXBDOztBQUVBLFNBQVNELHNCQUFULENBQWdDTSxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFVCxJQUFBQSxPQUFPLEVBQUVTO0FBQVgsR0FBckM7QUFBd0Q7O0FBMkIvRixTQUFTUixjQUFULENBQXdCVSxJQUF4QixFQUE4QkMsWUFBOUIsRUFBNEM7QUFDMUMsR0FBQyxHQUFHSixPQUFPLENBQUNSLE9BQVosRUFBcUIsQ0FBckIsRUFBd0JhLFNBQXhCO0FBQ0EsTUFBSUMsT0FBTyxHQUFHRixZQUFZLElBQUksRUFBOUI7QUFDQSxNQUFJRyxNQUFNLEdBQUdELE9BQU8sQ0FBQ0MsTUFBckI7QUFDQSxNQUFJQyxrQkFBa0IsR0FBR0QsTUFBTSxJQUFJQSxNQUFNLENBQUNELE9BQWpCLElBQTRCQyxNQUFNLENBQUNELE9BQVAsQ0FBZUcsWUFBcEU7QUFDQSxNQUFJQyxtQkFBbUIsR0FBR0Ysa0JBQWtCLElBQUksSUFBdEIsR0FBNkIsQ0FBN0IsR0FBaUMsQ0FBQyxHQUFHVCxPQUFPLENBQUNQLE9BQVosRUFBcUJnQixrQkFBckIsQ0FBM0Q7QUFDQSxNQUFJQyxZQUFZLEdBQUdILE9BQU8sQ0FBQ0csWUFBUixJQUF3QixJQUF4QixHQUErQkMsbUJBQS9CLEdBQXFELENBQUMsR0FBR1gsT0FBTyxDQUFDUCxPQUFaLEVBQXFCYyxPQUFPLENBQUNHLFlBQTdCLENBQXhFOztBQUVBLE1BQUksRUFBRUEsWUFBWSxJQUFJLENBQWhCLElBQXFCQSxZQUFZLElBQUksQ0FBdkMsQ0FBSixFQUErQztBQUM3QyxVQUFNLElBQUlFLFVBQUosQ0FBZSxrREFBZixDQUFOO0FBQ0Q7O0FBRUQsTUFBSUMsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHbEIsTUFBTSxDQUFDRixPQUFYLEVBQW9CVyxJQUFwQixDQUF4Qjs7QUFFQSxNQUFJVSxLQUFLLENBQUNELGlCQUFELENBQVQsRUFBOEI7QUFDNUIsV0FBT0EsaUJBQVA7QUFDRDs7QUFFRCxNQUFJRSxZQUFZLEdBQUcsQ0FBQyxHQUFHakIsT0FBTyxDQUFDTCxPQUFaLEVBQXFCLENBQUMsR0FBR00sT0FBTyxDQUFDTixPQUFaLEVBQXFCVyxJQUFyQixDQUFyQixDQUFuQjtBQUNBLE1BQUlZLGtCQUFrQixHQUFHLENBQXpCOztBQUVBLE1BQUlELFlBQVksSUFBSUwsWUFBcEIsRUFBa0M7QUFDaENNLElBQUFBLGtCQUFrQixHQUFHTixZQUFZLEdBQUcsQ0FBZixHQUFtQkssWUFBeEM7QUFDRCxHQUZELE1BRU87QUFDTEMsSUFBQUEsa0JBQWtCLEdBQUdOLFlBQVksR0FBR0ssWUFBcEM7QUFDRDs7QUFFRCxNQUFJRSxVQUFVLEdBQUcsQ0FBakI7O0FBRUEsTUFBSUosaUJBQWlCLEdBQUdHLGtCQUF4QixFQUE0QztBQUMxQyxRQUFJRSwyQkFBMkIsR0FBR0wsaUJBQWlCLEdBQUdHLGtCQUF0RDtBQUNBQyxJQUFBQSxVQUFVLEdBQUdBLFVBQVUsR0FBR0UsSUFBSSxDQUFDQyxJQUFMLENBQVVGLDJCQUEyQixHQUFHLENBQXhDLENBQTFCO0FBQ0Q7O0FBRUQsU0FBT0QsVUFBUDtBQUNEOztBQUVESSxNQUFNLENBQUM5QixPQUFQLEdBQWlCQSxPQUFPLENBQUNFLE9BQXpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBnZXRXZWVrT2ZNb250aDtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2dldERhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2dldERheS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc3RhcnRPZk1vbnRoL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIGdldFdlZWtPZk1vbnRoXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIHdlZWsgb2YgdGhlIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSB3ZWVrIG9mIHRoZSBtb250aCBvZiB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZ2l2ZW4gZGF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgd2VlayBvZiBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFdoaWNoIHdlZWsgb2YgdGhlIG1vbnRoIGlzIDkgTm92ZW1iZXIgMjAxNz9cbiAqIHZhciByZXN1bHQgPSBnZXRXZWVrT2ZNb250aChuZXcgRGF0ZSgyMDE3LCAxMCwgOSkpXG4gKiAvLz0+IDJcbiAqL1xuZnVuY3Rpb24gZ2V0V2Vla09mTW9udGgoZGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gICgwLCBfaW5kZXg1LmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6ICgwLCBfaW5kZXg0LmRlZmF1bHQpKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6ICgwLCBfaW5kZXg0LmRlZmF1bHQpKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgY3VycmVudERheU9mTW9udGggPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGUpO1xuXG4gIGlmIChpc05hTihjdXJyZW50RGF5T2ZNb250aCkpIHtcbiAgICByZXR1cm4gY3VycmVudERheU9mTW9udGg7XG4gIH1cblxuICB2YXIgc3RhcnRXZWVrRGF5ID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoKDAsIF9pbmRleDMuZGVmYXVsdCkoZGF0ZSkpO1xuICB2YXIgbGFzdERheU9mRmlyc3RXZWVrID0gMDtcblxuICBpZiAoc3RhcnRXZWVrRGF5ID49IHdlZWtTdGFydHNPbikge1xuICAgIGxhc3REYXlPZkZpcnN0V2VlayA9IHdlZWtTdGFydHNPbiArIDcgLSBzdGFydFdlZWtEYXk7XG4gIH0gZWxzZSB7XG4gICAgbGFzdERheU9mRmlyc3RXZWVrID0gd2Vla1N0YXJ0c09uIC0gc3RhcnRXZWVrRGF5O1xuICB9XG5cbiAgdmFyIHdlZWtOdW1iZXIgPSAxO1xuXG4gIGlmIChjdXJyZW50RGF5T2ZNb250aCA+IGxhc3REYXlPZkZpcnN0V2Vlaykge1xuICAgIHZhciByZW1haW5pbmdEYXlzQWZ0ZXJGaXJzdFdlZWsgPSBjdXJyZW50RGF5T2ZNb250aCAtIGxhc3REYXlPZkZpcnN0V2VlaztcbiAgICB3ZWVrTnVtYmVyID0gd2Vla051bWJlciArIE1hdGguY2VpbChyZW1haW5pbmdEYXlzQWZ0ZXJGaXJzdFdlZWsgLyA3KTtcbiAgfVxuXG4gIHJldHVybiB3ZWVrTnVtYmVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=