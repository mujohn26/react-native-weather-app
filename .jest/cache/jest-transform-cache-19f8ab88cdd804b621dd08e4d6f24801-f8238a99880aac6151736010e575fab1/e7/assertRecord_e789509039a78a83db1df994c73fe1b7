6a77841770c43bfea6402f226680ffd8
'use strict';

var GetIntrinsic = require("../GetIntrinsic");

var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var has = require('has');

var predicates = {
  'Property Descriptor': function isPropertyDescriptor(Type, Desc) {
    if (Type(Desc) !== 'Object') {
      return false;
    }

    var allowed = {
      '[[Configurable]]': true,
      '[[Enumerable]]': true,
      '[[Get]]': true,
      '[[Set]]': true,
      '[[Value]]': true,
      '[[Writable]]': true
    };

    for (var key in Desc) {
      if (has(Desc, key) && !allowed[key]) {
        return false;
      }
    }

    var isData = has(Desc, '[[Value]]');
    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');

    if (isData && IsAccessor) {
      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
    }

    return true;
  }
};

module.exports = function assertRecord(Type, recordType, argumentName, value) {
  var predicate = predicates[recordType];

  if (typeof predicate !== 'function') {
    throw new $SyntaxError('unknown record type: ' + recordType);
  }

  if (!predicate(Type, value)) {
    throw new $TypeError(argumentName + ' must be a ' + recordType);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2VydFJlY29yZC5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsIiRTeW50YXhFcnJvciIsImhhcyIsInByZWRpY2F0ZXMiLCJpc1Byb3BlcnR5RGVzY3JpcHRvciIsIlR5cGUiLCJEZXNjIiwiYWxsb3dlZCIsImtleSIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNzZXJ0UmVjb3JkIiwicmVjb3JkVHlwZSIsImFyZ3VtZW50TmFtZSIsInZhbHVlIiwicHJlZGljYXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sbUJBQTFCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQUQsQ0FBN0I7QUFDQSxJQUFJRyxZQUFZLEdBQUdILFlBQVksQ0FBQyxlQUFELENBQS9COztBQUVBLElBQUlJLEdBQUcsR0FBR0gsT0FBTyxDQUFDLEtBQUQsQ0FBakI7O0FBRUEsSUFBSUksVUFBVSxHQUFHO0FBRWhCLHlCQUF1QixTQUFTQyxvQkFBVCxDQUE4QkMsSUFBOUIsRUFBb0NDLElBQXBDLEVBQTBDO0FBQ2hFLFFBQUlELElBQUksQ0FBQ0MsSUFBRCxDQUFKLEtBQWUsUUFBbkIsRUFBNkI7QUFDNUIsYUFBTyxLQUFQO0FBQ0E7O0FBQ0QsUUFBSUMsT0FBTyxHQUFHO0FBQ2IsMEJBQW9CLElBRFA7QUFFYix3QkFBa0IsSUFGTDtBQUdiLGlCQUFXLElBSEU7QUFJYixpQkFBVyxJQUpFO0FBS2IsbUJBQWEsSUFMQTtBQU1iLHNCQUFnQjtBQU5ILEtBQWQ7O0FBU0EsU0FBSyxJQUFJQyxHQUFULElBQWdCRixJQUFoQixFQUFzQjtBQUNyQixVQUFJSixHQUFHLENBQUNJLElBQUQsRUFBT0UsR0FBUCxDQUFILElBQWtCLENBQUNELE9BQU8sQ0FBQ0MsR0FBRCxDQUE5QixFQUFxQztBQUNwQyxlQUFPLEtBQVA7QUFDQTtBQUNEOztBQUVELFFBQUlDLE1BQU0sR0FBR1AsR0FBRyxDQUFDSSxJQUFELEVBQU8sV0FBUCxDQUFoQjtBQUNBLFFBQUlJLFVBQVUsR0FBR1IsR0FBRyxDQUFDSSxJQUFELEVBQU8sU0FBUCxDQUFILElBQXdCSixHQUFHLENBQUNJLElBQUQsRUFBTyxTQUFQLENBQTVDOztBQUNBLFFBQUlHLE1BQU0sSUFBSUMsVUFBZCxFQUEwQjtBQUN6QixZQUFNLElBQUlWLFVBQUosQ0FBZSxvRUFBZixDQUFOO0FBQ0E7O0FBQ0QsV0FBTyxJQUFQO0FBQ0E7QUEzQmUsQ0FBakI7O0FBOEJBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsWUFBVCxDQUFzQlIsSUFBdEIsRUFBNEJTLFVBQTVCLEVBQXdDQyxZQUF4QyxFQUFzREMsS0FBdEQsRUFBNkQ7QUFDN0UsTUFBSUMsU0FBUyxHQUFHZCxVQUFVLENBQUNXLFVBQUQsQ0FBMUI7O0FBQ0EsTUFBSSxPQUFPRyxTQUFQLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ3BDLFVBQU0sSUFBSWhCLFlBQUosQ0FBaUIsMEJBQTBCYSxVQUEzQyxDQUFOO0FBQ0E7O0FBQ0QsTUFBSSxDQUFDRyxTQUFTLENBQUNaLElBQUQsRUFBT1csS0FBUCxDQUFkLEVBQTZCO0FBQzVCLFVBQU0sSUFBSWhCLFVBQUosQ0FBZWUsWUFBWSxHQUFHLGFBQWYsR0FBK0JELFVBQTlDLENBQU47QUFDQTtBQUNELENBUkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJFN5bnRheEVycm9yID0gR2V0SW50cmluc2ljKCclU3ludGF4RXJyb3IlJyk7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIHByZWRpY2F0ZXMgPSB7XG5cdC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1wcm9wZXJ0eS1kZXNjcmlwdG9yLXNwZWNpZmljYXRpb24tdHlwZVxuXHQnUHJvcGVydHkgRGVzY3JpcHRvcic6IGZ1bmN0aW9uIGlzUHJvcGVydHlEZXNjcmlwdG9yKFR5cGUsIERlc2MpIHtcblx0XHRpZiAoVHlwZShEZXNjKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dmFyIGFsbG93ZWQgPSB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbR2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbU2V0XV0nOiB0cnVlLFxuXHRcdFx0J1tbVmFsdWVdXSc6IHRydWUsXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gRGVzYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFx0XHRpZiAoaGFzKERlc2MsIGtleSkgJiYgIWFsbG93ZWRba2V5XSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGlzRGF0YSA9IGhhcyhEZXNjLCAnW1tWYWx1ZV1dJyk7XG5cdFx0dmFyIElzQWNjZXNzb3IgPSBoYXMoRGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoRGVzYywgJ1tbU2V0XV0nKTtcblx0XHRpZiAoaXNEYXRhICYmIElzQWNjZXNzb3IpIHtcblx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdQcm9wZXJ0eSBEZXNjcmlwdG9ycyBtYXkgbm90IGJlIGJvdGggYWNjZXNzb3IgYW5kIGRhdGEgZGVzY3JpcHRvcnMnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXNzZXJ0UmVjb3JkKFR5cGUsIHJlY29yZFR5cGUsIGFyZ3VtZW50TmFtZSwgdmFsdWUpIHtcblx0dmFyIHByZWRpY2F0ZSA9IHByZWRpY2F0ZXNbcmVjb3JkVHlwZV07XG5cdGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigndW5rbm93biByZWNvcmQgdHlwZTogJyArIHJlY29yZFR5cGUpO1xuXHR9XG5cdGlmICghcHJlZGljYXRlKFR5cGUsIHZhbHVlKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKGFyZ3VtZW50TmFtZSArICcgbXVzdCBiZSBhICcgKyByZWNvcmRUeXBlKTtcblx0fVxufTtcbiJdfQ==