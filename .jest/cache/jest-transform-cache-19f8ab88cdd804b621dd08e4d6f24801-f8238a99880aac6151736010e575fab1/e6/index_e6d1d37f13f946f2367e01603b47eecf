31d6de1b6f945ee224c25ef90c0e0e6d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = set;

var _index = _interopRequireDefault(require("../toDate/index.js"));

var _index2 = _interopRequireDefault(require("../setMonth/index.js"));

var _index3 = _interopRequireDefault(require("../_lib/toInteger/index.js"));

var _index4 = _interopRequireDefault(require("../_lib/requiredArgs/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function set(dirtyDate, values) {
  (0, _index4.default)(2, arguments);

  if (typeof values !== 'object' || values === null) {
    throw new RangeError('values parameter must be an object');
  }

  var date = (0, _index.default)(dirtyDate);

  if (isNaN(date)) {
    return new Date(NaN);
  }

  if (values.year != null) {
    date.setFullYear(values.year);
  }

  if (values.month != null) {
    date = (0, _index2.default)(date, values.month);
  }

  if (values.date != null) {
    date.setDate((0, _index3.default)(values.date));
  }

  if (values.hours != null) {
    date.setHours((0, _index3.default)(values.hours));
  }

  if (values.minutes != null) {
    date.setMinutes((0, _index3.default)(values.minutes));
  }

  if (values.seconds != null) {
    date.setSeconds((0, _index3.default)(values.seconds));
  }

  if (values.milliseconds != null) {
    date.setMilliseconds((0, _index3.default)(values.milliseconds));
  }

  return date;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInNldCIsIl9pbmRleCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0Iiwib2JqIiwiX19lc01vZHVsZSIsImRpcnR5RGF0ZSIsInZhbHVlcyIsImFyZ3VtZW50cyIsIlJhbmdlRXJyb3IiLCJkYXRlIiwiaXNOYU4iLCJEYXRlIiwiTmFOIiwieWVhciIsInNldEZ1bGxZZWFyIiwibW9udGgiLCJzZXREYXRlIiwiaG91cnMiLCJzZXRIb3VycyIsIm1pbnV0ZXMiLCJzZXRNaW51dGVzIiwic2Vjb25kcyIsInNldFNlY29uZHMiLCJtaWxsaXNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxHQUFsQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLHNCQUFSLENBQW5DOztBQUVBLElBQUlDLE9BQU8sR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sd0JBQVIsQ0FBcEM7O0FBRUEsSUFBSUUsT0FBTyxHQUFHSCxzQkFBc0IsQ0FBQ0MsT0FBTyw4QkFBUixDQUFwQzs7QUFFQSxJQUFJRyxPQUFPLEdBQUdKLHNCQUFzQixDQUFDQyxPQUFPLGlDQUFSLENBQXBDOztBQUVBLFNBQVNELHNCQUFULENBQWdDSyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFUixJQUFBQSxPQUFPLEVBQUVRO0FBQVgsR0FBckM7QUFBd0Q7O0FBd0MvRixTQUFTUCxHQUFULENBQWFTLFNBQWIsRUFBd0JDLE1BQXhCLEVBQWdDO0FBQzlCLEdBQUMsR0FBR0osT0FBTyxDQUFDUCxPQUFaLEVBQXFCLENBQXJCLEVBQXdCWSxTQUF4Qjs7QUFFQSxNQUFJLE9BQU9ELE1BQVAsS0FBa0IsUUFBbEIsSUFBOEJBLE1BQU0sS0FBSyxJQUE3QyxFQUFtRDtBQUNqRCxVQUFNLElBQUlFLFVBQUosQ0FBZSxvQ0FBZixDQUFOO0FBQ0Q7O0FBRUQsTUFBSUMsSUFBSSxHQUFHLENBQUMsR0FBR1osTUFBTSxDQUFDRixPQUFYLEVBQW9CVSxTQUFwQixDQUFYOztBQUVBLE1BQUlLLEtBQUssQ0FBQ0QsSUFBRCxDQUFULEVBQWlCO0FBQ2YsV0FBTyxJQUFJRSxJQUFKLENBQVNDLEdBQVQsQ0FBUDtBQUNEOztBQUVELE1BQUlOLE1BQU0sQ0FBQ08sSUFBUCxJQUFlLElBQW5CLEVBQXlCO0FBQ3ZCSixJQUFBQSxJQUFJLENBQUNLLFdBQUwsQ0FBaUJSLE1BQU0sQ0FBQ08sSUFBeEI7QUFDRDs7QUFFRCxNQUFJUCxNQUFNLENBQUNTLEtBQVAsSUFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJOLElBQUFBLElBQUksR0FBRyxDQUFDLEdBQUdULE9BQU8sQ0FBQ0wsT0FBWixFQUFxQmMsSUFBckIsRUFBMkJILE1BQU0sQ0FBQ1MsS0FBbEMsQ0FBUDtBQUNEOztBQUVELE1BQUlULE1BQU0sQ0FBQ0csSUFBUCxJQUFlLElBQW5CLEVBQXlCO0FBQ3ZCQSxJQUFBQSxJQUFJLENBQUNPLE9BQUwsQ0FBYSxDQUFDLEdBQUdmLE9BQU8sQ0FBQ04sT0FBWixFQUFxQlcsTUFBTSxDQUFDRyxJQUE1QixDQUFiO0FBQ0Q7O0FBRUQsTUFBSUgsTUFBTSxDQUFDVyxLQUFQLElBQWdCLElBQXBCLEVBQTBCO0FBQ3hCUixJQUFBQSxJQUFJLENBQUNTLFFBQUwsQ0FBYyxDQUFDLEdBQUdqQixPQUFPLENBQUNOLE9BQVosRUFBcUJXLE1BQU0sQ0FBQ1csS0FBNUIsQ0FBZDtBQUNEOztBQUVELE1BQUlYLE1BQU0sQ0FBQ2EsT0FBUCxJQUFrQixJQUF0QixFQUE0QjtBQUMxQlYsSUFBQUEsSUFBSSxDQUFDVyxVQUFMLENBQWdCLENBQUMsR0FBR25CLE9BQU8sQ0FBQ04sT0FBWixFQUFxQlcsTUFBTSxDQUFDYSxPQUE1QixDQUFoQjtBQUNEOztBQUVELE1BQUliLE1BQU0sQ0FBQ2UsT0FBUCxJQUFrQixJQUF0QixFQUE0QjtBQUMxQlosSUFBQUEsSUFBSSxDQUFDYSxVQUFMLENBQWdCLENBQUMsR0FBR3JCLE9BQU8sQ0FBQ04sT0FBWixFQUFxQlcsTUFBTSxDQUFDZSxPQUE1QixDQUFoQjtBQUNEOztBQUVELE1BQUlmLE1BQU0sQ0FBQ2lCLFlBQVAsSUFBdUIsSUFBM0IsRUFBaUM7QUFDL0JkLElBQUFBLElBQUksQ0FBQ2UsZUFBTCxDQUFxQixDQUFDLEdBQUd2QixPQUFPLENBQUNOLE9BQVosRUFBcUJXLE1BQU0sQ0FBQ2lCLFlBQTVCLENBQXJCO0FBQ0Q7O0FBRUQsU0FBT2QsSUFBUDtBQUNEOztBQUVEZ0IsTUFBTSxDQUFDaEMsT0FBUCxHQUFpQkEsT0FBTyxDQUFDRSxPQUF6QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc2V0O1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zZXRNb250aC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBzZXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgU2V0IGRhdGUgdmFsdWVzIHRvIGEgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNldCBkYXRlIHZhbHVlcyB0byBhIGdpdmVuIGRhdGUuXG4gKlxuICogU2V0cyB0aW1lIHZhbHVlcyB0byBkYXRlIGZyb20gb2JqZWN0IGB2YWx1ZXNgLlxuICogQSB2YWx1ZSBpcyBub3Qgc2V0IGlmIGl0IGlzIHVuZGVmaW5lZCBvciBudWxsIG9yIGRvZXNuJ3QgZXhpc3QgaW4gYHZhbHVlc2AuXG4gKlxuICogTm90ZSBhYm91dCBidW5kbGUgc2l6ZTogYHNldGAgZG9lcyBub3QgaW50ZXJuYWxseSB1c2UgYHNldFhgIGZ1bmN0aW9ucyBmcm9tIGRhdGUtZm5zIGJ1dCBpbnN0ZWFkIG9wdHNcbiAqIHRvIHVzZSBuYXRpdmUgYERhdGUjc2V0WGAgbWV0aG9kcy4gSWYgeW91IHVzZSB0aGlzIGZ1bmN0aW9uLCB5b3UgbWF5IG5vdCB3YW50IHRvIGluY2x1ZGUgdGhlXG4gKiBvdGhlciBgc2V0WGAgZnVuY3Rpb25zIHRoYXQgZGF0ZS1mbnMgcHJvdmlkZXMgaWYgeW91IGFyZSBjb25jZXJuZWQgYWJvdXQgdGhlIGJ1bmRsZSBzaXplLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IFt2YWx1ZXMueWVhcl0gLSB0aGUgbnVtYmVyIG9mIHllYXJzIHRvIGJlIHNldFxuICogQHBhcmFtIHtOdW1iZXJ9IFt2YWx1ZXMubW9udGhdIC0gdGhlIG51bWJlciBvZiBtb250aHMgdG8gYmUgc2V0XG4gKiBAcGFyYW0ge051bWJlcn0gW3ZhbHVlcy5kYXRlXSAtIHRoZSBudW1iZXIgb2YgZGF5cyB0byBiZSBzZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbdmFsdWVzLmhvdXJzXSAtIHRoZSBudW1iZXIgb2YgaG91cnMgdG8gYmUgc2V0XG4gKiBAcGFyYW0ge051bWJlcn0gW3ZhbHVlcy5taW51dGVzXSAtIHRoZSBudW1iZXIgb2YgbWludXRlcyB0byBiZSBzZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbdmFsdWVzLnNlY29uZHNdIC0gdGhlIG51bWJlciBvZiBzZWNvbmRzIHRvIGJlIHNldFxuICogQHBhcmFtIHtOdW1iZXJ9IFt2YWx1ZXMubWlsbGlzZWNvbmRzXSAtIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHNldFxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIG9wdGlvbnMgc2V0XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgdmFsdWVzYCBtdXN0IGJlIGFuIG9iamVjdFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUcmFuc2Zvcm0gMSBTZXB0ZW1iZXIgMjAxNCBpbnRvIDIwIE9jdG9iZXIgMjAxNSBpbiBhIHNpbmdsZSBsaW5lOlxuICogdmFyIHJlc3VsdCA9IHNldChuZXcgRGF0ZSgyMDE0LCA4LCAyMCksIHsgeWVhcjogMjAxNSwgbW9udGg6IDksIGRhdGU6IDIwIH0pXG4gKiAvLz0+IFR1ZSBPY3QgMjAgMjAxNSAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTZXQgMTIgUE0gdG8gMSBTZXB0ZW1iZXIgMjAxNCAwMToyMzo0NSB0byAxIFNlcHRlbWJlciAyMDE0IDEyOjAwOjAwOlxuICogdmFyIHJlc3VsdCA9IHNldChuZXcgRGF0ZSgyMDE0LCA4LCAxLCAxLCAyMywgNDUpLCB7IGhvdXJzOiAxMiB9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMTI6MjM6NDVcbiAqL1xuZnVuY3Rpb24gc2V0KGRpcnR5RGF0ZSwgdmFsdWVzKSB7XG4gICgwLCBfaW5kZXg0LmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZXMgIT09ICdvYmplY3QnIHx8IHZhbHVlcyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd2YWx1ZXMgcGFyYW1ldGVyIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTsgLy8gQ2hlY2sgaWYgZGF0ZSBpcyBJbnZhbGlkIERhdGUgYmVjYXVzZSBEYXRlLnByb3RvdHlwZS5zZXRGdWxsWWVhciBpZ25vcmVzIHRoZSB2YWx1ZSBvZiBJbnZhbGlkIERhdGVcblxuICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICh2YWx1ZXMueWVhciAhPSBudWxsKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih2YWx1ZXMueWVhcik7XG4gIH1cblxuICBpZiAodmFsdWVzLm1vbnRoICE9IG51bGwpIHtcbiAgICBkYXRlID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZSwgdmFsdWVzLm1vbnRoKTtcbiAgfVxuXG4gIGlmICh2YWx1ZXMuZGF0ZSAhPSBudWxsKSB7XG4gICAgZGF0ZS5zZXREYXRlKCgwLCBfaW5kZXgzLmRlZmF1bHQpKHZhbHVlcy5kYXRlKSk7XG4gIH1cblxuICBpZiAodmFsdWVzLmhvdXJzICE9IG51bGwpIHtcbiAgICBkYXRlLnNldEhvdXJzKCgwLCBfaW5kZXgzLmRlZmF1bHQpKHZhbHVlcy5ob3VycykpO1xuICB9XG5cbiAgaWYgKHZhbHVlcy5taW51dGVzICE9IG51bGwpIHtcbiAgICBkYXRlLnNldE1pbnV0ZXMoKDAsIF9pbmRleDMuZGVmYXVsdCkodmFsdWVzLm1pbnV0ZXMpKTtcbiAgfVxuXG4gIGlmICh2YWx1ZXMuc2Vjb25kcyAhPSBudWxsKSB7XG4gICAgZGF0ZS5zZXRTZWNvbmRzKCgwLCBfaW5kZXgzLmRlZmF1bHQpKHZhbHVlcy5zZWNvbmRzKSk7XG4gIH1cblxuICBpZiAodmFsdWVzLm1pbGxpc2Vjb25kcyAhPSBudWxsKSB7XG4gICAgZGF0ZS5zZXRNaWxsaXNlY29uZHMoKDAsIF9pbmRleDMuZGVmYXVsdCkodmFsdWVzLm1pbGxpc2Vjb25kcykpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdfQ==