13ff960efaa54085a6882989860972b5
"use strict";

module.exports = CSSselect;

var Pseudos = require("./lib/pseudos.js"),
    DomUtils = require("domutils"),
    findOne = DomUtils.findOne,
    findAll = DomUtils.findAll,
    getChildren = DomUtils.getChildren,
    removeSubsets = DomUtils.removeSubsets,
    falseFunc = require("boolbase").falseFunc,
    compile = require("./lib/compile.js"),
    compileUnsafe = compile.compileUnsafe,
    compileToken = compile.compileToken;

function getSelectorFunc(searchFunc) {
  return function select(query, elems, options) {
    if (typeof query !== "function") query = compileUnsafe(query, options, elems);
    if (!Array.isArray(elems)) elems = getChildren(elems);else elems = removeSubsets(elems);
    return searchFunc(query, elems);
  };
}

var selectAll = getSelectorFunc(function selectAll(query, elems) {
  return query === falseFunc || !elems || elems.length === 0 ? [] : findAll(query, elems);
});
var selectOne = getSelectorFunc(function selectOne(query, elems) {
  return query === falseFunc || !elems || elems.length === 0 ? null : findOne(query, elems);
});

function is(elem, query, options) {
  return (typeof query === "function" ? query : compile(query, options))(elem);
}

function CSSselect(query, elems, options) {
  return selectAll(query, elems, options);
}

CSSselect.compile = compile;
CSSselect.filters = Pseudos.filters;
CSSselect.pseudos = Pseudos.pseudos;
CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;
CSSselect.is = is;
CSSselect.parse = compile;
CSSselect.iterate = selectAll;
CSSselect._compileUnsafe = compileUnsafe;
CSSselect._compileToken = compileToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDU1NzZWxlY3QiLCJQc2V1ZG9zIiwicmVxdWlyZSIsIkRvbVV0aWxzIiwiZmluZE9uZSIsImZpbmRBbGwiLCJnZXRDaGlsZHJlbiIsInJlbW92ZVN1YnNldHMiLCJmYWxzZUZ1bmMiLCJjb21waWxlIiwiY29tcGlsZVVuc2FmZSIsImNvbXBpbGVUb2tlbiIsImdldFNlbGVjdG9yRnVuYyIsInNlYXJjaEZ1bmMiLCJzZWxlY3QiLCJxdWVyeSIsImVsZW1zIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsInNlbGVjdEFsbCIsImxlbmd0aCIsInNlbGVjdE9uZSIsImlzIiwiZWxlbSIsImZpbHRlcnMiLCJwc2V1ZG9zIiwicGFyc2UiLCJpdGVyYXRlIiwiX2NvbXBpbGVVbnNhZmUiLCJfY29tcGlsZVRva2VuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxTQUFqQjs7QUFFQSxJQUFJQyxPQUFPLEdBQVNDLE9BQU8sb0JBQTNCO0FBQUEsSUFDSUMsUUFBUSxHQUFRRCxPQUFPLENBQUMsVUFBRCxDQUQzQjtBQUFBLElBRUlFLE9BQU8sR0FBU0QsUUFBUSxDQUFDQyxPQUY3QjtBQUFBLElBR0lDLE9BQU8sR0FBU0YsUUFBUSxDQUFDRSxPQUg3QjtBQUFBLElBSUlDLFdBQVcsR0FBS0gsUUFBUSxDQUFDRyxXQUo3QjtBQUFBLElBS0lDLGFBQWEsR0FBR0osUUFBUSxDQUFDSSxhQUw3QjtBQUFBLElBTUlDLFNBQVMsR0FBT04sT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQk0sU0FOeEM7QUFBQSxJQU9JQyxPQUFPLEdBQVNQLE9BQU8sb0JBUDNCO0FBQUEsSUFRSVEsYUFBYSxHQUFHRCxPQUFPLENBQUNDLGFBUjVCO0FBQUEsSUFTSUMsWUFBWSxHQUFJRixPQUFPLENBQUNFLFlBVDVCOztBQVdBLFNBQVNDLGVBQVQsQ0FBeUJDLFVBQXpCLEVBQW9DO0FBQ25DLFNBQU8sU0FBU0MsTUFBVCxDQUFnQkMsS0FBaEIsRUFBdUJDLEtBQXZCLEVBQThCQyxPQUE5QixFQUFzQztBQUN0QyxRQUFHLE9BQU9GLEtBQVAsS0FBaUIsVUFBcEIsRUFBZ0NBLEtBQUssR0FBR0wsYUFBYSxDQUFDSyxLQUFELEVBQVFFLE9BQVIsRUFBaUJELEtBQWpCLENBQXJCO0FBQ2hDLFFBQUcsQ0FBQ0UsS0FBSyxDQUFDQyxPQUFOLENBQWNILEtBQWQsQ0FBSixFQUEwQkEsS0FBSyxHQUFHVixXQUFXLENBQUNVLEtBQUQsQ0FBbkIsQ0FBMUIsS0FDREEsS0FBSyxHQUFHVCxhQUFhLENBQUNTLEtBQUQsQ0FBckI7QUFDTCxXQUFPSCxVQUFVLENBQUNFLEtBQUQsRUFBUUMsS0FBUixDQUFqQjtBQUNBLEdBTEQ7QUFNQTs7QUFFRCxJQUFJSSxTQUFTLEdBQUdSLGVBQWUsQ0FBQyxTQUFTUSxTQUFULENBQW1CTCxLQUFuQixFQUEwQkMsS0FBMUIsRUFBZ0M7QUFDL0QsU0FBUUQsS0FBSyxLQUFLUCxTQUFWLElBQXVCLENBQUNRLEtBQXhCLElBQWlDQSxLQUFLLENBQUNLLE1BQU4sS0FBaUIsQ0FBbkQsR0FBd0QsRUFBeEQsR0FBNkRoQixPQUFPLENBQUNVLEtBQUQsRUFBUUMsS0FBUixDQUEzRTtBQUNBLENBRjhCLENBQS9CO0FBSUEsSUFBSU0sU0FBUyxHQUFHVixlQUFlLENBQUMsU0FBU1UsU0FBVCxDQUFtQlAsS0FBbkIsRUFBMEJDLEtBQTFCLEVBQWdDO0FBQy9ELFNBQVFELEtBQUssS0FBS1AsU0FBVixJQUF1QixDQUFDUSxLQUF4QixJQUFpQ0EsS0FBSyxDQUFDSyxNQUFOLEtBQWlCLENBQW5ELEdBQXdELElBQXhELEdBQStEakIsT0FBTyxDQUFDVyxLQUFELEVBQVFDLEtBQVIsQ0FBN0U7QUFDQSxDQUY4QixDQUEvQjs7QUFJQSxTQUFTTyxFQUFULENBQVlDLElBQVosRUFBa0JULEtBQWxCLEVBQXlCRSxPQUF6QixFQUFpQztBQUNoQyxTQUFPLENBQUMsT0FBT0YsS0FBUCxLQUFpQixVQUFqQixHQUE4QkEsS0FBOUIsR0FBc0NOLE9BQU8sQ0FBQ00sS0FBRCxFQUFRRSxPQUFSLENBQTlDLEVBQWdFTyxJQUFoRSxDQUFQO0FBQ0E7O0FBS0QsU0FBU3hCLFNBQVQsQ0FBbUJlLEtBQW5CLEVBQTBCQyxLQUExQixFQUFpQ0MsT0FBakMsRUFBeUM7QUFDeEMsU0FBT0csU0FBUyxDQUFDTCxLQUFELEVBQVFDLEtBQVIsRUFBZUMsT0FBZixDQUFoQjtBQUNBOztBQUVEakIsU0FBUyxDQUFDUyxPQUFWLEdBQW9CQSxPQUFwQjtBQUNBVCxTQUFTLENBQUN5QixPQUFWLEdBQW9CeEIsT0FBTyxDQUFDd0IsT0FBNUI7QUFDQXpCLFNBQVMsQ0FBQzBCLE9BQVYsR0FBb0J6QixPQUFPLENBQUN5QixPQUE1QjtBQUVBMUIsU0FBUyxDQUFDb0IsU0FBVixHQUFzQkEsU0FBdEI7QUFDQXBCLFNBQVMsQ0FBQ3NCLFNBQVYsR0FBc0JBLFNBQXRCO0FBRUF0QixTQUFTLENBQUN1QixFQUFWLEdBQWVBLEVBQWY7QUFHQXZCLFNBQVMsQ0FBQzJCLEtBQVYsR0FBa0JsQixPQUFsQjtBQUNBVCxTQUFTLENBQUM0QixPQUFWLEdBQW9CUixTQUFwQjtBQUdBcEIsU0FBUyxDQUFDNkIsY0FBVixHQUEyQm5CLGFBQTNCO0FBQ0FWLFNBQVMsQ0FBQzhCLGFBQVYsR0FBMEJuQixZQUExQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU3NlbGVjdDtcblxudmFyIFBzZXVkb3MgICAgICAgPSByZXF1aXJlKFwiLi9saWIvcHNldWRvcy5qc1wiKSxcbiAgICBEb21VdGlscyAgICAgID0gcmVxdWlyZShcImRvbXV0aWxzXCIpLFxuICAgIGZpbmRPbmUgICAgICAgPSBEb21VdGlscy5maW5kT25lLFxuICAgIGZpbmRBbGwgICAgICAgPSBEb21VdGlscy5maW5kQWxsLFxuICAgIGdldENoaWxkcmVuICAgPSBEb21VdGlscy5nZXRDaGlsZHJlbixcbiAgICByZW1vdmVTdWJzZXRzID0gRG9tVXRpbHMucmVtb3ZlU3Vic2V0cyxcbiAgICBmYWxzZUZ1bmMgICAgID0gcmVxdWlyZShcImJvb2xiYXNlXCIpLmZhbHNlRnVuYyxcbiAgICBjb21waWxlICAgICAgID0gcmVxdWlyZShcIi4vbGliL2NvbXBpbGUuanNcIiksXG4gICAgY29tcGlsZVVuc2FmZSA9IGNvbXBpbGUuY29tcGlsZVVuc2FmZSxcbiAgICBjb21waWxlVG9rZW4gID0gY29tcGlsZS5jb21waWxlVG9rZW47XG5cbmZ1bmN0aW9uIGdldFNlbGVjdG9yRnVuYyhzZWFyY2hGdW5jKXtcblx0cmV0dXJuIGZ1bmN0aW9uIHNlbGVjdChxdWVyeSwgZWxlbXMsIG9wdGlvbnMpe1xuICAgICAgICBpZih0eXBlb2YgcXVlcnkgIT09IFwiZnVuY3Rpb25cIikgcXVlcnkgPSBjb21waWxlVW5zYWZlKHF1ZXJ5LCBvcHRpb25zLCBlbGVtcyk7XG4gICAgICAgIGlmKCFBcnJheS5pc0FycmF5KGVsZW1zKSkgZWxlbXMgPSBnZXRDaGlsZHJlbihlbGVtcyk7XG5cdFx0ZWxzZSBlbGVtcyA9IHJlbW92ZVN1YnNldHMoZWxlbXMpO1xuXHRcdHJldHVybiBzZWFyY2hGdW5jKHF1ZXJ5LCBlbGVtcyk7XG5cdH07XG59XG5cbnZhciBzZWxlY3RBbGwgPSBnZXRTZWxlY3RvckZ1bmMoZnVuY3Rpb24gc2VsZWN0QWxsKHF1ZXJ5LCBlbGVtcyl7XG5cdHJldHVybiAocXVlcnkgPT09IGZhbHNlRnVuYyB8fCAhZWxlbXMgfHwgZWxlbXMubGVuZ3RoID09PSAwKSA/IFtdIDogZmluZEFsbChxdWVyeSwgZWxlbXMpO1xufSk7XG5cbnZhciBzZWxlY3RPbmUgPSBnZXRTZWxlY3RvckZ1bmMoZnVuY3Rpb24gc2VsZWN0T25lKHF1ZXJ5LCBlbGVtcyl7XG5cdHJldHVybiAocXVlcnkgPT09IGZhbHNlRnVuYyB8fCAhZWxlbXMgfHwgZWxlbXMubGVuZ3RoID09PSAwKSA/IG51bGwgOiBmaW5kT25lKHF1ZXJ5LCBlbGVtcyk7XG59KTtcblxuZnVuY3Rpb24gaXMoZWxlbSwgcXVlcnksIG9wdGlvbnMpe1xuXHRyZXR1cm4gKHR5cGVvZiBxdWVyeSA9PT0gXCJmdW5jdGlvblwiID8gcXVlcnkgOiBjb21waWxlKHF1ZXJ5LCBvcHRpb25zKSkoZWxlbSk7XG59XG5cbi8qXG5cdHRoZSBleHBvcnRlZCBpbnRlcmZhY2VcbiovXG5mdW5jdGlvbiBDU1NzZWxlY3QocXVlcnksIGVsZW1zLCBvcHRpb25zKXtcblx0cmV0dXJuIHNlbGVjdEFsbChxdWVyeSwgZWxlbXMsIG9wdGlvbnMpO1xufVxuXG5DU1NzZWxlY3QuY29tcGlsZSA9IGNvbXBpbGU7XG5DU1NzZWxlY3QuZmlsdGVycyA9IFBzZXVkb3MuZmlsdGVycztcbkNTU3NlbGVjdC5wc2V1ZG9zID0gUHNldWRvcy5wc2V1ZG9zO1xuXG5DU1NzZWxlY3Quc2VsZWN0QWxsID0gc2VsZWN0QWxsO1xuQ1NTc2VsZWN0LnNlbGVjdE9uZSA9IHNlbGVjdE9uZTtcblxuQ1NTc2VsZWN0LmlzID0gaXM7XG5cbi8vbGVnYWN5IG1ldGhvZHMgKG1pZ2h0IGJlIHJlbW92ZWQpXG5DU1NzZWxlY3QucGFyc2UgPSBjb21waWxlO1xuQ1NTc2VsZWN0Lml0ZXJhdGUgPSBzZWxlY3RBbGw7XG5cbi8vaG9va3NcbkNTU3NlbGVjdC5fY29tcGlsZVVuc2FmZSA9IGNvbXBpbGVVbnNhZmU7XG5DU1NzZWxlY3QuX2NvbXBpbGVUb2tlbiA9IGNvbXBpbGVUb2tlbjtcbiJdfQ==