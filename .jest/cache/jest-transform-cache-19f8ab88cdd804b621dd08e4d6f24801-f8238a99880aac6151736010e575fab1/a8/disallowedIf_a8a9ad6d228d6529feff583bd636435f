c62adea28244b3d1dc1e64977aa9d231
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = disallowedIf;

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function disallowedIf(propType, otherPropName, otherPropType) {
  if (typeof propType !== 'function' || typeof propType.isRequired !== 'function') {
    throw new TypeError('a propType validator is required; propType validators must also provide `.isRequired`');
  }

  if (typeof otherPropName !== 'string') {
    throw new TypeError('other prop name must be a string');
  }

  if (typeof otherPropType !== 'function') {
    throw new TypeError('other prop type validator is required');
  }

  function disallowedIfRequired(props, propName, componentName) {
    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var error = propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));

    if (error) {
      return error;
    }

    if (props[otherPropName] == null) {
      return null;
    }

    var otherError = otherPropType.apply(void 0, [props, otherPropName, componentName].concat(rest));

    if (otherError) {
      return null;
    }

    return new Error("prop \u201C".concat(propName, "\u201D is disallowed when \u201C").concat(otherPropName, "\u201D matches the provided validator"));
  }

  var validator = function disallowedIfPropType(props, propName) {
    if (props[propName] == null) {
      return null;
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      rest[_key2 - 2] = arguments[_key2];
    }

    return disallowedIfRequired.apply(void 0, [props, propName].concat(rest));
  };

  validator.isRequired = disallowedIfRequired;
  return (0, _wrapValidator["default"])(validator, 'disallowedIf', {
    propType: propType,
    otherPropName: otherPropName,
    otherPropType: otherPropType
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaXNhbGxvd2VkSWYuanMiXSwibmFtZXMiOlsicHJvcFR5cGUiLCJyZXN0IiwiZXJyb3IiLCJwcm9wcyIsIm90aGVyRXJyb3IiLCJvdGhlclByb3BUeXBlIiwidmFsaWRhdG9yIiwiZGlzYWxsb3dlZElmUmVxdWlyZWQiLCJvdGhlclByb3BOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLDJCQUFBLENBQUE7Ozs7Ozs7O0FBRWUsU0FBQSxZQUFBLENBQUEsUUFBQSxFQUFBLGFBQUEsRUFBQSxhQUFBLEVBQThEO0FBQzNFLE1BQUksT0FBQSxRQUFBLEtBQUEsVUFBQSxJQUFrQyxPQUFPQSxRQUFRLENBQWYsVUFBQSxLQUF0QyxVQUFBLEVBQWlGO0FBQy9FLFVBQU0sSUFBQSxTQUFBLENBQU4sdUZBQU0sQ0FBTjtBQUNEOztBQUVELE1BQUksT0FBQSxhQUFBLEtBQUosUUFBQSxFQUF1QztBQUNyQyxVQUFNLElBQUEsU0FBQSxDQUFOLGtDQUFNLENBQU47QUFDRDs7QUFFRCxNQUFJLE9BQUEsYUFBQSxLQUFKLFVBQUEsRUFBeUM7QUFDdkMsVUFBTSxJQUFBLFNBQUEsQ0FBTix1Q0FBTSxDQUFOO0FBQ0Q7O0FBRUQsV0FBQSxvQkFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUF1RTtBQUFBLFNBQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkMsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElBQUEsQ0FBTkE7QUFBTTs7QUFDckUsUUFBTUMsS0FBSyxHQUFHRixRQUFRLENBQVJBLFVBQUFBLENBQUFBLEtBQUFBLENBQUFBLFFBQUFBLEVBQVEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBQSxNQUFBLENBQXRCLElBQXNCLENBQVJBLENBQWQ7O0FBQ0EsUUFBQSxLQUFBLEVBQVc7QUFDVCxhQUFBLEtBQUE7QUFDRDs7QUFFRCxRQUFJRyxLQUFLLENBQUxBLGFBQUssQ0FBTEEsSUFBSixJQUFBLEVBQWtDO0FBQ2hDLGFBQUEsSUFBQTtBQUNEOztBQUVELFFBQU1DLFVBQVUsR0FBR0MsYUFBYSxDQUFiQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFuQixJQUFtQkEsQ0FBQUEsQ0FBbkI7O0FBQ0EsUUFBQSxVQUFBLEVBQWdCO0FBQ2QsYUFBQSxJQUFBO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFBLEtBQUEsQ0FBQSxjQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQUEsa0NBQUEsRUFBQSxNQUFBLENBQUEsYUFBQSxFQUFQLHVDQUFPLENBQUEsQ0FBUDtBQUNEOztBQUVELE1BQU1DLFNBQVMsR0FBRyxTQUFBLG9CQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBd0Q7QUFDeEUsUUFBSUgsS0FBSyxDQUFMQSxRQUFLLENBQUxBLElBQUosSUFBQSxFQUE2QjtBQUMzQixhQUFBLElBQUE7QUFDRDs7QUFIdUUsU0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFORixJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsS0FBQSxDQUFOQTtBQUFNOztBQUl4RSxXQUFPTSxvQkFBb0IsQ0FBcEJBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLE1BQUFBLENBQVAsSUFBT0EsQ0FBQUEsQ0FBUDtBQUpGLEdBQUE7O0FBT0FELEVBQUFBLFNBQVMsQ0FBVEEsVUFBQUEsR0FBQUEsb0JBQUFBO0FBRUEsU0FBTyxDQUFBLEdBQUEsY0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxjQUFBLEVBQXlDO0FBQUVOLElBQUFBLFFBQVEsRUFBVixRQUFBO0FBQVlRLElBQUFBLGFBQWEsRUFBekIsYUFBQTtBQUEyQkgsSUFBQUEsYUFBYSxFQUFiQTtBQUEzQixHQUF6QyxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc2FsbG93ZWRJZihwcm9wVHlwZSwgb3RoZXJQcm9wTmFtZSwgb3RoZXJQcm9wVHlwZSkge1xuICBpZiAodHlwZW9mIHByb3BUeXBlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBwcm9wVHlwZS5pc1JlcXVpcmVkICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBwcm9wVHlwZSB2YWxpZGF0b3IgaXMgcmVxdWlyZWQ7IHByb3BUeXBlIHZhbGlkYXRvcnMgbXVzdCBhbHNvIHByb3ZpZGUgYC5pc1JlcXVpcmVkYCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvdGhlclByb3BOYW1lICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ290aGVyIHByb3AgbmFtZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIG90aGVyUHJvcFR5cGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvdGhlciBwcm9wIHR5cGUgdmFsaWRhdG9yIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBmdW5jdGlvbiBkaXNhbGxvd2VkSWZSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCBlcnJvciA9IHByb3BUeXBlLmlzUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHNbb3RoZXJQcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3Qgb3RoZXJFcnJvciA9IG90aGVyUHJvcFR5cGUocHJvcHMsIG90aGVyUHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICAgIGlmIChvdGhlckVycm9yKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgcHJvcCDigJwke3Byb3BOYW1lfeKAnSBpcyBkaXNhbGxvd2VkIHdoZW4g4oCcJHtvdGhlclByb3BOYW1lfeKAnSBtYXRjaGVzIHRoZSBwcm92aWRlZCB2YWxpZGF0b3JgKTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRvciA9IGZ1bmN0aW9uIGRpc2FsbG93ZWRJZlByb3BUeXBlKHByb3BzLCBwcm9wTmFtZSwgLi4ucmVzdCkge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBkaXNhbGxvd2VkSWZSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHZhbGlkYXRvci5pc1JlcXVpcmVkID0gZGlzYWxsb3dlZElmUmVxdWlyZWQ7XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCAnZGlzYWxsb3dlZElmJywgeyBwcm9wVHlwZSwgb3RoZXJQcm9wTmFtZSwgb3RoZXJQcm9wVHlwZSB9KTtcbn1cbiJdfQ==