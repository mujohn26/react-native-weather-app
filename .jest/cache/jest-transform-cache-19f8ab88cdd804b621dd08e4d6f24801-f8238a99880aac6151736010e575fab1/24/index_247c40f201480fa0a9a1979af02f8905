e2ad056677f2acccc553e5af3ef73500
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = differenceInBusinessDays;

var _index = _interopRequireDefault(require("../isValid/index.js"));

var _index2 = _interopRequireDefault(require("../isWeekend/index.js"));

var _index3 = _interopRequireDefault(require("../toDate/index.js"));

var _index4 = _interopRequireDefault(require("../differenceInCalendarDays/index.js"));

var _index5 = _interopRequireDefault(require("../addDays/index.js"));

var _index6 = _interopRequireDefault(require("../isSameDay/index.js"));

var _index7 = _interopRequireDefault(require("../_lib/toInteger/index.js"));

var _index8 = _interopRequireDefault(require("../_lib/requiredArgs/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {
  (0, _index8.default)(2, arguments);
  var dateLeft = (0, _index3.default)(dirtyDateLeft);
  var dateRight = (0, _index3.default)(dirtyDateRight);
  if (!(0, _index.default)(dateLeft) || !(0, _index.default)(dateRight)) return new Date(NaN);
  var calendarDifference = (0, _index4.default)(dateLeft, dateRight);
  var sign = calendarDifference < 0 ? -1 : 1;
  var weeks = (0, _index7.default)(calendarDifference / 7);
  var result = weeks * 5;
  dateRight = (0, _index5.default)(dateRight, weeks * 7);

  while (!(0, _index6.default)(dateLeft, dateRight)) {
    result += (0, _index2.default)(dateRight) ? 0 : sign;
    dateRight = (0, _index5.default)(dateRight, sign);
  }

  return result === 0 ? 0 : result;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImRpZmZlcmVuY2VJbkJ1c2luZXNzRGF5cyIsIl9pbmRleCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsIl9pbmRleDYiLCJfaW5kZXg3IiwiX2luZGV4OCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJhcmd1bWVudHMiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsIkRhdGUiLCJOYU4iLCJjYWxlbmRhckRpZmZlcmVuY2UiLCJzaWduIiwid2Vla3MiLCJyZXN1bHQiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyx3QkFBbEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyx1QkFBUixDQUFuQzs7QUFFQSxJQUFJQyxPQUFPLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLHlCQUFSLENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sc0JBQVIsQ0FBcEM7O0FBRUEsSUFBSUcsT0FBTyxHQUFHSixzQkFBc0IsQ0FBQ0MsT0FBTyx3Q0FBUixDQUFwQzs7QUFFQSxJQUFJSSxPQUFPLEdBQUdMLHNCQUFzQixDQUFDQyxPQUFPLHVCQUFSLENBQXBDOztBQUVBLElBQUlLLE9BQU8sR0FBR04sc0JBQXNCLENBQUNDLE9BQU8seUJBQVIsQ0FBcEM7O0FBRUEsSUFBSU0sT0FBTyxHQUFHUCxzQkFBc0IsQ0FBQ0MsT0FBTyw4QkFBUixDQUFwQzs7QUFFQSxJQUFJTyxPQUFPLEdBQUdSLHNCQUFzQixDQUFDQyxPQUFPLGlDQUFSLENBQXBDOztBQUVBLFNBQVNELHNCQUFULENBQWdDUyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFWixJQUFBQSxPQUFPLEVBQUVZO0FBQVgsR0FBckM7QUFBd0Q7O0FBMkIvRixTQUFTWCx3QkFBVCxDQUFrQ2EsYUFBbEMsRUFBaURDLGNBQWpELEVBQWlFO0FBQy9ELEdBQUMsR0FBR0osT0FBTyxDQUFDWCxPQUFaLEVBQXFCLENBQXJCLEVBQXdCZ0IsU0FBeEI7QUFDQSxNQUFJQyxRQUFRLEdBQUcsQ0FBQyxHQUFHWCxPQUFPLENBQUNOLE9BQVosRUFBcUJjLGFBQXJCLENBQWY7QUFDQSxNQUFJSSxTQUFTLEdBQUcsQ0FBQyxHQUFHWixPQUFPLENBQUNOLE9BQVosRUFBcUJlLGNBQXJCLENBQWhCO0FBQ0EsTUFBSSxDQUFDLENBQUMsR0FBR2IsTUFBTSxDQUFDRixPQUFYLEVBQW9CaUIsUUFBcEIsQ0FBRCxJQUFrQyxDQUFDLENBQUMsR0FBR2YsTUFBTSxDQUFDRixPQUFYLEVBQW9Ca0IsU0FBcEIsQ0FBdkMsRUFBdUUsT0FBTyxJQUFJQyxJQUFKLENBQVNDLEdBQVQsQ0FBUDtBQUN2RSxNQUFJQyxrQkFBa0IsR0FBRyxDQUFDLEdBQUdkLE9BQU8sQ0FBQ1AsT0FBWixFQUFxQmlCLFFBQXJCLEVBQStCQyxTQUEvQixDQUF6QjtBQUNBLE1BQUlJLElBQUksR0FBR0Qsa0JBQWtCLEdBQUcsQ0FBckIsR0FBeUIsQ0FBQyxDQUExQixHQUE4QixDQUF6QztBQUNBLE1BQUlFLEtBQUssR0FBRyxDQUFDLEdBQUdiLE9BQU8sQ0FBQ1YsT0FBWixFQUFxQnFCLGtCQUFrQixHQUFHLENBQTFDLENBQVo7QUFDQSxNQUFJRyxNQUFNLEdBQUdELEtBQUssR0FBRyxDQUFyQjtBQUNBTCxFQUFBQSxTQUFTLEdBQUcsQ0FBQyxHQUFHVixPQUFPLENBQUNSLE9BQVosRUFBcUJrQixTQUFyQixFQUFnQ0ssS0FBSyxHQUFHLENBQXhDLENBQVo7O0FBRUEsU0FBTyxDQUFDLENBQUMsR0FBR2QsT0FBTyxDQUFDVCxPQUFaLEVBQXFCaUIsUUFBckIsRUFBK0JDLFNBQS9CLENBQVIsRUFBbUQ7QUFFakRNLElBQUFBLE1BQU0sSUFBSSxDQUFDLEdBQUduQixPQUFPLENBQUNMLE9BQVosRUFBcUJrQixTQUFyQixJQUFrQyxDQUFsQyxHQUFzQ0ksSUFBaEQ7QUFDQUosSUFBQUEsU0FBUyxHQUFHLENBQUMsR0FBR1YsT0FBTyxDQUFDUixPQUFaLEVBQXFCa0IsU0FBckIsRUFBZ0NJLElBQWhDLENBQVo7QUFDRDs7QUFFRCxTQUFPRSxNQUFNLEtBQUssQ0FBWCxHQUFlLENBQWYsR0FBbUJBLE1BQTFCO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQzNCLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRpZmZlcmVuY2VJbkJ1c2luZXNzRGF5cztcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2lzVmFsaWQvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2lzV2Vla2VuZC9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2FkZERheXMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4NiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2lzU2FtZURheS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4OCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5CdXNpbmVzc0RheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgYnVzaW5lc3MgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGJ1c2luZXNzIGRheSBwZXJpb2RzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICogQnVzaW5lc3MgZGF5cyBiZWluZyBkYXlzIHRoYXQgYXJlbnQgaW4gdGhlIHdlZWtlbmQuXG4gKiBMaWtlIGBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXNgLCB0aGUgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgdGltZXMgZnJvbVxuICogdGhlIGRhdGVzIGJlZm9yZSBjYWxjdWxhdGluZyB0aGUgZGlmZmVyZW5jZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGJ1c2luZXNzIGRheXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgYnVzaW5lc3MgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMTAgSmFudWFyeSAyMDE0IGFuZCAyMCBKdWx5IDIwMTQ/XG4gKiB2YXIgcmVzdWx0ID0gZGlmZmVyZW5jZUluQnVzaW5lc3NEYXlzKFxuICogICBuZXcgRGF0ZSgyMDE0LCA2LCAyMCksXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDAsIDEwKVxuICogKVxuICogLy89PiAxMzZcbiAqL1xuZnVuY3Rpb24gZGlmZmVyZW5jZUluQnVzaW5lc3NEYXlzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gICgwLCBfaW5kZXg4LmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdCA9ICgwLCBfaW5kZXgzLmRlZmF1bHQpKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gKDAsIF9pbmRleDMuZGVmYXVsdCkoZGlydHlEYXRlUmlnaHQpO1xuICBpZiAoISgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZUxlZnQpIHx8ICEoMCwgX2luZGV4LmRlZmF1bHQpKGRhdGVSaWdodCkpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgY2FsZW5kYXJEaWZmZXJlbmNlID0gKDAsIF9pbmRleDQuZGVmYXVsdCkoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XG4gIHZhciBzaWduID0gY2FsZW5kYXJEaWZmZXJlbmNlIDwgMCA/IC0xIDogMTtcbiAgdmFyIHdlZWtzID0gKDAsIF9pbmRleDcuZGVmYXVsdCkoY2FsZW5kYXJEaWZmZXJlbmNlIC8gNyk7XG4gIHZhciByZXN1bHQgPSB3ZWVrcyAqIDU7XG4gIGRhdGVSaWdodCA9ICgwLCBfaW5kZXg1LmRlZmF1bHQpKGRhdGVSaWdodCwgd2Vla3MgKiA3KTsgLy8gdGhlIGxvb3AgYmVsb3cgd2lsbCBydW4gYXQgbW9zdCA2IHRpbWVzIHRvIGFjY291bnQgZm9yIHRoZSByZW1haW5pbmcgZGF5cyB0aGF0IGRvbid0IG1ha2V1cCBhIGZ1bGwgd2Vla1xuXG4gIHdoaWxlICghKDAsIF9pbmRleDYuZGVmYXVsdCkoZGF0ZUxlZnQsIGRhdGVSaWdodCkpIHtcbiAgICAvLyBzaWduIGlzIHVzZWQgdG8gYWNjb3VudCBmb3IgYm90aCBuZWdhdGl2ZSBhbmQgcG9zaXRpdmUgZGlmZmVyZW5jZXNcbiAgICByZXN1bHQgKz0gKDAsIF9pbmRleDIuZGVmYXVsdCkoZGF0ZVJpZ2h0KSA/IDAgOiBzaWduO1xuICAgIGRhdGVSaWdodCA9ICgwLCBfaW5kZXg1LmRlZmF1bHQpKGRhdGVSaWdodCwgc2lnbik7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ID09PSAwID8gMCA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7Il19