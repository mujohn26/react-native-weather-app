{"version":3,"sources":["App.component.js"],"names":["App","props","state","lat","lan","getWeather","styles","container","currentWeather","weatherData","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","mapStateToProps","weatherReducer","weather","data","connectedAppScreen","getWeatherSuccess","getWeatherFailure"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAEOA,G;;;;;AACH,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAChBC,MAAAA,GAAG,EAAC,EADY;AAEhBC,MAAAA,GAAG,EAAC;AAFY,KAAb;AAFe;AAMlB;;;;gDAC0B;AAAA,UAClBC,UADkB,GACJ,KAAKJ,KADD,CAClBI,UADkB;AAGzBA,MAAAA,UAAU;AACb;;;6BACO;AACR,aACE,6BAAC,iBAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,SACE,KAAKN,KAAL,CAAWO,cAAX,IAA2B,IAA3B,GAAgC,6BAAC,gBAAD;AAAS,QAAA,cAAc,EAAE,KAAKP,KAAL,CAAWO,cAApC;AAAoD,QAAA,WAAW,EAAE,KAAKP,KAAL,CAAWQ;AAA5E,QAAhC,GAA2H,6BAAC,eAAD,OAD7H,CADF;AAIG;;;EAlBcC,gB;;AAoBnB,IAAMJ,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AACTM,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;;AAQO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACf,KAAD,EAAW;AACtC,SAAO;AACLM,IAAAA,cAAc,EAAEN,KAAK,CAACgB,cAAN,CAAqBC,OADhC;AAELV,IAAAA,WAAW,EAACP,KAAK,CAACgB,cAAN,CAAqBE;AAF5B,GAAP;AAID,CALI;;;AAMP,IAAMC,kBAAkB,GAAG,yBAAQJ,eAAR,EAAyB;AAChDZ,EAAAA,UAAU,EAAVA,yBADgD;AACrCiB,EAAAA,iBAAiB,EAAjBA,gCADqC;AACnBC,EAAAA,iBAAiB,EAAjBA;AADmB,CAAzB,EAExBvB,GAFwB,CAA3B;eAIeqB,kB","sourcesContent":["import React,{Component} from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport {connect} from 'react-redux';\nimport Weather from './weather.component';\nimport Loading from '../helpers/Loader';\nimport {getWeather,getWeatherSuccess,getWeatherFailure} from '../redux/actions/weatherAction';\n \nclass  App extends Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n     lat:\"\",\n     lan:\"\"\n      }\n    }\n    UNSAFE_componentWillMount(){\n      const {getWeather} = this.props;\n      // const {lat,lan}=this.state;\n      getWeather();\n  }\n  render(){\n  return ( \n    <View style={styles.container}>\n     {this.props.currentWeather!=null?<Weather currentWeather={this.props.currentWeather} weatherData={this.props.weatherData}/>:<Loading/>}\n    </View>\n  );}\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1, \n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\nexport const mapStateToProps = (state) => {\n    return {\n      currentWeather: state.weatherReducer.weather,\n      weatherData:state.weatherReducer.data\n    };\n  };\nconst connectedAppScreen = connect(mapStateToProps, {\n    getWeather,getWeatherSuccess,getWeatherFailure\n})(App);\n\nexport default connectedAppScreen;"]}