57fe04b380f7d36a2ceb5d126a782bf5
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Context = require("./Context");

var _Subscription = _interopRequireDefault(require("../utils/Subscription"));

function Provider(_ref) {
  var store = _ref.store,
      context = _ref.context,
      children = _ref.children;
  var contextValue = (0, _react.useMemo)(function () {
    var subscription = new _Subscription["default"](store);
    subscription.onStateChange = subscription.notifyNestedSubs;
    return {
      store: store,
      subscription: subscription
    };
  }, [store]);
  var previousState = (0, _react.useMemo)(function () {
    return store.getState();
  }, [store]);
  (0, _react.useEffect)(function () {
    var subscription = contextValue.subscription;
    subscription.trySubscribe();

    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }

    return function () {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || _Context.ReactReduxContext;
  return _react["default"].createElement(Context.Provider, {
    value: contextValue
  }, children);
}

if (process.env.NODE_ENV !== 'production') {
  Provider.propTypes = {
    store: _propTypes["default"].shape({
      subscribe: _propTypes["default"].func.isRequired,
      dispatch: _propTypes["default"].func.isRequired,
      getState: _propTypes["default"].func.isRequired
    }),
    context: _propTypes["default"].object,
    children: _propTypes["default"].any
  };
}

var _default = Provider;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJleHBvcnRzIiwiX19lc01vZHVsZSIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfQ29udGV4dCIsIl9TdWJzY3JpcHRpb24iLCJQcm92aWRlciIsIl9yZWYiLCJzdG9yZSIsImNvbnRleHQiLCJjaGlsZHJlbiIsImNvbnRleHRWYWx1ZSIsInVzZU1lbW8iLCJzdWJzY3JpcHRpb24iLCJvblN0YXRlQ2hhbmdlIiwibm90aWZ5TmVzdGVkU3VicyIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsInVzZUVmZmVjdCIsInRyeVN1YnNjcmliZSIsInRyeVVuc3Vic2NyaWJlIiwiQ29udGV4dCIsIlJlYWN0UmVkdXhDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsInZhbHVlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwicHJvcFR5cGVzIiwic2hhcGUiLCJzdWJzY3JpYmUiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImRpc3BhdGNoIiwib2JqZWN0IiwiYW55IiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQUQsQ0FBcEM7O0FBRUEsSUFBSUMsdUJBQXVCLEdBQUdELE9BQU8sQ0FBQywrQ0FBRCxDQUFyQzs7QUFFQUUsT0FBTyxDQUFDQyxVQUFSLEdBQXFCLElBQXJCO0FBQ0FELE9BQU8sQ0FBQyxTQUFELENBQVAsR0FBcUIsS0FBSyxDQUExQjs7QUFFQSxJQUFJRSxNQUFNLEdBQUdILHVCQUF1QixDQUFDRCxPQUFPLENBQUMsT0FBRCxDQUFSLENBQXBDOztBQUVBLElBQUlLLFVBQVUsR0FBR04sc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFELENBQVIsQ0FBdkM7O0FBRUEsSUFBSU0sUUFBUSxHQUFHTixPQUFPLGFBQXRCOztBQUVBLElBQUlPLGFBQWEsR0FBR1Isc0JBQXNCLENBQUNDLE9BQU8seUJBQVIsQ0FBMUM7O0FBRUEsU0FBU1EsUUFBVCxDQUFrQkMsSUFBbEIsRUFBd0I7QUFDdEIsTUFBSUMsS0FBSyxHQUFHRCxJQUFJLENBQUNDLEtBQWpCO0FBQUEsTUFDSUMsT0FBTyxHQUFHRixJQUFJLENBQUNFLE9BRG5CO0FBQUEsTUFFSUMsUUFBUSxHQUFHSCxJQUFJLENBQUNHLFFBRnBCO0FBR0EsTUFBSUMsWUFBWSxHQUFHLENBQUMsR0FBR1QsTUFBTSxDQUFDVSxPQUFYLEVBQW9CLFlBQVk7QUFDakQsUUFBSUMsWUFBWSxHQUFHLElBQUlSLGFBQWEsQ0FBQyxTQUFELENBQWpCLENBQTZCRyxLQUE3QixDQUFuQjtBQUNBSyxJQUFBQSxZQUFZLENBQUNDLGFBQWIsR0FBNkJELFlBQVksQ0FBQ0UsZ0JBQTFDO0FBQ0EsV0FBTztBQUNMUCxNQUFBQSxLQUFLLEVBQUVBLEtBREY7QUFFTEssTUFBQUEsWUFBWSxFQUFFQTtBQUZULEtBQVA7QUFJRCxHQVBrQixFQU9oQixDQUFDTCxLQUFELENBUGdCLENBQW5CO0FBUUEsTUFBSVEsYUFBYSxHQUFHLENBQUMsR0FBR2QsTUFBTSxDQUFDVSxPQUFYLEVBQW9CLFlBQVk7QUFDbEQsV0FBT0osS0FBSyxDQUFDUyxRQUFOLEVBQVA7QUFDRCxHQUZtQixFQUVqQixDQUFDVCxLQUFELENBRmlCLENBQXBCO0FBR0EsR0FBQyxHQUFHTixNQUFNLENBQUNnQixTQUFYLEVBQXNCLFlBQVk7QUFDaEMsUUFBSUwsWUFBWSxHQUFHRixZQUFZLENBQUNFLFlBQWhDO0FBQ0FBLElBQUFBLFlBQVksQ0FBQ00sWUFBYjs7QUFFQSxRQUFJSCxhQUFhLEtBQUtSLEtBQUssQ0FBQ1MsUUFBTixFQUF0QixFQUF3QztBQUN0Q0osTUFBQUEsWUFBWSxDQUFDRSxnQkFBYjtBQUNEOztBQUVELFdBQU8sWUFBWTtBQUNqQkYsTUFBQUEsWUFBWSxDQUFDTyxjQUFiO0FBQ0FQLE1BQUFBLFlBQVksQ0FBQ0MsYUFBYixHQUE2QixJQUE3QjtBQUNELEtBSEQ7QUFJRCxHQVpELEVBWUcsQ0FBQ0gsWUFBRCxFQUFlSyxhQUFmLENBWkg7QUFhQSxNQUFJSyxPQUFPLEdBQUdaLE9BQU8sSUFBSUwsUUFBUSxDQUFDa0IsaUJBQWxDO0FBQ0EsU0FBb0JwQixNQUFNLENBQUMsU0FBRCxDQUFOLENBQWtCcUIsYUFBbEIsQ0FBZ0NGLE9BQU8sQ0FBQ2YsUUFBeEMsRUFBa0Q7QUFDcEVrQixJQUFBQSxLQUFLLEVBQUViO0FBRDZELEdBQWxELEVBRWpCRCxRQUZpQixDQUFwQjtBQUdEOztBQUVELElBQUllLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQTdCLEVBQTJDO0FBQ3pDckIsRUFBQUEsUUFBUSxDQUFDc0IsU0FBVCxHQUFxQjtBQUNuQnBCLElBQUFBLEtBQUssRUFBRUwsVUFBVSxDQUFDLFNBQUQsQ0FBVixDQUFzQjBCLEtBQXRCLENBQTRCO0FBQ2pDQyxNQUFBQSxTQUFTLEVBQUUzQixVQUFVLENBQUMsU0FBRCxDQUFWLENBQXNCNEIsSUFBdEIsQ0FBMkJDLFVBREw7QUFFakNDLE1BQUFBLFFBQVEsRUFBRTlCLFVBQVUsQ0FBQyxTQUFELENBQVYsQ0FBc0I0QixJQUF0QixDQUEyQkMsVUFGSjtBQUdqQ2YsTUFBQUEsUUFBUSxFQUFFZCxVQUFVLENBQUMsU0FBRCxDQUFWLENBQXNCNEIsSUFBdEIsQ0FBMkJDO0FBSEosS0FBNUIsQ0FEWTtBQU1uQnZCLElBQUFBLE9BQU8sRUFBRU4sVUFBVSxDQUFDLFNBQUQsQ0FBVixDQUFzQitCLE1BTlo7QUFPbkJ4QixJQUFBQSxRQUFRLEVBQUVQLFVBQVUsQ0FBQyxTQUFELENBQVYsQ0FBc0JnQztBQVBiLEdBQXJCO0FBU0Q7O0FBRUQsSUFBSUMsUUFBUSxHQUFHOUIsUUFBZjtBQUNBTixPQUFPLENBQUMsU0FBRCxDQUFQLEdBQXFCb0MsUUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmRcIik7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfQ29udGV4dCA9IHJlcXVpcmUoXCIuL0NvbnRleHRcIik7XG5cbnZhciBfU3Vic2NyaXB0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvU3Vic2NyaXB0aW9uXCIpKTtcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9ICgwLCBfcmVhY3QudXNlTWVtbykoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgX1N1YnNjcmlwdGlvbltcImRlZmF1bHRcIl0oc3RvcmUpO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgfTtcbiAgfSwgW3N0b3JlXSk7XG4gIHZhciBwcmV2aW91c1N0YXRlID0gKDAsIF9yZWFjdC51c2VNZW1vKShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHN0b3JlLmdldFN0YXRlKCk7XG4gIH0sIFtzdG9yZV0pO1xuICAoMCwgX3JlYWN0LnVzZUVmZmVjdCkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTtcblxuICAgIGlmIChwcmV2aW91c1N0YXRlICE9PSBzdG9yZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicygpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gbnVsbDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIHZhciBDb250ZXh0ID0gY29udGV4dCB8fCBfQ29udGV4dC5SZWFjdFJlZHV4Q29udGV4dDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gICAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmFueVxuICB9O1xufVxuXG52YXIgX2RlZmF1bHQgPSBQcm92aWRlcjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il19