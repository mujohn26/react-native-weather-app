886f5c802c85e4d7fa8efe0bd145691c
(function (root, factory) {
  if (typeof module === 'object' && module.exports) {
    module.exports = factory();
  } else {
    root.nearley = factory();
  }
})(this, function () {
  function Rule(name, symbols, postprocess) {
    this.id = ++Rule.highestId;
    this.name = name;
    this.symbols = symbols;
    this.postprocess = postprocess;
    return this;
  }

  Rule.highestId = 0;

  Rule.prototype.toString = function (withCursorAt) {
    var symbolSequence = typeof withCursorAt === "undefined" ? this.symbols.map(getSymbolShortDisplay).join(' ') : this.symbols.slice(0, withCursorAt).map(getSymbolShortDisplay).join(' ') + " ● " + this.symbols.slice(withCursorAt).map(getSymbolShortDisplay).join(' ');
    return this.name + " → " + symbolSequence;
  };

  function State(rule, dot, reference, wantedBy) {
    this.rule = rule;
    this.dot = dot;
    this.reference = reference;
    this.data = [];
    this.wantedBy = wantedBy;
    this.isComplete = this.dot === rule.symbols.length;
  }

  State.prototype.toString = function () {
    return "{" + this.rule.toString(this.dot) + "}, from: " + (this.reference || 0);
  };

  State.prototype.nextState = function (child) {
    var state = new State(this.rule, this.dot + 1, this.reference, this.wantedBy);
    state.left = this;
    state.right = child;

    if (state.isComplete) {
      state.data = state.build();
      state.right = undefined;
    }

    return state;
  };

  State.prototype.build = function () {
    var children = [];
    var node = this;

    do {
      children.push(node.right.data);
      node = node.left;
    } while (node.left);

    children.reverse();
    return children;
  };

  State.prototype.finish = function () {
    if (this.rule.postprocess) {
      this.data = this.rule.postprocess(this.data, this.reference, Parser.fail);
    }
  };

  function Column(grammar, index) {
    this.grammar = grammar;
    this.index = index;
    this.states = [];
    this.wants = {};
    this.scannable = [];
    this.completed = {};
  }

  Column.prototype.process = function (nextColumn) {
    var states = this.states;
    var wants = this.wants;
    var completed = this.completed;

    for (var w = 0; w < states.length; w++) {
      var state = states[w];

      if (state.isComplete) {
        state.finish();

        if (state.data !== Parser.fail) {
          var wantedBy = state.wantedBy;

          for (var i = wantedBy.length; i--;) {
            var left = wantedBy[i];
            this.complete(left, state);
          }

          if (state.reference === this.index) {
            var exp = state.rule.name;
            (this.completed[exp] = this.completed[exp] || []).push(state);
          }
        }
      } else {
        var exp = state.rule.symbols[state.dot];

        if (typeof exp !== 'string') {
          this.scannable.push(state);
          continue;
        }

        if (wants[exp]) {
          wants[exp].push(state);

          if (completed.hasOwnProperty(exp)) {
            var nulls = completed[exp];

            for (var i = 0; i < nulls.length; i++) {
              var right = nulls[i];
              this.complete(state, right);
            }
          }
        } else {
          wants[exp] = [state];
          this.predict(exp);
        }
      }
    }
  };

  Column.prototype.predict = function (exp) {
    var rules = this.grammar.byName[exp] || [];

    for (var i = 0; i < rules.length; i++) {
      var r = rules[i];
      var wantedBy = this.wants[exp];
      var s = new State(r, 0, this.index, wantedBy);
      this.states.push(s);
    }
  };

  Column.prototype.complete = function (left, right) {
    var copy = left.nextState(right);
    this.states.push(copy);
  };

  function Grammar(rules, start) {
    this.rules = rules;
    this.start = start || this.rules[0].name;
    var byName = this.byName = {};
    this.rules.forEach(function (rule) {
      if (!byName.hasOwnProperty(rule.name)) {
        byName[rule.name] = [];
      }

      byName[rule.name].push(rule);
    });
  }

  Grammar.fromCompiled = function (rules, start) {
    var lexer = rules.Lexer;

    if (rules.ParserStart) {
      start = rules.ParserStart;
      rules = rules.ParserRules;
    }

    var rules = rules.map(function (r) {
      return new Rule(r.name, r.symbols, r.postprocess);
    });
    var g = new Grammar(rules, start);
    g.lexer = lexer;
    return g;
  };

  function StreamLexer() {
    this.reset("");
  }

  StreamLexer.prototype.reset = function (data, state) {
    this.buffer = data;
    this.index = 0;
    this.line = state ? state.line : 1;
    this.lastLineBreak = state ? -state.col : 0;
  };

  StreamLexer.prototype.next = function () {
    if (this.index < this.buffer.length) {
      var ch = this.buffer[this.index++];

      if (ch === '\n') {
        this.line += 1;
        this.lastLineBreak = this.index;
      }

      return {
        value: ch
      };
    }
  };

  StreamLexer.prototype.save = function () {
    return {
      line: this.line,
      col: this.index - this.lastLineBreak
    };
  };

  StreamLexer.prototype.formatError = function (token, message) {
    var buffer = this.buffer;

    if (typeof buffer === 'string') {
      var lines = buffer.split("\n").slice(Math.max(0, this.line - 5), this.line);
      var nextLineBreak = buffer.indexOf('\n', this.index);
      if (nextLineBreak === -1) nextLineBreak = buffer.length;
      var col = this.index - this.lastLineBreak;
      var lastLineDigits = String(this.line).length;
      message += " at line " + this.line + " col " + col + ":\n\n";
      message += lines.map(function (line, i) {
        return pad(this.line - lines.length + i + 1, lastLineDigits) + " " + line;
      }, this).join("\n");
      message += "\n" + pad("", lastLineDigits + col) + "^\n";
      return message;
    } else {
      return message + " at index " + (this.index - 1);
    }

    function pad(n, length) {
      var s = String(n);
      return Array(length - s.length + 1).join(" ") + s;
    }
  };

  function Parser(rules, start, options) {
    if (rules instanceof Grammar) {
      var grammar = rules;
      var options = start;
    } else {
      var grammar = Grammar.fromCompiled(rules, start);
    }

    this.grammar = grammar;
    this.options = {
      keepHistory: false,
      lexer: grammar.lexer || new StreamLexer()
    };

    for (var key in options || {}) {
      this.options[key] = options[key];
    }

    this.lexer = this.options.lexer;
    this.lexerState = undefined;
    var column = new Column(grammar, 0);
    var table = this.table = [column];
    column.wants[grammar.start] = [];
    column.predict(grammar.start);
    column.process();
    this.current = 0;
  }

  Parser.fail = {};

  Parser.prototype.feed = function (chunk) {
    var lexer = this.lexer;
    lexer.reset(chunk, this.lexerState);
    var token;

    while (true) {
      try {
        token = lexer.next();

        if (!token) {
          break;
        }
      } catch (e) {
        var nextColumn = new Column(this.grammar, this.current + 1);
        this.table.push(nextColumn);
        var err = new Error(this.reportLexerError(e));
        err.offset = this.current;
        err.token = e.token;
        throw err;
      }

      var column = this.table[this.current];

      if (!this.options.keepHistory) {
        delete this.table[this.current - 1];
      }

      var n = this.current + 1;
      var nextColumn = new Column(this.grammar, n);
      this.table.push(nextColumn);
      var literal = token.text !== undefined ? token.text : token.value;
      var value = lexer.constructor === StreamLexer ? token.value : token;
      var scannable = column.scannable;

      for (var w = scannable.length; w--;) {
        var state = scannable[w];
        var expect = state.rule.symbols[state.dot];

        if (expect.test ? expect.test(value) : expect.type ? expect.type === token.type : expect.literal === literal) {
          var next = state.nextState({
            data: value,
            token: token,
            isToken: true,
            reference: n - 1
          });
          nextColumn.states.push(next);
        }
      }

      nextColumn.process();

      if (nextColumn.states.length === 0) {
        var err = new Error(this.reportError(token));
        err.offset = this.current;
        err.token = token;
        throw err;
      }

      if (this.options.keepHistory) {
        column.lexerState = lexer.save();
      }

      this.current++;
    }

    if (column) {
      this.lexerState = lexer.save();
    }

    this.results = this.finish();
    return this;
  };

  Parser.prototype.reportLexerError = function (lexerError) {
    var tokenDisplay, lexerMessage;
    var token = lexerError.token;

    if (token) {
      tokenDisplay = "input " + JSON.stringify(token.text[0]) + " (lexer error)";
      lexerMessage = this.lexer.formatError(token, "Syntax error");
    } else {
      tokenDisplay = "input (lexer error)";
      lexerMessage = lexerError.message;
    }

    return this.reportErrorCommon(lexerMessage, tokenDisplay);
  };

  Parser.prototype.reportError = function (token) {
    var tokenDisplay = (token.type ? token.type + " token: " : "") + JSON.stringify(token.value !== undefined ? token.value : token);
    var lexerMessage = this.lexer.formatError(token, "Syntax error");
    return this.reportErrorCommon(lexerMessage, tokenDisplay);
  };

  Parser.prototype.reportErrorCommon = function (lexerMessage, tokenDisplay) {
    var lines = [];
    lines.push(lexerMessage);
    var lastColumnIndex = this.table.length - 2;
    var lastColumn = this.table[lastColumnIndex];
    var expectantStates = lastColumn.states.filter(function (state) {
      var nextSymbol = state.rule.symbols[state.dot];
      return nextSymbol && typeof nextSymbol !== "string";
    });

    if (expectantStates.length === 0) {
      lines.push('Unexpected ' + tokenDisplay + '. I did not expect any more input. Here is the state of my parse table:\n');
      this.displayStateStack(lastColumn.states, lines);
    } else {
      lines.push('Unexpected ' + tokenDisplay + '. Instead, I was expecting to see one of the following:\n');
      var stateStacks = expectantStates.map(function (state) {
        return this.buildFirstStateStack(state, []) || [state];
      }, this);
      stateStacks.forEach(function (stateStack) {
        var state = stateStack[0];
        var nextSymbol = state.rule.symbols[state.dot];
        var symbolDisplay = this.getSymbolDisplay(nextSymbol);
        lines.push('A ' + symbolDisplay + ' based on:');
        this.displayStateStack(stateStack, lines);
      }, this);
    }

    lines.push("");
    return lines.join("\n");
  };

  Parser.prototype.displayStateStack = function (stateStack, lines) {
    var lastDisplay;
    var sameDisplayCount = 0;

    for (var j = 0; j < stateStack.length; j++) {
      var state = stateStack[j];
      var display = state.rule.toString(state.dot);

      if (display === lastDisplay) {
        sameDisplayCount++;
      } else {
        if (sameDisplayCount > 0) {
          lines.push('    ^ ' + sameDisplayCount + ' more lines identical to this');
        }

        sameDisplayCount = 0;
        lines.push('    ' + display);
      }

      lastDisplay = display;
    }
  };

  Parser.prototype.getSymbolDisplay = function (symbol) {
    return getSymbolLongDisplay(symbol);
  };

  Parser.prototype.buildFirstStateStack = function (state, visited) {
    if (visited.indexOf(state) !== -1) {
      return null;
    }

    if (state.wantedBy.length === 0) {
      return [state];
    }

    var prevState = state.wantedBy[0];
    var childVisited = [state].concat(visited);
    var childResult = this.buildFirstStateStack(prevState, childVisited);

    if (childResult === null) {
      return null;
    }

    return [state].concat(childResult);
  };

  Parser.prototype.save = function () {
    var column = this.table[this.current];
    column.lexerState = this.lexerState;
    return column;
  };

  Parser.prototype.restore = function (column) {
    var index = column.index;
    this.current = index;
    this.table[index] = column;
    this.table.splice(index + 1);
    this.lexerState = column.lexerState;
    this.results = this.finish();
  };

  Parser.prototype.rewind = function (index) {
    if (!this.options.keepHistory) {
      throw new Error('set option `keepHistory` to enable rewinding');
    }

    this.restore(this.table[index]);
  };

  Parser.prototype.finish = function () {
    var considerations = [];
    var start = this.grammar.start;
    var column = this.table[this.table.length - 1];
    column.states.forEach(function (t) {
      if (t.rule.name === start && t.dot === t.rule.symbols.length && t.reference === 0 && t.data !== Parser.fail) {
        considerations.push(t);
      }
    });
    return considerations.map(function (c) {
      return c.data;
    });
  };

  function getSymbolLongDisplay(symbol) {
    var type = typeof symbol;

    if (type === "string") {
      return symbol;
    } else if (type === "object") {
      if (symbol.literal) {
        return JSON.stringify(symbol.literal);
      } else if (symbol instanceof RegExp) {
        return 'character matching ' + symbol;
      } else if (symbol.type) {
        return symbol.type + ' token';
      } else if (symbol.test) {
        return 'token matching ' + String(symbol.test);
      } else {
        throw new Error('Unknown symbol type: ' + symbol);
      }
    }
  }

  function getSymbolShortDisplay(symbol) {
    var type = typeof symbol;

    if (type === "string") {
      return symbol;
    } else if (type === "object") {
      if (symbol.literal) {
        return JSON.stringify(symbol.literal);
      } else if (symbol instanceof RegExp) {
        return symbol.toString();
      } else if (symbol.type) {
        return '%' + symbol.type;
      } else if (symbol.test) {
        return '<' + String(symbol.test) + '>';
      } else {
        throw new Error('Unknown symbol type: ' + symbol);
      }
    }
  }

  return {
    Parser: Parser,
    Grammar: Grammar,
    Rule: Rule
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5lYXJsZXkuanMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJtb2R1bGUiLCJleHBvcnRzIiwibmVhcmxleSIsIlJ1bGUiLCJuYW1lIiwic3ltYm9scyIsInBvc3Rwcm9jZXNzIiwiaWQiLCJoaWdoZXN0SWQiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsIndpdGhDdXJzb3JBdCIsInN5bWJvbFNlcXVlbmNlIiwibWFwIiwiZ2V0U3ltYm9sU2hvcnREaXNwbGF5Iiwiam9pbiIsInNsaWNlIiwiU3RhdGUiLCJydWxlIiwiZG90IiwicmVmZXJlbmNlIiwid2FudGVkQnkiLCJkYXRhIiwiaXNDb21wbGV0ZSIsImxlbmd0aCIsIm5leHRTdGF0ZSIsImNoaWxkIiwic3RhdGUiLCJsZWZ0IiwicmlnaHQiLCJidWlsZCIsInVuZGVmaW5lZCIsImNoaWxkcmVuIiwibm9kZSIsInB1c2giLCJyZXZlcnNlIiwiZmluaXNoIiwiUGFyc2VyIiwiZmFpbCIsIkNvbHVtbiIsImdyYW1tYXIiLCJpbmRleCIsInN0YXRlcyIsIndhbnRzIiwic2Nhbm5hYmxlIiwiY29tcGxldGVkIiwicHJvY2VzcyIsIm5leHRDb2x1bW4iLCJ3IiwiaSIsImNvbXBsZXRlIiwiZXhwIiwiaGFzT3duUHJvcGVydHkiLCJudWxscyIsInByZWRpY3QiLCJydWxlcyIsImJ5TmFtZSIsInIiLCJzIiwiY29weSIsIkdyYW1tYXIiLCJzdGFydCIsImZvckVhY2giLCJmcm9tQ29tcGlsZWQiLCJsZXhlciIsIkxleGVyIiwiUGFyc2VyU3RhcnQiLCJQYXJzZXJSdWxlcyIsImciLCJTdHJlYW1MZXhlciIsInJlc2V0IiwiYnVmZmVyIiwibGluZSIsImxhc3RMaW5lQnJlYWsiLCJjb2wiLCJuZXh0IiwiY2giLCJ2YWx1ZSIsInNhdmUiLCJmb3JtYXRFcnJvciIsInRva2VuIiwibWVzc2FnZSIsImxpbmVzIiwic3BsaXQiLCJNYXRoIiwibWF4IiwibmV4dExpbmVCcmVhayIsImluZGV4T2YiLCJsYXN0TGluZURpZ2l0cyIsIlN0cmluZyIsInBhZCIsIm4iLCJBcnJheSIsIm9wdGlvbnMiLCJrZWVwSGlzdG9yeSIsImtleSIsImxleGVyU3RhdGUiLCJjb2x1bW4iLCJ0YWJsZSIsImN1cnJlbnQiLCJmZWVkIiwiY2h1bmsiLCJlIiwiZXJyIiwiRXJyb3IiLCJyZXBvcnRMZXhlckVycm9yIiwib2Zmc2V0IiwibGl0ZXJhbCIsInRleHQiLCJjb25zdHJ1Y3RvciIsImV4cGVjdCIsInRlc3QiLCJ0eXBlIiwiaXNUb2tlbiIsInJlcG9ydEVycm9yIiwicmVzdWx0cyIsImxleGVyRXJyb3IiLCJ0b2tlbkRpc3BsYXkiLCJsZXhlck1lc3NhZ2UiLCJKU09OIiwic3RyaW5naWZ5IiwicmVwb3J0RXJyb3JDb21tb24iLCJsYXN0Q29sdW1uSW5kZXgiLCJsYXN0Q29sdW1uIiwiZXhwZWN0YW50U3RhdGVzIiwiZmlsdGVyIiwibmV4dFN5bWJvbCIsImRpc3BsYXlTdGF0ZVN0YWNrIiwic3RhdGVTdGFja3MiLCJidWlsZEZpcnN0U3RhdGVTdGFjayIsInN0YXRlU3RhY2siLCJzeW1ib2xEaXNwbGF5IiwiZ2V0U3ltYm9sRGlzcGxheSIsImxhc3REaXNwbGF5Iiwic2FtZURpc3BsYXlDb3VudCIsImoiLCJkaXNwbGF5Iiwic3ltYm9sIiwiZ2V0U3ltYm9sTG9uZ0Rpc3BsYXkiLCJ2aXNpdGVkIiwicHJldlN0YXRlIiwiY2hpbGRWaXNpdGVkIiwiY29uY2F0IiwiY2hpbGRSZXN1bHQiLCJyZXN0b3JlIiwic3BsaWNlIiwicmV3aW5kIiwiY29uc2lkZXJhdGlvbnMiLCJ0IiwiYyIsIlJlZ0V4cCJdLCJtYXBwaW5ncyI6IkFBQUMsV0FBU0EsSUFBVCxFQUFlQyxPQUFmLEVBQXdCO0FBQ3JCLE1BQUksT0FBT0MsTUFBUCxLQUFrQixRQUFsQixJQUE4QkEsTUFBTSxDQUFDQyxPQUF6QyxFQUFrRDtBQUM5Q0QsSUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixPQUFPLEVBQXhCO0FBQ0gsR0FGRCxNQUVPO0FBQ0hELElBQUFBLElB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Q0gsT0FGTSxNQUVBO0FBQ0gsY0FBTSxJQUFJUCxLQUFKLENBQVUsMEJBQTBCaUMsTUFBcEMsQ0FBTjtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxTQUFPO0FBQ0hwRyxJQUFBQSxNQUFNLEVBQUVBLE1BREw7QUFFSHVCLElBQUFBLE9BQU8sRUFBRUEsT0FGTjtBQUdIekQsSUFBQUEsSUFBSSxFQUFFQTtBQUhILEdBQVA7QUFNSCxDQW5qQkEsQ0FBRCIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubmVhcmxleSA9IGZhY3RvcnkoKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgZnVuY3Rpb24gUnVsZShuYW1lLCBzeW1ib2xzLCBwb3N0cHJvY2Vzcykge1xuICAgICAgICB0aGlzLmlkID0gKytSdWxlLmhpZ2hlc3RJZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zeW1ib2xzID0gc3ltYm9sczsgICAgICAgIC8vIGEgbGlzdCBvZiBsaXRlcmFsIHwgcmVnZXggY2xhc3MgfCBub250ZXJtaW5hbFxuICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzID0gcG9zdHByb2Nlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBSdWxlLmhpZ2hlc3RJZCA9IDA7XG5cbiAgICBSdWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKHdpdGhDdXJzb3JBdCkge1xuICAgICAgICB2YXIgc3ltYm9sU2VxdWVuY2UgPSAodHlwZW9mIHdpdGhDdXJzb3JBdCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN5bWJvbHMubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCAgIHRoaXMuc3ltYm9scy5zbGljZSgwLCB3aXRoQ3Vyc29yQXQpLm1hcChnZXRTeW1ib2xTaG9ydERpc3BsYXkpLmpvaW4oJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiDil48gXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5zeW1ib2xzLnNsaWNlKHdpdGhDdXJzb3JBdCkubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIg4oaSIFwiICsgc3ltYm9sU2VxdWVuY2U7XG4gICAgfVxuXG5cbiAgICAvLyBhIFN0YXRlIGlzIGEgcnVsZSBhdCBhIHBvc2l0aW9uIGZyb20gYSBnaXZlbiBzdGFydGluZyBwb2ludCBpbiB0aGUgaW5wdXQgc3RyZWFtIChyZWZlcmVuY2UpXG4gICAgZnVuY3Rpb24gU3RhdGUocnVsZSwgZG90LCByZWZlcmVuY2UsIHdhbnRlZEJ5KSB7XG4gICAgICAgIHRoaXMucnVsZSA9IHJ1bGU7XG4gICAgICAgIHRoaXMuZG90ID0gZG90O1xuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMud2FudGVkQnkgPSB3YW50ZWRCeTtcbiAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gdGhpcy5kb3QgPT09IHJ1bGUuc3ltYm9scy5sZW5ndGg7XG4gICAgfVxuXG4gICAgU3RhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIntcIiArIHRoaXMucnVsZS50b1N0cmluZyh0aGlzLmRvdCkgKyBcIn0sIGZyb206IFwiICsgKHRoaXMucmVmZXJlbmNlIHx8IDApO1xuICAgIH07XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUubmV4dFN0YXRlID0gZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKHRoaXMucnVsZSwgdGhpcy5kb3QgKyAxLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy53YW50ZWRCeSk7XG4gICAgICAgIHN0YXRlLmxlZnQgPSB0aGlzO1xuICAgICAgICBzdGF0ZS5yaWdodCA9IGNoaWxkO1xuICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgc3RhdGUuZGF0YSA9IHN0YXRlLmJ1aWxkKCk7XG4gICAgICAgICAgICAvLyBIYXZpbmcgcmlnaHQgc2V0IGhlcmUgd2lsbCBwcmV2ZW50IHRoZSByaWdodCBzdGF0ZSBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAvLyBmb3JtIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgICAgICAgICBzdGF0ZS5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcblxuICAgIFN0YXRlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKG5vZGUucmlnaHQuZGF0YSk7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xuICAgICAgICB9IHdoaWxlIChub2RlLmxlZnQpO1xuICAgICAgICBjaGlsZHJlbi5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgU3RhdGUucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ydWxlLnBvc3Rwcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnJ1bGUucG9zdHByb2Nlc3ModGhpcy5kYXRhLCB0aGlzLnJlZmVyZW5jZSwgUGFyc2VyLmZhaWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gQ29sdW1uKGdyYW1tYXIsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy53YW50cyA9IHt9OyAvLyBzdGF0ZXMgaW5kZXhlZCBieSB0aGUgbm9uLXRlcm1pbmFsIHRoZXkgZXhwZWN0XG4gICAgICAgIHRoaXMuc2Nhbm5hYmxlID0gW107IC8vIGxpc3Qgb2Ygc3RhdGVzIHRoYXQgZXhwZWN0IGEgdG9rZW5cbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB7fTsgLy8gc3RhdGVzIHRoYXQgYXJlIG51bGxhYmxlXG4gICAgfVxuXG5cbiAgICBDb2x1bW4ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihuZXh0Q29sdW1uKSB7XG4gICAgICAgIHZhciBzdGF0ZXMgPSB0aGlzLnN0YXRlcztcbiAgICAgICAgdmFyIHdhbnRzID0gdGhpcy53YW50cztcbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHRoaXMuY29tcGxldGVkO1xuXG4gICAgICAgIGZvciAodmFyIHcgPSAwOyB3IDwgc3RhdGVzLmxlbmd0aDsgdysrKSB7IC8vIG5iLiB3ZSBwdXNoKCkgZHVyaW5nIGl0ZXJhdGlvblxuICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RhdGVzW3ddO1xuXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5kYXRhICE9PSBQYXJzZXIuZmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgd2FudGVkQnkgPSBzdGF0ZS53YW50ZWRCeTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHdhbnRlZEJ5Lmxlbmd0aDsgaS0tOyApIHsgLy8gdGhpcyBsaW5lIGlzIGhvdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSB3YW50ZWRCeVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGUobGVmdCwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbC1jYXNlIG51bGxhYmxlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUucmVmZXJlbmNlID09PSB0aGlzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgZnV0dXJlIHByZWRpY3RvcnMgb2YgdGhpcyBydWxlIGdldCBjb21wbGV0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gc3RhdGUucnVsZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY29tcGxldGVkW2V4cF0gPSB0aGlzLmNvbXBsZXRlZFtleHBdIHx8IFtdKS5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBxdWV1ZSBzY2FubmFibGUgc3RhdGVzXG4gICAgICAgICAgICAgICAgdmFyIGV4cCA9IHN0YXRlLnJ1bGUuc3ltYm9sc1tzdGF0ZS5kb3RdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uYWJsZS5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcHJlZGljdFxuICAgICAgICAgICAgICAgIGlmICh3YW50c1tleHBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbnRzW2V4cF0ucHVzaChzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZC5oYXNPd25Qcm9wZXJ0eShleHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVsbHMgPSBjb21wbGV0ZWRbZXhwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSBudWxsc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlKHN0YXRlLCByaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3YW50c1tleHBdID0gW3N0YXRlXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVkaWN0KGV4cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ29sdW1uLnByb3RvdHlwZS5wcmVkaWN0ID0gZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuZ3JhbW1hci5ieU5hbWVbZXhwXSB8fCBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgciA9IHJ1bGVzW2ldO1xuICAgICAgICAgICAgdmFyIHdhbnRlZEJ5ID0gdGhpcy53YW50c1tleHBdO1xuICAgICAgICAgICAgdmFyIHMgPSBuZXcgU3RhdGUociwgMCwgdGhpcy5pbmRleCwgd2FudGVkQnkpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbHVtbi5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgY29weSA9IGxlZnQubmV4dFN0YXRlKHJpZ2h0KTtcbiAgICAgICAgdGhpcy5zdGF0ZXMucHVzaChjb3B5KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIEdyYW1tYXIocnVsZXMsIHN0YXJ0KSB7XG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0IHx8IHRoaXMucnVsZXNbMF0ubmFtZTtcbiAgICAgICAgdmFyIGJ5TmFtZSA9IHRoaXMuYnlOYW1lID0ge307XG4gICAgICAgIHRoaXMucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICBpZiAoIWJ5TmFtZS5oYXNPd25Qcm9wZXJ0eShydWxlLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYnlOYW1lW3J1bGUubmFtZV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ5TmFtZVtydWxlLm5hbWVdLnB1c2gocnVsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFNvIHdlIGNhbiBhbGxvdyBwYXNzaW5nIChydWxlcywgc3RhcnQpIGRpcmVjdGx5IHRvIFBhcnNlciBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBHcmFtbWFyLmZyb21Db21waWxlZCA9IGZ1bmN0aW9uKHJ1bGVzLCBzdGFydCkge1xuICAgICAgICB2YXIgbGV4ZXIgPSBydWxlcy5MZXhlcjtcbiAgICAgICAgaWYgKHJ1bGVzLlBhcnNlclN0YXJ0KSB7XG4gICAgICAgICAgc3RhcnQgPSBydWxlcy5QYXJzZXJTdGFydDtcbiAgICAgICAgICBydWxlcyA9IHJ1bGVzLlBhcnNlclJ1bGVzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHJ1bGVzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gKG5ldyBSdWxlKHIubmFtZSwgci5zeW1ib2xzLCByLnBvc3Rwcm9jZXNzKSk7IH0pO1xuICAgICAgICB2YXIgZyA9IG5ldyBHcmFtbWFyKHJ1bGVzLCBzdGFydCk7XG4gICAgICAgIGcubGV4ZXIgPSBsZXhlcjsgLy8gbmIuIHN0b3JpbmcgbGV4ZXIgb24gR3JhbW1hciBpcyBpZmZ5LCBidXQgdW5hdm9pZGFibGVcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBTdHJlYW1MZXhlcigpIHtcbiAgICAgIHRoaXMucmVzZXQoXCJcIik7XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oZGF0YSwgc3RhdGUpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5saW5lID0gc3RhdGUgPyBzdGF0ZS5saW5lIDogMTtcbiAgICAgICAgdGhpcy5sYXN0TGluZUJyZWFrID0gc3RhdGUgPyAtc3RhdGUuY29sIDogMDtcbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5idWZmZXJbdGhpcy5pbmRleCsrXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgdGhpcy5saW5lICs9IDE7XG4gICAgICAgICAgICAgIHRoaXMubGFzdExpbmVCcmVhayA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge3ZhbHVlOiBjaH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogdGhpcy5saW5lLFxuICAgICAgICBjb2w6IHRoaXMuaW5kZXggLSB0aGlzLmxhc3RMaW5lQnJlYWssXG4gICAgICB9XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLmZvcm1hdEVycm9yID0gZnVuY3Rpb24odG9rZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gbmIuIHRoaXMgZ2V0cyBjYWxsZWQgYWZ0ZXIgY29uc3VtaW5nIHRoZSBvZmZlbmRpbmcgdG9rZW4sXG4gICAgICAgIC8vIHNvIHRoZSBjdWxwcml0IGlzIGluZGV4LTFcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGJ1ZmZlclxuICAgICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAgIC5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoMCwgdGhpcy5saW5lIC0gNSksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2YXIgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5pbmRleE9mKCdcXG4nLCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIGlmIChuZXh0TGluZUJyZWFrID09PSAtMSkgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY29sID0gdGhpcy5pbmRleCAtIHRoaXMubGFzdExpbmVCcmVhaztcbiAgICAgICAgICAgIHZhciBsYXN0TGluZURpZ2l0cyA9IFN0cmluZyh0aGlzLmxpbmUpLmxlbmd0aDtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgYXQgbGluZSBcIiArIHRoaXMubGluZSArIFwiIGNvbCBcIiArIGNvbCArIFwiOlxcblxcblwiO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBsaW5lc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obGluZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFkKHRoaXMubGluZSAtIGxpbmVzLmxlbmd0aCArIGkgKyAxLCBsYXN0TGluZURpZ2l0cykgKyBcIiBcIiArIGxpbmU7XG4gICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCJcXG5cIiArIHBhZChcIlwiLCBsYXN0TGluZURpZ2l0cyArIGNvbCkgKyBcIl5cXG5cIjtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBcIiBhdCBpbmRleCBcIiArICh0aGlzLmluZGV4IC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYWQobiwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcyA9IFN0cmluZyhuKTtcbiAgICAgICAgICAgIHJldHVybiBBcnJheShsZW5ndGggLSBzLmxlbmd0aCArIDEpLmpvaW4oXCIgXCIpICsgcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFBhcnNlcihydWxlcywgc3RhcnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHJ1bGVzIGluc3RhbmNlb2YgR3JhbW1hcikge1xuICAgICAgICAgICAgdmFyIGdyYW1tYXIgPSBydWxlcztcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZ3JhbW1hciA9IEdyYW1tYXIuZnJvbUNvbXBpbGVkKHJ1bGVzLCBzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmFtbWFyID0gZ3JhbW1hcjtcblxuICAgICAgICAvLyBSZWFkIG9wdGlvbnNcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAga2VlcEhpc3Rvcnk6IGZhbHNlLFxuICAgICAgICAgICAgbGV4ZXI6IGdyYW1tYXIubGV4ZXIgfHwgbmV3IFN0cmVhbUxleGVyLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gKG9wdGlvbnMgfHwge30pKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGxleGVyXG4gICAgICAgIHRoaXMubGV4ZXIgPSB0aGlzLm9wdGlvbnMubGV4ZXI7XG4gICAgICAgIHRoaXMubGV4ZXJTdGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBTZXR1cCBhIHRhYmxlXG4gICAgICAgIHZhciBjb2x1bW4gPSBuZXcgQ29sdW1uKGdyYW1tYXIsIDApO1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLnRhYmxlID0gW2NvbHVtbl07XG5cbiAgICAgICAgLy8gSSBjb3VsZCBiZSBleHBlY3RpbmcgYW55dGhpbmcuXG4gICAgICAgIGNvbHVtbi53YW50c1tncmFtbWFyLnN0YXJ0XSA9IFtdO1xuICAgICAgICBjb2x1bW4ucHJlZGljdChncmFtbWFyLnN0YXJ0KTtcbiAgICAgICAgLy8gVE9ETyB3aGF0IGlmIHN0YXJ0IHJ1bGUgaXMgbnVsbGFibGU/XG4gICAgICAgIGNvbHVtbi5wcm9jZXNzKCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDA7IC8vIHRva2VuIGluZGV4XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgcmVzZXJ2ZWQgdG9rZW4gZm9yIGluZGljYXRpbmcgYSBwYXJzZSBmYWlsXG4gICAgUGFyc2VyLmZhaWwgPSB7fTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuZmVlZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICAgIHZhciBsZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgICAgIGxleGVyLnJlc2V0KGNodW5rLCB0aGlzLmxleGVyU3RhdGUpO1xuXG4gICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBsZXhlci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBuZXh0IGNvbHVtbiBzbyB0aGF0IHRoZSBlcnJvciByZXBvcnRlclxuICAgICAgICAgICAgICAgIC8vIGNhbiBkaXNwbGF5IHRoZSBjb3JyZWN0bHkgcHJlZGljdGVkIHN0YXRlcy5cbiAgICAgICAgICAgICAgICB2YXIgbmV4dENvbHVtbiA9IG5ldyBDb2x1bW4odGhpcy5ncmFtbWFyLCB0aGlzLmN1cnJlbnQgKyAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLnB1c2gobmV4dENvbHVtbik7XG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcih0aGlzLnJlcG9ydExleGVyRXJyb3IoZSkpO1xuICAgICAgICAgICAgICAgIGVyci5vZmZzZXQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXJyLnRva2VuID0gZS50b2tlbjtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBhZGQgbmV3IHN0YXRlcyB0byB0YWJsZVtjdXJyZW50KzFdXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy50YWJsZVt0aGlzLmN1cnJlbnRdO1xuXG4gICAgICAgICAgICAvLyBHQyB1bnVzZWQgc3RhdGVzXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5rZWVwSGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRhYmxlW3RoaXMuY3VycmVudCAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuY3VycmVudCArIDE7XG4gICAgICAgICAgICB2YXIgbmV4dENvbHVtbiA9IG5ldyBDb2x1bW4odGhpcy5ncmFtbWFyLCBuKTtcbiAgICAgICAgICAgIHRoaXMudGFibGUucHVzaChuZXh0Q29sdW1uKTtcblxuICAgICAgICAgICAgLy8gQWR2YW5jZSBhbGwgdG9rZW5zIHRoYXQgZXhwZWN0IHRoZSBzeW1ib2xcbiAgICAgICAgICAgIHZhciBsaXRlcmFsID0gdG9rZW4udGV4dCAhPT0gdW5kZWZpbmVkID8gdG9rZW4udGV4dCA6IHRva2VuLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbGV4ZXIuY29uc3RydWN0b3IgPT09IFN0cmVhbUxleGVyID8gdG9rZW4udmFsdWUgOiB0b2tlbjtcbiAgICAgICAgICAgIHZhciBzY2FubmFibGUgPSBjb2x1bW4uc2Nhbm5hYmxlO1xuICAgICAgICAgICAgZm9yICh2YXIgdyA9IHNjYW5uYWJsZS5sZW5ndGg7IHctLTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc2Nhbm5hYmxlW3ddO1xuICAgICAgICAgICAgICAgIHZhciBleHBlY3QgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gY29uc3VtZSB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgcmVnZXggb3IgbGl0ZXJhbFxuICAgICAgICAgICAgICAgIGlmIChleHBlY3QudGVzdCA/IGV4cGVjdC50ZXN0KHZhbHVlKSA6XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdC50eXBlID8gZXhwZWN0LnR5cGUgPT09IHRva2VuLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleHBlY3QubGl0ZXJhbCA9PT0gbGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgaXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBzdGF0ZS5uZXh0U3RhdGUoe2RhdGE6IHZhbHVlLCB0b2tlbjogdG9rZW4sIGlzVG9rZW46IHRydWUsIHJlZmVyZW5jZTogbiAtIDF9KTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvbHVtbi5zdGF0ZXMucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5leHQsIGZvciBlYWNoIG9mIHRoZSBydWxlcywgd2UgZWl0aGVyXG4gICAgICAgICAgICAvLyAoYSkgY29tcGxldGUgaXQsIGFuZCB0cnkgdG8gc2VlIGlmIHRoZSByZWZlcmVuY2Ugcm93IGV4cGVjdGVkIHRoYXRcbiAgICAgICAgICAgIC8vICAgICBydWxlXG4gICAgICAgICAgICAvLyAoYikgcHJlZGljdCB0aGUgbmV4dCBub250ZXJtaW5hbCBpdCBleHBlY3RzIGJ5IGFkZGluZyB0aGF0XG4gICAgICAgICAgICAvLyAgICAgbm9udGVybWluYWwncyBzdGFydCBzdGF0ZVxuICAgICAgICAgICAgLy8gVG8gcHJldmVudCBkdXBsaWNhdGlvbiwgd2UgYWxzbyBrZWVwIHRyYWNrIG9mIHJ1bGVzIHdlIGhhdmUgYWxyZWFkeVxuICAgICAgICAgICAgLy8gYWRkZWRcblxuICAgICAgICAgICAgbmV4dENvbHVtbi5wcm9jZXNzKCk7XG5cbiAgICAgICAgICAgIC8vIElmIG5lZWRlZCwgdGhyb3cgYW4gZXJyb3I6XG4gICAgICAgICAgICBpZiAobmV4dENvbHVtbi5zdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gc3RhdGVzIGF0IGFsbCEgVGhpcyBpcyBub3QgZ29vZC5cbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKHRoaXMucmVwb3J0RXJyb3IodG9rZW4pKTtcbiAgICAgICAgICAgICAgICBlcnIub2Zmc2V0ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGVyci50b2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWF5YmUgc2F2ZSBsZXhlciBzdGF0ZVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwSGlzdG9yeSkge1xuICAgICAgICAgICAgICBjb2x1bW4ubGV4ZXJTdGF0ZSA9IGxleGVyLnNhdmUoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sdW1uKSB7XG4gICAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gbGV4ZXIuc2F2ZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmNyZW1lbnRhbGx5IGtlZXAgdHJhY2sgb2YgcmVzdWx0c1xuICAgICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLmZpbmlzaCgpO1xuXG4gICAgICAgIC8vIEFsbG93IGNoYWluaW5nLCBmb3Igd2hhdGV2ZXIgaXQncyB3b3J0aFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRMZXhlckVycm9yID0gZnVuY3Rpb24obGV4ZXJFcnJvcikge1xuICAgICAgICB2YXIgdG9rZW5EaXNwbGF5LCBsZXhlck1lc3NhZ2U7XG4gICAgICAgIC8vIFBsYW5uaW5nIHRvIGFkZCBhIHRva2VuIHByb3BlcnR5IHRvIG1vbydzIHRocm93biBlcnJvclxuICAgICAgICAvLyBldmVuIG9uIGVycm9yaW5nIHRva2VucyB0byBiZSB1c2VkIGluIGVycm9yIGRpc3BsYXkgYmVsb3dcbiAgICAgICAgdmFyIHRva2VuID0gbGV4ZXJFcnJvci50b2tlbjtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB0b2tlbkRpc3BsYXkgPSBcImlucHV0IFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW4udGV4dFswXSkgKyBcIiAobGV4ZXIgZXJyb3IpXCI7XG4gICAgICAgICAgICBsZXhlck1lc3NhZ2UgPSB0aGlzLmxleGVyLmZvcm1hdEVycm9yKHRva2VuLCBcIlN5bnRheCBlcnJvclwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2VuRGlzcGxheSA9IFwiaW5wdXQgKGxleGVyIGVycm9yKVwiO1xuICAgICAgICAgICAgbGV4ZXJNZXNzYWdlID0gbGV4ZXJFcnJvci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcG9ydEVycm9yQ29tbW9uKGxleGVyTWVzc2FnZSwgdG9rZW5EaXNwbGF5KTtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRFcnJvciA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIHZhciB0b2tlbkRpc3BsYXkgPSAodG9rZW4udHlwZSA/IHRva2VuLnR5cGUgKyBcIiB0b2tlbjogXCIgOiBcIlwiKSArIEpTT04uc3RyaW5naWZ5KHRva2VuLnZhbHVlICE9PSB1bmRlZmluZWQgPyB0b2tlbi52YWx1ZSA6IHRva2VuKTtcbiAgICAgICAgdmFyIGxleGVyTWVzc2FnZSA9IHRoaXMubGV4ZXIuZm9ybWF0RXJyb3IodG9rZW4sIFwiU3ludGF4IGVycm9yXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRFcnJvckNvbW1vbihsZXhlck1lc3NhZ2UsIHRva2VuRGlzcGxheSk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVwb3J0RXJyb3JDb21tb24gPSBmdW5jdGlvbihsZXhlck1lc3NhZ2UsIHRva2VuRGlzcGxheSkge1xuICAgICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMucHVzaChsZXhlck1lc3NhZ2UpO1xuICAgICAgICB2YXIgbGFzdENvbHVtbkluZGV4ID0gdGhpcy50YWJsZS5sZW5ndGggLSAyO1xuICAgICAgICB2YXIgbGFzdENvbHVtbiA9IHRoaXMudGFibGVbbGFzdENvbHVtbkluZGV4XTtcbiAgICAgICAgdmFyIGV4cGVjdGFudFN0YXRlcyA9IGxhc3RDb2x1bW4uc3RhdGVzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRTeW1ib2wgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFN5bWJvbCAmJiB0eXBlb2YgbmV4dFN5bWJvbCAhPT0gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChleHBlY3RhbnRTdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCdVbmV4cGVjdGVkICcgKyB0b2tlbkRpc3BsYXkgKyAnLiBJIGRpZCBub3QgZXhwZWN0IGFueSBtb3JlIGlucHV0LiBIZXJlIGlzIHRoZSBzdGF0ZSBvZiBteSBwYXJzZSB0YWJsZTpcXG4nKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0YXRlU3RhY2sobGFzdENvbHVtbi5zdGF0ZXMsIGxpbmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJ1VuZXhwZWN0ZWQgJyArIHRva2VuRGlzcGxheSArICcuIEluc3RlYWQsIEkgd2FzIGV4cGVjdGluZyB0byBzZWUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XFxuJyk7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGEgXCJzdGF0ZSBzdGFja1wiIGZvciBlYWNoIGV4cGVjdGFudCBzdGF0ZVxuICAgICAgICAgICAgLy8gLSB3aGljaCBzaG93cyB5b3UgaG93IHRoaXMgc3RhdGUgY2FtZSB0byBiZSwgc3RlcCBieSBzdGVwLlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBkZXJpdmF0aW9uLCB3ZSBvbmx5IGRpc3BsYXkgdGhlIGZpcnN0IG9uZS5cbiAgICAgICAgICAgIHZhciBzdGF0ZVN0YWNrcyA9IGV4cGVjdGFudFN0YXRlc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRGaXJzdFN0YXRlU3RhY2soc3RhdGUsIFtdKSB8fCBbc3RhdGVdO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgLy8gRGlzcGxheSBlYWNoIHN0YXRlIHRoYXQgaXMgZXhwZWN0aW5nIGEgdGVybWluYWwgc3ltYm9sIG5leHQuXG4gICAgICAgICAgICBzdGF0ZVN0YWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRlU3RhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZVN0YWNrWzBdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0U3ltYm9sID0gc3RhdGUucnVsZS5zeW1ib2xzW3N0YXRlLmRvdF07XG4gICAgICAgICAgICAgICAgdmFyIHN5bWJvbERpc3BsYXkgPSB0aGlzLmdldFN5bWJvbERpc3BsYXkobmV4dFN5bWJvbCk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnQSAnICsgc3ltYm9sRGlzcGxheSArICcgYmFzZWQgb246Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3RhdGVTdGFjayhzdGF0ZVN0YWNrLCBsaW5lcyk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5wdXNoKFwiXCIpO1xuICAgICAgICByZXR1cm4gbGluZXMuam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgXG4gICAgUGFyc2VyLnByb3RvdHlwZS5kaXNwbGF5U3RhdGVTdGFjayA9IGZ1bmN0aW9uKHN0YXRlU3RhY2ssIGxpbmVzKSB7XG4gICAgICAgIHZhciBsYXN0RGlzcGxheTtcbiAgICAgICAgdmFyIHNhbWVEaXNwbGF5Q291bnQgPSAwO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0YXRlU3RhY2subGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlU3RhY2tbal07XG4gICAgICAgICAgICB2YXIgZGlzcGxheSA9IHN0YXRlLnJ1bGUudG9TdHJpbmcoc3RhdGUuZG90KTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5ID09PSBsYXN0RGlzcGxheSkge1xuICAgICAgICAgICAgICAgIHNhbWVEaXNwbGF5Q291bnQrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhbWVEaXNwbGF5Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICBeICcgKyBzYW1lRGlzcGxheUNvdW50ICsgJyBtb3JlIGxpbmVzIGlkZW50aWNhbCB0byB0aGlzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNhbWVEaXNwbGF5Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICAnICsgZGlzcGxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlzcGxheSA9IGRpc3BsYXk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5nZXRTeW1ib2xEaXNwbGF5ID0gZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBnZXRTeW1ib2xMb25nRGlzcGxheShzeW1ib2wpO1xuICAgIH07XG5cbiAgICAvKlxuICAgIEJ1aWxkcyBhIHRoZSBmaXJzdCBzdGF0ZSBzdGFjay4gWW91IGNhbiB0aGluayBvZiBhIHN0YXRlIHN0YWNrIGFzIHRoZSBjYWxsIHN0YWNrXG4gICAgb2YgdGhlIHJlY3Vyc2l2ZS1kZXNjZW50IHBhcnNlciB3aGljaCB0aGUgTmVhcmxleSBwYXJzZSBhbGdvcml0aG0gc2ltdWxhdGVzLlxuICAgIEEgc3RhdGUgc3RhY2sgaXMgcmVwcmVzZW50ZWQgYXMgYW4gYXJyYXkgb2Ygc3RhdGUgb2JqZWN0cy4gV2l0aGluIGFcbiAgICBzdGF0ZSBzdGFjaywgdGhlIGZpcnN0IGl0ZW0gb2YgdGhlIGFycmF5IHdpbGwgYmUgdGhlIHN0YXJ0aW5nXG4gICAgc3RhdGUsIHdpdGggZWFjaCBzdWNjZXNzaXZlIGl0ZW0gaW4gdGhlIGFycmF5IGdvaW5nIGZ1cnRoZXIgYmFjayBpbnRvIGhpc3RvcnkuXG5cbiAgICBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGdpdmVuIGEgc3RhcnRpbmcgc3RhdGUgYW5kIGFuIGVtcHR5IGFycmF5IHJlcHJlc2VudGluZ1xuICAgIHRoZSB2aXNpdGVkIHN0YXRlcywgYW5kIGl0IHJldHVybnMgYW4gc2luZ2xlIHN0YXRlIHN0YWNrLlxuXG4gICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1aWxkRmlyc3RTdGF0ZVN0YWNrID0gZnVuY3Rpb24oc3RhdGUsIHZpc2l0ZWQpIHtcbiAgICAgICAgaWYgKHZpc2l0ZWQuaW5kZXhPZihzdGF0ZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBGb3VuZCBjeWNsZSwgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIC8vIHRvIGVsaW1pbmF0ZSB0aGlzIHBhdGggZnJvbSB0aGUgcmVzdWx0cywgYmVjYXVzZVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qga25vdyBob3cgdG8gZGlzcGxheSBpdCBtZWFuaW5nZnVsbHlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS53YW50ZWRCeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbc3RhdGVdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2U3RhdGUgPSBzdGF0ZS53YW50ZWRCeVswXTtcbiAgICAgICAgdmFyIGNoaWxkVmlzaXRlZCA9IFtzdGF0ZV0uY29uY2F0KHZpc2l0ZWQpO1xuICAgICAgICB2YXIgY2hpbGRSZXN1bHQgPSB0aGlzLmJ1aWxkRmlyc3RTdGF0ZVN0YWNrKHByZXZTdGF0ZSwgY2hpbGRWaXNpdGVkKTtcbiAgICAgICAgaWYgKGNoaWxkUmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3N0YXRlXS5jb25jYXQoY2hpbGRSZXN1bHQpO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGVbdGhpcy5jdXJyZW50XTtcbiAgICAgICAgY29sdW1uLmxleGVyU3RhdGUgPSB0aGlzLmxleGVyU3RhdGU7XG4gICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICB2YXIgaW5kZXggPSBjb2x1bW4uaW5kZXg7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGluZGV4O1xuICAgICAgICB0aGlzLnRhYmxlW2luZGV4XSA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy50YWJsZS5zcGxpY2UoaW5kZXggKyAxKTtcbiAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gY29sdW1uLmxleGVyU3RhdGU7XG5cbiAgICAgICAgLy8gSW5jcmVtZW50YWxseSBrZWVwIHRyYWNrIG9mIHJlc3VsdHNcbiAgICAgICAgdGhpcy5yZXN1bHRzID0gdGhpcy5maW5pc2goKTtcbiAgICB9O1xuXG4gICAgLy8gbmIuIGRlcHJlY2F0ZWQ6IHVzZSBzYXZlL3Jlc3RvcmUgaW5zdGVhZCFcbiAgICBQYXJzZXIucHJvdG90eXBlLnJld2luZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmtlZXBIaXN0b3J5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldCBvcHRpb24gYGtlZXBIaXN0b3J5YCB0byBlbmFibGUgcmV3aW5kaW5nJylcbiAgICAgICAgfVxuICAgICAgICAvLyBuYi4gcmVjYWxsIGNvbHVtbiAodGFibGUpIGluZGljaWVzIGZhbGwgYmV0d2VlbiB0b2tlbiBpbmRpY2llcy5cbiAgICAgICAgLy8gICAgICAgIGNvbCAwICAgLS0gICB0b2tlbiAwICAgLS0gICBjb2wgMVxuICAgICAgICB0aGlzLnJlc3RvcmUodGhpcy50YWJsZVtpbmRleF0pO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIHBvc3NpYmxlIHBhcnNpbmdzXG4gICAgICAgIHZhciBjb25zaWRlcmF0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmdyYW1tYXIuc3RhcnQ7XG4gICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlW3RoaXMudGFibGUubGVuZ3RoIC0gMV1cbiAgICAgICAgY29sdW1uLnN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpZiAodC5ydWxlLm5hbWUgPT09IHN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICYmIHQuZG90ID09PSB0LnJ1bGUuc3ltYm9scy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5yZWZlcmVuY2UgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5kYXRhICE9PSBQYXJzZXIuZmFpbCkge1xuICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb25zLnB1c2godCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29uc2lkZXJhdGlvbnMubWFwKGZ1bmN0aW9uKGMpIHtyZXR1cm4gYy5kYXRhOyB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0U3ltYm9sTG9uZ0Rpc3BsYXkoc3ltYm9sKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHN5bWJvbDtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKHN5bWJvbC5saXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN5bWJvbC5saXRlcmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjaGFyYWN0ZXIgbWF0Y2hpbmcgJyArIHN5bWJvbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sLnR5cGUgKyAnIHRva2VuJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnRlc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Rva2VuIG1hdGNoaW5nICcgKyBTdHJpbmcoc3ltYm9sLnRlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc3ltYm9sIHR5cGU6ICcgKyBzeW1ib2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3ltYm9sU2hvcnREaXNwbGF5KHN5bWJvbCkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBzeW1ib2w7XG4gICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wubGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzeW1ib2wubGl0ZXJhbCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2wudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyUnICsgc3ltYm9sLnR5cGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbC50ZXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIFN0cmluZyhzeW1ib2wudGVzdCkgKyAnPic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzeW1ib2wgdHlwZTogJyArIHN5bWJvbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQYXJzZXI6IFBhcnNlcixcbiAgICAgICAgR3JhbW1hcjogR3JhbW1hcixcbiAgICAgICAgUnVsZTogUnVsZSxcbiAgICB9O1xuXG59KSk7XG4iXX0=