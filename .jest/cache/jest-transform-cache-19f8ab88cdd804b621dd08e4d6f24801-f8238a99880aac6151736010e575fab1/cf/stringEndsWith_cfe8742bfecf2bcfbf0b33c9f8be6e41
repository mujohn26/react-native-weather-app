12ef37b64b0841e846830caed4e66c05
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stringEndsWithValidator;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function stringEndsWithValidator(end) {
  if (typeof end !== 'string' || end.length === 0) {
    throw new TypeError('a non-empty string is required');
  }

  var validator = function stringEndsWith(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

    if (stringError) {
      return stringError;
    }

    if (!propValue.endsWith(end) || propValue.length <= end.length) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " does not end with \"").concat(end, "\""));
    }

    return null;
  };

  validator.isRequired = function requiredStringEndsWith() {
    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);

    if (stringError) {
      return stringError;
    }

    return validator.apply(void 0, arguments);
  };

  return (0, _wrapValidator["default"])(validator, "stringEndsWith: ".concat(end));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJpbmdFbmRzV2l0aC5qcyJdLCJuYW1lcyI6WyJlbmQiLCJ2YWxpZGF0b3IiLCJyZXN0IiwicHJvcFZhbHVlIiwicHJvcHMiLCJzdHJpbmdFcnJvciIsInN0cmluZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLDJCQUFBLENBQUE7Ozs7Ozs7O0FBRWUsU0FBQSx1QkFBQSxDQUFBLEdBQUEsRUFBc0M7QUFDbkQsTUFBSSxPQUFBLEdBQUEsS0FBQSxRQUFBLElBQTJCQSxHQUFHLENBQUhBLE1BQUFBLEtBQS9CLENBQUEsRUFBaUQ7QUFDL0MsVUFBTSxJQUFBLFNBQUEsQ0FBTixnQ0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUyxHQUFHLFNBQUEsY0FBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFpRTtBQUFBLFFBQzdERSxTQUQ2RCxHQUMvQ0MsS0FEK0MsQ0FBQSxRQUFBLENBQUE7O0FBR2pGLFFBQUlELFNBQVMsSUFBYixJQUFBLEVBQXVCO0FBQ3JCLGFBQUEsSUFBQTtBQUNEOztBQUxnRixTQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5ELElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxJQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxJQUFBLENBQU5BO0FBQU07O0FBT2pGLFFBQU1HLFdBQVcsR0FBR0MsVUFBQUEsQ0FBQUEsTUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBcEIsSUFBb0JBLENBQUFBLENBQXBCOztBQUNBLFFBQUEsV0FBQSxFQUFpQjtBQUNmLGFBQUEsV0FBQTtBQUNEOztBQUVELFFBQUksQ0FBQ0gsU0FBUyxDQUFUQSxRQUFBQSxDQUFELEdBQUNBLENBQUQsSUFBNEJBLFNBQVMsQ0FBVEEsTUFBQUEsSUFBb0JILEdBQUcsQ0FBdkQsTUFBQSxFQUFnRTtBQUM5RCxhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLFFBQUEsRUFBQSx1QkFBQSxFQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQVAsSUFBTyxDQUFBLENBQVA7QUFDRDs7QUFDRCxXQUFBLElBQUE7QUFmRixHQUFBOztBQWtCQUMsRUFBQUEsU0FBUyxDQUFUQSxVQUFBQSxHQUF1QixTQUFBLHNCQUFBLEdBQXlDO0FBQzlELFFBQU1JLFdBQVcsR0FBR0MsVUFBQUEsQ0FBQUEsTUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsTUFBQUEsRUFBcEIsU0FBb0JBLENBQXBCOztBQUNBLFFBQUEsV0FBQSxFQUFpQjtBQUNmLGFBQUEsV0FBQTtBQUNEOztBQUNELFdBQU9MLFNBQVMsQ0FBVEEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBUCxTQUFPQSxDQUFQO0FBTEZBLEdBQUFBOztBQVFBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsbUJBQUEsTUFBQSxDQUFQLEdBQU8sQ0FBQSxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHJpbmcgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RyaW5nRW5kc1dpdGhWYWxpZGF0b3IoZW5kKSB7XG4gIGlmICh0eXBlb2YgZW5kICE9PSAnc3RyaW5nJyB8fCBlbmQubGVuZ3RoID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYSBub24tZW1wdHkgc3RyaW5nIGlzIHJlcXVpcmVkJyk7XG4gIH1cblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBzdHJpbmdFbmRzV2l0aChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG5cbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHN0cmluZ0Vycm9yID0gc3RyaW5nKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gICAgaWYgKHN0cmluZ0Vycm9yKSB7XG4gICAgICByZXR1cm4gc3RyaW5nRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKCFwcm9wVmFsdWUuZW5kc1dpdGgoZW5kKSB8fCBwcm9wVmFsdWUubGVuZ3RoIDw9IGVuZC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGAke2NvbXBvbmVudE5hbWV9OiAke3Byb3BOYW1lfSBkb2VzIG5vdCBlbmQgd2l0aCBcIiR7ZW5kfVwiYCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHZhbGlkYXRvci5pc1JlcXVpcmVkID0gZnVuY3Rpb24gcmVxdWlyZWRTdHJpbmdFbmRzV2l0aCguLi5hcmdzKSB7XG4gICAgY29uc3Qgc3RyaW5nRXJyb3IgPSBzdHJpbmcuaXNSZXF1aXJlZCguLi5hcmdzKTtcbiAgICBpZiAoc3RyaW5nRXJyb3IpIHtcbiAgICAgIHJldHVybiBzdHJpbmdFcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkYXRvciguLi5hcmdzKTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFZhbGlkYXRvcih2YWxpZGF0b3IsIGBzdHJpbmdFbmRzV2l0aDogJHtlbmR9YCk7XG59XG4iXX0=