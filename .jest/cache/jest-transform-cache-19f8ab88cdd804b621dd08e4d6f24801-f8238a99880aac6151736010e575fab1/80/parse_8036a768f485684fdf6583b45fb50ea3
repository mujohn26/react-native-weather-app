df1a9c806588dd2d9c568fd44bc4f818
var htmlparser = require('htmlparser2'),
    parse5 = require('parse5');

exports = module.exports = function (content, options, isDocument) {
  var dom = exports.evaluate(content, options, isDocument),
      root = exports.evaluate('<root></root>', options, false)[0];
  root.type = 'root';
  root.parent = null;
  exports.update(dom, root);
  return root;
};

function parseWithParse5(content, isDocument) {
  var parse = isDocument ? parse5.parse : parse5.parseFragment,
      root = parse(content, {
    treeAdapter: parse5.treeAdapters.htmlparser2
  });
  return root.children;
}

exports.evaluate = function (content, options, isDocument) {
  var dom;
  if (Buffer.isBuffer(content)) content = content.toString();

  if (typeof content === 'string') {
    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;
    dom = useHtmlParser2 ? htmlparser.parseDOM(content, options) : parseWithParse5(content, isDocument);
  } else {
    dom = content;
  }

  return dom;
};

exports.update = function (arr, parent) {
  if (!Array.isArray(arr)) arr = [arr];

  if (parent) {
    parent.children = arr;
  } else {
    parent = null;
  }

  for (var i = 0; i < arr.length; i++) {
    var node = arr[i];
    var oldParent = node.parent || node.root,
        oldSiblings = oldParent && oldParent.children;

    if (oldSiblings && oldSiblings !== arr) {
      oldSiblings.splice(oldSiblings.indexOf(node), 1);

      if (node.prev) {
        node.prev.next = node.next;
      }

      if (node.next) {
        node.next.prev = node.prev;
      }
    }

    if (parent) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }

    if (parent && parent.type === 'root') {
      node.root = parent;
      node.parent = null;
    } else {
      node.root = null;
      node.parent = parent;
    }
  }

  return parent;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLmpzIl0sIm5hbWVzIjpbImh0bWxwYXJzZXIiLCJyZXF1aXJlIiwicGFyc2U1IiwiZXhwb3J0cyIsIm1vZHVsZSIsImNvbnRlbnQiLCJvcHRpb25zIiwiaXNEb2N1bWVudCIsImRvbSIsImV2YWx1YXRlIiwicm9vdCIsInR5cGUiLCJwYXJlbnQiLCJ1cGRhdGUiLCJwYXJzZVdpdGhQYXJzZTUiLCJwYXJzZSIsInBhcnNlRnJhZ21lbnQiLCJ0cmVlQWRhcHRlciIsInRyZWVBZGFwdGVycyIsImh0bWxwYXJzZXIyIiwiY2hpbGRyZW4iLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwidXNlSHRtbFBhcnNlcjIiLCJ4bWxNb2RlIiwiX3VzZUh0bWxQYXJzZXIyIiwicGFyc2VET00iLCJhcnIiLCJBcnJheSIsImlzQXJyYXkiLCJpIiwibGVuZ3RoIiwibm9kZSIsIm9sZFBhcmVudCIsIm9sZFNpYmxpbmdzIiwic3BsaWNlIiwiaW5kZXhPZiIsInByZXYiLCJuZXh0Il0sIm1hcHBpbmdzIjoiQUFHQSxJQUFJQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQXhCO0FBQUEsSUFDSUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQURwQjs7QUFNQUUsT0FBTyxHQUFHQyxNQUFNLENBQUNELE9BQVAsR0FBaUIsVUFBU0UsT0FBVCxFQUFrQkMsT0FBbEIsRUFBMkJDLFVBQTNCLEVBQXVDO0FBQ2hFLE1BQUlDLEdBQUcsR0FBR0wsT0FBTyxDQUFDTSxRQUFSLENBQWlCSixPQUFqQixFQUEwQkMsT0FBMUIsRUFBbUNDLFVBQW5DLENBQVY7QUFBQSxNQUVJRyxJQUFJLEdBQUdQLE9BQU8sQ0FBQ00sUUFBUixDQUFpQixlQUFqQixFQUFrQ0gsT0FBbEMsRUFBMkMsS0FBM0MsRUFBa0QsQ0FBbEQsQ0FGWDtBQUlBSSxFQUFBQSxJQUFJLENBQUNDLElBQUwsR0FBWSxNQUFaO0FBQ0FELEVBQUFBLElBQUksQ0FBQ0UsTUFBTCxHQUFjLElBQWQ7QUFH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QUFHLENBQUNHLENBQUMsR0FBRyxDQUFMLENBQUgsSUFBYyxJQUExQjtBQUNELEtBSEQsTUFHTztBQUNMRSxNQUFBQSxJQUFJLENBQUNLLElBQUwsR0FBWUwsSUFBSSxDQUFDTSxJQUFMLEdBQVksSUFBeEI7QUFDRDs7QUFFRCxRQUFJM0IsTUFBTSxJQUFJQSxNQUFNLENBQUNELElBQVAsS0FBZ0IsTUFBOUIsRUFBc0M7QUFDcENzQixNQUFBQSxJQUFJLENBQUN2QixJQUFMLEdBQVlFLE1BQVo7QUFDQXFCLE1BQUFBLElBQUksQ0FBQ3JCLE1BQUwsR0FBYyxJQUFkO0FBQ0QsS0FIRCxNQUdPO0FBQ0xxQixNQUFBQSxJQUFJLENBQUN2QixJQUFMLEdBQVksSUFBWjtBQUNBdUIsTUFBQUEsSUFBSSxDQUFDckIsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPQSxNQUFQO0FBQ0QsQ0E3Q0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICBNb2R1bGUgRGVwZW5kZW5jaWVzXG4qL1xudmFyIGh0bWxwYXJzZXIgPSByZXF1aXJlKCdodG1scGFyc2VyMicpLFxuICAgIHBhcnNlNSA9IHJlcXVpcmUoJ3BhcnNlNScpO1xuXG4vKlxuICBQYXJzZXJcbiovXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb250ZW50LCBvcHRpb25zLCBpc0RvY3VtZW50KSB7XG4gIHZhciBkb20gPSBleHBvcnRzLmV2YWx1YXRlKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQpLFxuICAgICAgLy8gR2VuZXJpYyByb290IGVsZW1lbnRcbiAgICAgIHJvb3QgPSBleHBvcnRzLmV2YWx1YXRlKCc8cm9vdD48L3Jvb3Q+Jywgb3B0aW9ucywgZmFsc2UpWzBdO1xuXG4gIHJvb3QudHlwZSA9ICdyb290JztcbiAgcm9vdC5wYXJlbnQgPSBudWxsO1xuXG4gIC8vIFVwZGF0ZSB0aGUgZG9tIHVzaW5nIHRoZSByb290XG4gIGV4cG9ydHMudXBkYXRlKGRvbSwgcm9vdCk7XG5cbiAgcmV0dXJuIHJvb3Q7XG59O1xuXG5mdW5jdGlvbiBwYXJzZVdpdGhQYXJzZTUgKGNvbnRlbnQsIGlzRG9jdW1lbnQpIHtcbiAgdmFyIHBhcnNlID0gaXNEb2N1bWVudCA/IHBhcnNlNS5wYXJzZSA6IHBhcnNlNS5wYXJzZUZyYWdtZW50LFxuICAgICAgcm9vdCA9IHBhcnNlKGNvbnRlbnQsIHsgdHJlZUFkYXB0ZXI6IHBhcnNlNS50cmVlQWRhcHRlcnMuaHRtbHBhcnNlcjIgfSk7XG5cbiAgcmV0dXJuIHJvb3QuY2hpbGRyZW47XG59XG5cbmV4cG9ydHMuZXZhbHVhdGUgPSBmdW5jdGlvbihjb250ZW50LCBvcHRpb25zLCBpc0RvY3VtZW50KSB7XG4gIC8vIG9wdGlvbnMgPSBvcHRpb25zIHx8ICQuZm4ub3B0aW9ucztcblxuICB2YXIgZG9tO1xuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY29udGVudCkpXG4gICAgY29udGVudCA9IGNvbnRlbnQudG9TdHJpbmcoKTtcblxuICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHVzZUh0bWxQYXJzZXIyID0gb3B0aW9ucy54bWxNb2RlIHx8IG9wdGlvbnMuX3VzZUh0bWxQYXJzZXIyO1xuXG4gICAgZG9tID0gdXNlSHRtbFBhcnNlcjIgPyBodG1scGFyc2VyLnBhcnNlRE9NKGNvbnRlbnQsIG9wdGlvbnMpIDogcGFyc2VXaXRoUGFyc2U1KGNvbnRlbnQsIGlzRG9jdW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGRvbSA9IGNvbnRlbnQ7XG4gIH1cblxuICByZXR1cm4gZG9tO1xufTtcblxuLypcbiAgVXBkYXRlIHRoZSBkb20gc3RydWN0dXJlLCBmb3Igb25lIGNoYW5nZWQgbGF5ZXJcbiovXG5leHBvcnRzLnVwZGF0ZSA9IGZ1bmN0aW9uKGFyciwgcGFyZW50KSB7XG4gIC8vIG5vcm1hbGl6ZVxuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkgYXJyID0gW2Fycl07XG5cbiAgLy8gVXBkYXRlIHBhcmVudFxuICBpZiAocGFyZW50KSB7XG4gICAgcGFyZW50LmNoaWxkcmVuID0gYXJyO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudCA9IG51bGw7XG4gIH1cblxuICAvLyBVcGRhdGUgbmVpZ2hib3JzXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBhcnJbaV07XG5cbiAgICAvLyBDbGVhbmx5IHJlbW92ZSBleGlzdGluZyBub2RlcyBmcm9tIHRoZWlyIHByZXZpb3VzIHN0cnVjdHVyZXMuXG4gICAgdmFyIG9sZFBhcmVudCA9IG5vZGUucGFyZW50IHx8IG5vZGUucm9vdCxcbiAgICAgICAgb2xkU2libGluZ3MgPSBvbGRQYXJlbnQgJiYgb2xkUGFyZW50LmNoaWxkcmVuO1xuICAgIGlmIChvbGRTaWJsaW5ncyAmJiBvbGRTaWJsaW5ncyAhPT0gYXJyKSB7XG4gICAgICBvbGRTaWJsaW5ncy5zcGxpY2Uob2xkU2libGluZ3MuaW5kZXhPZihub2RlKSwgMSk7XG4gICAgICBpZiAobm9kZS5wcmV2KSB7XG4gICAgICAgIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUubmV4dCkge1xuICAgICAgICBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBub2RlLnByZXYgPSBhcnJbaSAtIDFdIHx8IG51bGw7XG4gICAgICBub2RlLm5leHQgPSBhcnJbaSArIDFdIHx8IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUucHJldiA9IG5vZGUubmV4dCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudHlwZSA9PT0gJ3Jvb3QnKSB7XG4gICAgICBub2RlLnJvb3QgPSBwYXJlbnQ7XG4gICAgICBub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUucm9vdCA9IG51bGw7XG4gICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyZW50O1xufTtcblxuLy8gbW9kdWxlLmV4cG9ydHMgPSAkLmV4dGVuZChleHBvcnRzKTtcbiJdfQ==