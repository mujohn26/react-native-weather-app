08d3afc9d2c462d7ae8aaba0b7dcc504
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _omitBy = _interopRequireDefault(require("lodash/omitBy"));

var _isNil = _interopRequireDefault(require("lodash/isNil"));

var _reactIs = require("react-is");

var _RSTTraversal = require("enzyme/build/RSTTraversal");

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function getChildren(node, options) {
  var children = (0, _utils.compact)((0, _RSTTraversal.childrenOfNode)(node).map(function (n) {
    return internalNodeToJson(n, options);
  }));

  if (children.length > 0) {
    return children;
  }

  return null;
}

function getProps(node, options) {
  var props = (0, _omitBy.default)((0, _extends2.default)({}, (0, _RSTTraversal.propsOfNode)(node)), function (val, key) {
    if (key === 'children' || val === undefined) {
      return true;
    }

    if (options.ignoreDefaultProps === true && (0, _reactIs.isValidElementType)(node.type) && node.type.defaultProps && key in node.type.defaultProps && node.type.defaultProps[key] === val) {
      return true;
    }
  });

  if (!(0, _isNil.default)(node.key) && options.noKey !== true) {
    props.key = node.key;
  }

  return props;
}

function internalNodeToJson(node, options) {
  if (typeof node === 'string' || typeof node === 'number') {
    return node;
  }

  if ((0, _isNil.default)(node) || node === false) {
    return '';
  }

  var json = (0, _utils.applyMap)({
    node: node,
    type: (0, _utils.extractTypeName)(node),
    props: getProps(node, options),
    children: getChildren(node, options),
    $$typeof: Symbol.for('react.test.json')
  }, options);

  if (!(0, _isNil.default)(json) && !(0, _isNil.default)(json.type)) {
    return json;
  }
}

var shallowToJson = function shallowToJson(wrapper) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if ((0, _isNil.default)(wrapper) || wrapper.length === 0) {
    return null;
  }

  if (wrapper.length > 1 && typeof wrapper.getNodesInternal === 'function') {
    var nodes = wrapper.getNodesInternal();
    return nodes.map(function (node) {
      return internalNodeToJson(node, options);
    });
  }

  if (typeof wrapper.getNodeInternal === 'function') {
    var node = wrapper.getNodeInternal();
    return internalNodeToJson(node, options);
  }

  return null;
};

var _default = shallowToJson;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,