a8a452584a8834d89508a7995b2a8302
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _expoStatusBar = require("expo-status-bar");

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _forest_cloudy = _interopRequireDefault(require("../assets/Images/forest_cloudy.png"));

var _dateFns = require("date-fns");

var _imageHelper = _interopRequireDefault(require("../helpers/imageHelper"));

var _seasonTittleHelper = _interopRequireDefault(require("../helpers/seasonTittleHelper"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var Weather = function (_Component) {
  (0, _inherits2.default)(Weather, _Component);

  var _super = _createSuper(Weather);

  function Weather(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Weather);
    _this = _super.call(this, props);
    _this.state = {
      weekDays: []
    };
    return _this;
  }

  (0, _createClass2.default)(Weather, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      var _this2 = this;

      var daysByHour = this.props.weatherData.list.map(function (day) {
        var dt = new Date(day.dt * 1000);
        return {
          date: dt,
          hour: dt.getHours(),
          name: (0, _dateFns.format)(dt, "EEEE"),
          temp: Math.round(day.main.temp),
          weather: day.weather[0].main
        };
      });
      daysByHour.forEach(function (obj) {
        if (!_this2.state.weekDays.some(function (o) {
          return o.name === obj.name;
        })) {
          _this2.state.weekDays.push(_objectSpread({}, obj));
        }
      });
    }
  }, {
    key: "render",
    value: function render() {
      var seasonStyle;

      if (this.props.currentWeather.weather[0].main === "Clouds") {
        seasonStyle = styles.cloudSeasonStyle;
      } else if (this.props.currentWeather.weather[0].main === "Rain") {
        seasonStyle = styles.rainSeasonStyle;
      } else {
        seasonStyle = styles.sunSeasonStyle;
      }

      return _react.default.createElement(_reactNative.View, {
        style: styles.container
      }, _react.default.createElement(_reactNative.View, {
        style: styles.uppContainer
      }, _react.default.createElement(_reactNative.ImageBackground, {
        source: _imageHelper.default[this.props.currentWeather.weather[0].main],
        style: styles.image
      }, _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
        style: styles.currentDayStatUpper
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.text
      }, Math.round(this.props.currentWeather.main.temp), "\xB0"), _react.default.createElement(_reactNative.Text, {
        style: styles.text
      }, _seasonTittleHelper.default[this.props.currentWeather.weather[0].main])), _react.default.createElement(_reactNative.View, {
        style: styles.currentDayStatContainer
      }, _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
        style: styles.currentDayStat
      }, Math.round(this.props.currentWeather.main.temp_min), "\xB0"), _react.default.createElement(_reactNative.Text, {
        style: styles.currentDayStatTitle
      }, "Min")), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
        style: styles.currentDayStat
      }, Math.round(this.props.currentWeather.main.temp), "\xB0"), _react.default.createElement(_reactNative.Text, {
        style: styles.currentDayStatTitle
      }, "Current")), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.Text, {
        style: styles.currentDayStat
      }, Math.round(this.props.currentWeather.main.temp_max), "\xB0"), _react.default.createElement(_reactNative.Text, {
        style: styles.currentDayStatTitle
      }, "Max")))))), _react.default.createElement(_reactNative.View, {
        style: [styles.downContainer, seasonStyle]
      }, this.state.weekDays.length != 0 ? this.state.weekDays.map(function (data, index) {
        return _react.default.createElement(_reactNative.View, {
          style: styles.flexRow,
          key: data.name
        }, _react.default.createElement(_reactNative.View, {
          style: styles.alignItem
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.alignItemText
        }, data.name)), _react.default.createElement(_reactNative.View, {
          style: styles.alignItem
        }, _react.default.createElement(_reactNative.Image, {
          style: styles.icons,
          source: _imageHelper.default[data.weather === "Rain" ? "rainIcon" : "sunnyIcon"]
        })), _react.default.createElement(_reactNative.View, {
          style: styles.alignItem
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.alignItemText
        }, Math.round(data.temp), "\xB0")));
      }) : _react.default.createElement(_reactNative.Text, null, "Loading...")));
    }
  }]);
  return Weather;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column"
  },
  uppContainer: {
    height: 380,
    width: 400
  },
  downContainer: {
    height: 370,
    width: 400,
    flex: 1,
    flexDirection: "column",
    justifyContent: "space-evenly",
    overflow: "scroll"
  },
  defaultSeasonStyle: {
    backgroundColor: "#57575D"
  },
  rainSeasonStyle: {
    backgroundColor: "#57575D"
  },
  cloudSeasonStyle: {
    backgroundColor: "#54717A"
  },
  sunSeasonStyle: {
    backgroundColor: "#47AB2F"
  },
  image: {
    flex: 1,
    resizeMode: "cover",
    justifyContent: "center"
  },
  text: {
    color: "white",
    fontSize: 42,
    fontWeight: "bold",
    textAlign: "center"
  },
  currentDayStat: {
    textAlign: "center",
    color: "white",
    fontWeight: "bold"
  },
  currentDayStatTitle: {
    color: "white"
  },
  currentDayStatUpper: {
    marginTop: 60
  },
  currentDayStatContainer: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "space-around",
    marginTop: 110
  },
  icons: {
    height: 40,
    width: 40
  },
  flexRow: {
    flex: 1,
    flexDirection: "row",
    justifyContent: "space-around",
    marginTop: 20,
    width: "100%"
  },
  alignItem: {
    textAlign: "center",
    width: "33%",
    marginLeft: 100
  },
  alignItemText: {
    color: "white"
  }
});

var _default = Weather;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,