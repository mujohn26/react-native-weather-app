b2e1475620b2f0421b950ade11e76600
'use strict';

var keys = require('object-keys');

var canBeObject = function canBeObject(obj) {
  return typeof obj !== 'undefined' && obj !== null;
};

var hasSymbols = require('has-symbols/shams')();

var callBound = require('call-bind/callBound');

var toObject = Object;
var $push = callBound('Array.prototype.push');
var $propIsEnumerable = callBound('Object.prototype.propertyIsEnumerable');
var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;

module.exports = function assign(target, source1) {
  if (!canBeObject(target)) {
    throw new TypeError('target must be an object');
  }

  var objTarget = toObject(target);
  var s, source, i, props, syms, value, key;

  for (s = 1; s < arguments.length; ++s) {
    source = toObject(arguments[s]);
    props = keys(source);
    var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);

    if (getSymbols) {
      syms = getSymbols(source);

      for (i = 0; i < syms.length; ++i) {
        key = syms[i];

        if ($propIsEnumerable(source, key)) {
          $push(props, key);
        }
      }
    }

    for (i = 0; i < props.length; ++i) {
      key = props[i];
      value = source[key];

      if ($propIsEnumerable(source, key)) {
        objTarget[key] = value;
      }
    }
  }

  return objTarget;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImltcGxlbWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbImtleXMiLCJyZXF1aXJlIiwiY2FuQmVPYmplY3QiLCJvYmoiLCJoYXNTeW1ib2xzIiwiY2FsbEJvdW5kIiwidG9PYmplY3QiLCJPYmplY3QiLCIkcHVzaCIsIiRwcm9wSXNFbnVtZXJhYmxlIiwib3JpZ2luYWxHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibW9kdWxlIiwiZXhwb3J0cyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZTEiLCJUeXBlRXJyb3IiLCJvYmpUYXJnZXQiLCJzIiwic291cmNlIiwiaSIsInByb3BzIiwic3ltcyIsInZhbHVlIiwia2V5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZ2V0U3ltYm9scyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBR0EsSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUFsQjs7QUFDQSxJQUFJQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFVQyxHQUFWLEVBQWU7QUFDaEMsU0FBTyxPQUFPQSxHQUFQLEtBQWUsV0FBZixJQUE4QkEsR0FBRyxLQUFLLElBQTdDO0FBQ0EsQ0FGRDs7QUFHQSxJQUFJQyxVQUFVLEdBQUdILE9BQU8sQ0FBQyxtQkFBRCxDQUFQLEVBQWpCOztBQUNBLElBQUlJLFNBQVMsR0FBR0osT0FBTyxDQUFDLHFCQUFELENBQXZCOztBQUNBLElBQUlLLFFBQVEsR0FBR0MsTUFBZjtBQUNBLElBQUlDLEtBQUssR0FBR0gsU0FBUyxDQUFDLHNCQUFELENBQXJCO0FBQ0EsSUFBSUksaUJBQWlCLEdBQUdKLFNBQVMsQ0FBQyx1Q0FBRCxDQUFqQztBQUNBLElBQUlLLGtCQUFrQixHQUFHTixVQUFVLEdBQUdHLE1BQU0sQ0FBQ0kscUJBQVYsR0FBa0MsSUFBckU7O0FBR0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxNQUFULENBQWdCQyxNQUFoQixFQUF3QkMsT0FBeEIsRUFBaUM7QUFDakQsTUFBSSxDQUFDZCxXQUFXLENBQUNhLE1BQUQsQ0FBaEIsRUFBMEI7QUFBRSxVQUFNLElBQUlFLFNBQUosQ0FBYywwQkFBZCxDQUFOO0FBQWtEOztBQUM5RSxNQUFJQyxTQUFTLEdBQUdaLFFBQVEsQ0FBQ1MsTUFBRCxDQUF4QjtBQUNBLE1BQUlJLENBQUosRUFBT0MsTUFBUCxFQUFlQyxDQUFmLEVBQWtCQyxLQUFsQixFQUF5QkMsSUFBekIsRUFBK0JDLEtBQS9CLEVBQXNDQyxHQUF0Qzs7QUFDQSxPQUFLTixDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdPLFNBQVMsQ0FBQ0MsTUFBMUIsRUFBa0MsRUFBRVIsQ0FBcEMsRUFBdUM7QUFDdENDLElBQUFBLE1BQU0sR0FBR2QsUUFBUSxDQUFDb0IsU0FBUyxDQUFDUCxDQUFELENBQVYsQ0FBakI7QUFDQUcsSUFBQUEsS0FBSyxHQUFHdEIsSUFBSSxDQUFDb0IsTUFBRCxDQUFaO0FBQ0EsUUFBSVEsVUFBVSxHQUFHeEIsVUFBVSxLQUFLRyxNQUFNLENBQUNJLHFCQUFQLElBQWdDRCxrQkFBckMsQ0FBM0I7O0FBQ0EsUUFBSWtCLFVBQUosRUFBZ0I7QUFDZkwsTUFBQUEsSUFBSSxHQUFHSyxVQUFVLENBQUNSLE1BQUQsQ0FBakI7O0FBQ0EsV0FBS0MsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHRSxJQUFJLENBQUNJLE1BQXJCLEVBQTZCLEVBQUVOLENBQS9CLEVBQWtDO0FBQ2pDSSxRQUFBQSxHQUFHLEdBQUdGLElBQUksQ0FBQ0YsQ0FBRCxDQUFWOztBQUNBLFlBQUlaLGlCQUFpQixDQUFDVyxNQUFELEVBQVNLLEdBQVQsQ0FBckIsRUFBb0M7QUFDbkNqQixVQUFBQSxLQUFLLENBQUNjLEtBQUQsRUFBUUcsR0FBUixDQUFMO0FBQ0E7QUFDRDtBQUNEOztBQUNELFNBQUtKLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR0MsS0FBSyxDQUFDSyxNQUF0QixFQUE4QixFQUFFTixDQUFoQyxFQUFtQztBQUNsQ0ksTUFBQUEsR0FBRyxHQUFHSCxLQUFLLENBQUNELENBQUQsQ0FBWDtBQUNBRyxNQUFBQSxLQUFLLEdBQUdKLE1BQU0sQ0FBQ0ssR0FBRCxDQUFkOztBQUNBLFVBQUloQixpQkFBaUIsQ0FBQ1csTUFBRCxFQUFTSyxHQUFULENBQXJCLEVBQW9DO0FBQ25DUCxRQUFBQSxTQUFTLENBQUNPLEdBQUQsQ0FBVCxHQUFpQkQsS0FBakI7QUFDQTtBQUNEO0FBQ0Q7O0FBQ0QsU0FBT04sU0FBUDtBQUNBLENBMUJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczYtc2hpbVxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGNhbkJlT2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuXHRyZXR1cm4gdHlwZW9mIG9iaiAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqICE9PSBudWxsO1xufTtcbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMvc2hhbXMnKSgpO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciB0b09iamVjdCA9IE9iamVjdDtcbnZhciAkcHVzaCA9IGNhbGxCb3VuZCgnQXJyYXkucHJvdG90eXBlLnB1c2gnKTtcbnZhciAkcHJvcElzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xudmFyIG9yaWdpbmFsR2V0U3ltYm9scyA9IGhhc1N5bWJvbHMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzIDogbnVsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZTEpIHtcblx0aWYgKCFjYW5CZU9iamVjdCh0YXJnZXQpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpOyB9XG5cdHZhciBvYmpUYXJnZXQgPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgcywgc291cmNlLCBpLCBwcm9wcywgc3ltcywgdmFsdWUsIGtleTtcblx0Zm9yIChzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7ICsrcykge1xuXHRcdHNvdXJjZSA9IHRvT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cdFx0cHJvcHMgPSBrZXlzKHNvdXJjZSk7XG5cdFx0dmFyIGdldFN5bWJvbHMgPSBoYXNTeW1ib2xzICYmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzIHx8IG9yaWdpbmFsR2V0U3ltYm9scyk7XG5cdFx0aWYgKGdldFN5bWJvbHMpIHtcblx0XHRcdHN5bXMgPSBnZXRTeW1ib2xzKHNvdXJjZSk7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgc3ltcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRrZXkgPSBzeW1zW2ldO1xuXHRcdFx0XHRpZiAoJHByb3BJc0VudW1lcmFibGUoc291cmNlLCBrZXkpKSB7XG5cdFx0XHRcdFx0JHB1c2gocHJvcHMsIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRrZXkgPSBwcm9wc1tpXTtcblx0XHRcdHZhbHVlID0gc291cmNlW2tleV07XG5cdFx0XHRpZiAoJHByb3BJc0VudW1lcmFibGUoc291cmNlLCBrZXkpKSB7XG5cdFx0XHRcdG9ialRhcmdldFtrZXldID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvYmpUYXJnZXQ7XG59O1xuIl19