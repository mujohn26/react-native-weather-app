c0403c230dfc5edb34b8e1d9afc4d237
'use strict';

var WritableStream = require('stream').Writable,
    inherits = require('util').inherits,
    Parser = require("./index");

var ParserStream = module.exports = function (options) {
  WritableStream.call(this);
  this.parser = new Parser(options);
  this.lastChunkWritten = false;
  this.writeCallback = null;
  this.pausedByScript = false;
  this.document = this.parser.treeAdapter.createDocument();
  this.pendingHtmlInsertions = [];
  this._resume = this._resume.bind(this);
  this._documentWrite = this._documentWrite.bind(this);
  this._scriptHandler = this._scriptHandler.bind(this);

  this.parser._bootstrap(this.document, null);
};

inherits(ParserStream, WritableStream);

ParserStream.prototype._write = function (chunk, encoding, callback) {
  this.writeCallback = callback;
  this.parser.tokenizer.write(chunk.toString('utf8'), this.lastChunkWritten);

  this._runParsingLoop();
};

ParserStream.prototype.end = function (chunk, encoding, callback) {
  this.lastChunkWritten = true;
  WritableStream.prototype.end.call(this, chunk || '', encoding, callback);
};

ParserStream.prototype._runParsingLoop = function () {
  this.parser.runParsingLoopForCurrentChunk(this.writeCallback, this._scriptHandler);
};

ParserStream.prototype._resume = function () {
  if (!this.pausedByScript) throw new Error('Parser was already resumed');

  while (this.pendingHtmlInsertions.length) {
    var html = this.pendingHtmlInsertions.pop();
    this.parser.tokenizer.insertHtmlAtCurrentPos(html);
  }

  this.pausedByScript = false;
  if (this.parser.tokenizer.active) this._runParsingLoop();
};

ParserStream.prototype._documentWrite = function (html) {
  if (!this.parser.stopped) this.pendingHtmlInsertions.push(html);
};

ParserStream.prototype._scriptHandler = function (scriptElement) {
  if (this.listeners('script').length) {
    this.pausedByScript = true;
    this.emit('script', scriptElement, this._documentWrite, this._resume);
  } else this._runParsingLoop();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlcl9zdHJlYW0uanMiXSwibmFtZXMiOlsiV3JpdGFibGVTdHJlYW0iLCJyZXF1aXJlIiwiV3JpdGFibGUiLCJpbmhlcml0cyIsIlBhcnNlciIsIlBhcnNlclN0cmVhbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwiY2FsbCIsInBhcnNlciIsImxhc3RDaHVua1dyaXR0ZW4iLCJ3cml0ZUNhbGxiYWNrIiwicGF1c2VkQnlTY3JpcHQiLCJkb2N1bWVudCIsInRyZWVBZGFwdGVyIiwiY3JlYXRlRG9jdW1lbnQiLCJwZW5kaW5nSHRtbEluc2VydGlvbnMiLCJfcmVzdW1lIiwiYmluZCIsIl9kb2N1bWVudFdyaXRlIiwiX3NjcmlwdEhhbmRsZXIiLCJfYm9vdHN0cmFwIiwicHJvdG90eXBlIiwiX3dyaXRlIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwidG9rZW5pemVyIiwid3JpdGUiLCJ0b1N0cmluZyIsIl9ydW5QYXJzaW5nTG9vcCIsImVuZCIsInJ1blBhcnNpbmdMb29wRm9yQ3VycmVudENodW5rIiwiRXJyb3IiLCJsZW5ndGgiLCJodG1sIiwicG9wIiwiaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyIsImFjdGl2ZSIsInN0b3BwZWQiLCJwdXNoIiwic2NyaXB0RWxlbWVudCIsImxpc3RlbmVycyIsImVtaXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGNBQWMsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsUUFBdkM7QUFBQSxJQUNJQyxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JFLFFBRC9CO0FBQUEsSUFFSUMsTUFBTSxHQUFHSCxPQUFPLFdBRnBCOztBQUlBLElBQUlJLFlBQVksR0FBR0MsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLE9BQVYsRUFBbUI7QUFDbkRSLEVBQUFBLGNBQWMsQ0FBQ1MsSUFBZixDQUFvQixJQUFwQjtBQUVBLE9BQUtDLE1BQUwsR0FBYyxJQUFJTixN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LElBQUwsQ0FBVSxRQUFWLEVBQW9CRixhQUFwQixFQUFtQyxLQUFLdEIsY0FBeEMsRUFBd0QsS0FBS0YsT0FBN0Q7QUFDSCxHQUhELE1BS0ksS0FBS2EsZUFBTDtBQUNQLENBUEQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBXcml0YWJsZVN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpLldyaXRhYmxlLFxuICAgIGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzLFxuICAgIFBhcnNlciA9IHJlcXVpcmUoJy4vaW5kZXgnKTtcblxudmFyIFBhcnNlclN0cmVhbSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBXcml0YWJsZVN0cmVhbS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5wYXJzZXIgPSBuZXcgUGFyc2VyKG9wdGlvbnMpO1xuXG4gICAgdGhpcy5sYXN0Q2h1bmtXcml0dGVuID0gZmFsc2U7XG4gICAgdGhpcy53cml0ZUNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLnBhdXNlZEJ5U2NyaXB0ID0gZmFsc2U7XG5cbiAgICB0aGlzLmRvY3VtZW50ID0gdGhpcy5wYXJzZXIudHJlZUFkYXB0ZXIuY3JlYXRlRG9jdW1lbnQoKTtcblxuICAgIHRoaXMucGVuZGluZ0h0bWxJbnNlcnRpb25zID0gW107XG5cbiAgICB0aGlzLl9yZXN1bWUgPSB0aGlzLl9yZXN1bWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9kb2N1bWVudFdyaXRlID0gdGhpcy5fZG9jdW1lbnRXcml0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3NjcmlwdEhhbmRsZXIgPSB0aGlzLl9zY3JpcHRIYW5kbGVyLmJpbmQodGhpcyk7XG5cbiAgICB0aGlzLnBhcnNlci5fYm9vdHN0cmFwKHRoaXMuZG9jdW1lbnQsIG51bGwpO1xufTtcblxuaW5oZXJpdHMoUGFyc2VyU3RyZWFtLCBXcml0YWJsZVN0cmVhbSk7XG5cbi8vV3JpdGFibGVTdHJlYW0gaW1wbGVtZW50YXRpb25cblBhcnNlclN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICB0aGlzLndyaXRlQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB0aGlzLnBhcnNlci50b2tlbml6ZXIud3JpdGUoY2h1bmsudG9TdHJpbmcoJ3V0ZjgnKSwgdGhpcy5sYXN0Q2h1bmtXcml0dGVuKTtcbiAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcCgpO1xufTtcblxuUGFyc2VyU3RyZWFtLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMubGFzdENodW5rV3JpdHRlbiA9IHRydWU7XG4gICAgV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLmVuZC5jYWxsKHRoaXMsIGNodW5rIHx8ICcnLCBlbmNvZGluZywgY2FsbGJhY2spO1xufTtcblxuLy9TY3JpcHRhYmxlIHBhcnNlciBpbXBsZW1lbnRhdGlvblxuUGFyc2VyU3RyZWFtLnByb3RvdHlwZS5fcnVuUGFyc2luZ0xvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wYXJzZXIucnVuUGFyc2luZ0xvb3BGb3JDdXJyZW50Q2h1bmsodGhpcy53cml0ZUNhbGxiYWNrLCB0aGlzLl9zY3JpcHRIYW5kbGVyKTtcbn07XG5cblBhcnNlclN0cmVhbS5wcm90b3R5cGUuX3Jlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMucGF1c2VkQnlTY3JpcHQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyc2VyIHdhcyBhbHJlYWR5IHJlc3VtZWQnKTtcblxuICAgIHdoaWxlICh0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9ucy5wb3AoKTtcblxuICAgICAgICB0aGlzLnBhcnNlci50b2tlbml6ZXIuaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyhodG1sKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhdXNlZEJ5U2NyaXB0ID0gZmFsc2U7XG5cbiAgICAvL05PVEU6IGtlZXAgcGFyc2luZyBpZiB3ZSBkb24ndCB3YWl0IGZvciB0aGUgbmV4dCBpbnB1dCBjaHVua1xuICAgIGlmICh0aGlzLnBhcnNlci50b2tlbml6ZXIuYWN0aXZlKVxuICAgICAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcCgpO1xufTtcblxuUGFyc2VyU3RyZWFtLnByb3RvdHlwZS5fZG9jdW1lbnRXcml0ZSA9IGZ1bmN0aW9uIChodG1sKSB7XG4gICAgaWYgKCF0aGlzLnBhcnNlci5zdG9wcGVkKVxuICAgICAgICB0aGlzLnBlbmRpbmdIdG1sSW5zZXJ0aW9ucy5wdXNoKGh0bWwpO1xufTtcblxuUGFyc2VyU3RyZWFtLnByb3RvdHlwZS5fc2NyaXB0SGFuZGxlciA9IGZ1bmN0aW9uIChzY3JpcHRFbGVtZW50KSB7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJzKCdzY3JpcHQnKS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wYXVzZWRCeVNjcmlwdCA9IHRydWU7XG4gICAgICAgIHRoaXMuZW1pdCgnc2NyaXB0Jywgc2NyaXB0RWxlbWVudCwgdGhpcy5fZG9jdW1lbnRXcml0ZSwgdGhpcy5fcmVzdW1lKTtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcCgpO1xufTtcblxuIl19