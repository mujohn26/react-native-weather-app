480af26503c0ba2e8dbae6c32e06b54f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = buildMatchFn;

function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImJ1aWxkTWF0Y2hGbiIsImFyZ3MiLCJkaXJ0eVN0cmluZyIsImRpcnR5T3B0aW9ucyIsInN0cmluZyIsIlN0cmluZyIsIm9wdGlvbnMiLCJ3aWR0aCIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZmluZEluZGV4IiwicGF0dGVybiIsInRlc3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJzbGljZSIsImxlbmd0aCIsIm9iamVjdCIsInByZWRpY2F0ZSIsImtleSIsImhhc093blByb3BlcnR5IiwiYXJyYXkiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxZQUFsQjs7QUFFQSxTQUFTQSxZQUFULENBQXNCQyxJQUF0QixFQUE0QjtBQUMxQixTQUFPLFVBQVVDLFdBQVYsRUFBdUJDLFlBQXZCLEVBQXFDO0FBQzFDLFFBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDSCxXQUFELENBQW5CO0FBQ0EsUUFBSUksT0FBTyxHQUFHSCxZQUFZLElBQUksRUFBOUI7QUFDQSxRQUFJSSxLQUFLLEdBQUdELE9BQU8sQ0FBQ0MsS0FBcEI7QUFDQSxRQUFJQyxZQUFZLEdBQUdELEtBQUssSUFBSU4sSUFBSSxDQUFDUSxhQUFMLENBQW1CRixLQUFuQixDQUFULElBQXNDTixJQUFJLENBQUNRLGFBQUwsQ0FBbUJSLElBQUksQ0FBQ1MsaUJBQXhCLENBQXpEO0FBQ0EsUUFBSUMsV0FBVyxHQUFHUCxNQUFNLENBQUNRLEtBQVAsQ0FBYUosWUFBYixDQUFsQjs7QUFFQSxRQUFJLENBQUNHLFdBQUwsRUFBa0I7QUFDaEIsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBSUUsYUFBYSxHQUFHRixXQUFXLENBQUMsQ0FBRCxDQUEvQjtBQUNBLFFBQUlHLGFBQWEsR0FBR1AsS0FBSyxJQUFJTixJQUFJLENBQUNhLGFBQUwsQ0FBbUJQLEtBQW5CLENBQVQsSUFBc0NOLElBQUksQ0FBQ2EsYUFBTCxDQUFtQmIsSUFBSSxDQUFDYyxpQkFBeEIsQ0FBMUQ7QUFDQSxRQUFJakIsS0FBSjs7QUFFQSxRQUFJSCxNQUFNLENBQUNxQixTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLGFBQS9CLE1BQWtELGdCQUF0RCxFQUF3RTtBQUN0RWhCLE1BQUFBLEtBQUssR0FBR3FCLFNBQVMsQ0FBQ0wsYUFBRCxFQUFnQixVQUFVTSxPQUFWLEVBQW1CO0FBQ2xELGVBQU9BLE9BQU8sQ0FBQ0MsSUFBUixDQUFhUixhQUFiLENBQVA7QUFDRCxPQUZnQixDQUFqQjtBQUdELEtBSkQsTUFJTztBQUNMZixNQUFBQSxLQUFLLEdBQUd3QixPQUFPLENBQUNSLGFBQUQsRUFBZ0IsVUFBVU0sT0FBVixFQUFtQjtBQUNoRCxlQUFPQSxPQUFPLENBQUNDLElBQVIsQ0FBYVIsYUFBYixDQUFQO0FBQ0QsT0FGYyxDQUFmO0FBR0Q7O0FBRURmLElBQUFBLEtBQUssR0FBR0csSUFBSSxDQUFDc0IsYUFBTCxHQUFxQnRCLElBQUksQ0FBQ3NCLGFBQUwsQ0FBbUJ6QixLQUFuQixDQUFyQixHQUFpREEsS0FBekQ7QUFDQUEsSUFBQUEsS0FBSyxHQUFHUSxPQUFPLENBQUNpQixhQUFSLEdBQXdCakIsT0FBTyxDQUFDaUIsYUFBUixDQUFzQnpCLEtBQXRCLENBQXhCLEdBQXVEQSxLQUEvRDtBQUNBLFdBQU87QUFDTEEsTUFBQUEsS0FBSyxFQUFFQSxLQURGO0FBRUwwQixNQUFBQSxJQUFJLEVBQUVwQixNQUFNLENBQUNxQixLQUFQLENBQWFaLGFBQWEsQ0FBQ2EsTUFBM0I7QUFGRCxLQUFQO0FBSUQsR0EvQkQ7QUFnQ0Q7O0FBRUQsU0FBU0osT0FBVCxDQUFpQkssTUFBakIsRUFBeUJDLFNBQXpCLEVBQW9DO0FBQ2xDLE9BQUssSUFBSUMsR0FBVCxJQUFnQkYsTUFBaEIsRUFBd0I7QUFDdEIsUUFBSUEsTUFBTSxDQUFDRyxjQUFQLENBQXNCRCxHQUF0QixLQUE4QkQsU0FBUyxDQUFDRCxNQUFNLENBQUNFLEdBQUQsQ0FBUCxDQUEzQyxFQUEwRDtBQUN4RCxhQUFPQSxHQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVNWLFNBQVQsQ0FBbUJZLEtBQW5CLEVBQTBCSCxTQUExQixFQUFxQztBQUNuQyxPQUFLLElBQUlDLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdFLEtBQUssQ0FBQ0wsTUFBOUIsRUFBc0NHLEdBQUcsRUFBekMsRUFBNkM7QUFDM0MsUUFBSUQsU0FBUyxDQUFDRyxLQUFLLENBQUNGLEdBQUQsQ0FBTixDQUFiLEVBQTJCO0FBQ3pCLGFBQU9BLEdBQVA7QUFDRDtBQUNGO0FBQ0Y7O0FBRURHLE1BQU0sQ0FBQ25DLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJ1aWxkTWF0Y2hGbjtcblxuZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eVN0cmluZywgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhkaXJ0eVN0cmluZyk7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwYXJzZVBhdHRlcm5zKSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgdmFsdWUgPSBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZpbmRLZXkocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=