1b596eb031a4a98ef79b0eaa5c5114fb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getRequiredBy;

var _objectIs = _interopRequireDefault(require("object-is"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function getRequiredBy(requiredByPropName, propType) {
  var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  function requiredBy(props, propName, componentName) {
    if (props[requiredByPropName]) {
      var propValue = props[propName];

      if ((0, _objectIs["default"])(propValue, defaultValue) || typeof propValue === 'undefined') {
        return new TypeError("".concat(componentName, ": when ").concat(requiredByPropName, " is true, prop \u201C").concat(propName, "\u201D must be present."));
      }
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return propType.apply(void 0, [props, propName, componentName].concat(rest));
  }

  requiredBy.isRequired = function requiredByRequired(props, propName, componentName) {
    var propValue = props[propName];

    if ((0, _objectIs["default"])(propValue, defaultValue)) {
      return new TypeError("".concat(componentName, ": prop \u201C").concat(propName, "\u201D must be present."));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return propType.isRequired.apply(propType, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(requiredBy, "requiredBy \u201C".concat(requiredByPropName, "\u201D"), [requiredByPropName, defaultValue]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1aXJlZEJ5LmpzIl0sIm5hbWVzIjpbImRlZmF1bHRWYWx1ZSIsInJlc3QiLCJwcm9wcyIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwicmVxdWlyZWRCeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsU0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOzs7Ozs7OztBQUVlLFNBQUEsYUFBQSxDQUFBLGtCQUFBLEVBQUEsUUFBQSxFQUEwRTtBQUFBLE1BQXJCQSxZQUFxQixHQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFOLElBQU07O0FBQ3ZGLFdBQUEsVUFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUE2RDtBQUMzRCxRQUFJRSxLQUFLLENBQVQsa0JBQVMsQ0FBVCxFQUErQjtBQUFBLFVBQ1RDLFNBRFMsR0FDS0QsS0FETCxDQUFBLFFBQUEsQ0FBQTs7QUFFN0IsVUFBSSxDQUFBLEdBQUEsU0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxZQUFBLEtBQStCLE9BQUEsU0FBQSxLQUFuQyxXQUFBLEVBQXFFO0FBQ25FLGVBQU8sSUFBQSxTQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsYUFBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLENBQUEsa0JBQUEsRUFBQSx1QkFBQSxFQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQVAseUJBQU8sQ0FBQSxDQUFQO0FBR0Q7QUFDRjs7QUFSMEQsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFORCxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsSUFBQSxDQUFOQTtBQUFNOztBQVMzRCxXQUFPRyxRQUFRLENBQVJBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLE1BQUFBLENBQVAsSUFBT0EsQ0FBQUEsQ0FBUDtBQUNEOztBQUNEQyxFQUFBQSxVQUFVLENBQVZBLFVBQUFBLEdBQXdCLFNBQUEsa0JBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBcUU7QUFBQSxRQUN2RUYsU0FEdUUsR0FDekRELEtBRHlELENBQUEsUUFBQSxDQUFBOztBQUUzRixRQUFJLENBQUEsR0FBQSxTQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFKLFlBQUksQ0FBSixFQUFpQztBQUMvQixhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSxlQUFBLEVBQUEsTUFBQSxDQUFBLFFBQUEsRUFBUCx5QkFBTyxDQUFBLENBQVA7QUFDRDs7QUFKMEYsU0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFORCxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsS0FBQSxDQUFOQTtBQUFNOztBQUszRixXQUFPRyxRQUFRLENBQVJBLFVBQUFBLENBQUFBLEtBQUFBLENBQUFBLFFBQUFBLEVBQVEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBQSxNQUFBLENBQWYsSUFBZSxDQUFSQSxDQUFQO0FBTEZDLEdBQUFBOztBQVFBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxVQUFBLEVBQUEsb0JBQUEsTUFBQSxDQUFBLGtCQUFBLEVBQUEsUUFBQSxDQUFBLEVBR0wsQ0FBQSxrQkFBQSxFQUhGLFlBR0UsQ0FISyxDQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaXMgZnJvbSAnb2JqZWN0LWlzJztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UmVxdWlyZWRCeShyZXF1aXJlZEJ5UHJvcE5hbWUsIHByb3BUeXBlLCBkZWZhdWx0VmFsdWUgPSBudWxsKSB7XG4gIGZ1bmN0aW9uIHJlcXVpcmVkQnkocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgaWYgKHByb3BzW3JlcXVpcmVkQnlQcm9wTmFtZV0pIHtcbiAgICAgIGNvbnN0IHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0gPSBwcm9wcztcbiAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGRlZmF1bHRWYWx1ZSkgfHwgdHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgYCR7Y29tcG9uZW50TmFtZX06IHdoZW4gJHtyZXF1aXJlZEJ5UHJvcE5hbWV9IGlzIHRydWUsIHByb3Ag4oCcJHtwcm9wTmFtZX3igJ0gbXVzdCBiZSBwcmVzZW50LmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9XG4gIHJlcXVpcmVkQnkuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIHJlcXVpcmVkQnlSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG4gICAgaWYgKGlzKHByb3BWYWx1ZSwgZGVmYXVsdFZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX06IHByb3Ag4oCcJHtwcm9wTmFtZX3igJ0gbXVzdCBiZSBwcmVzZW50LmApO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGUuaXNSZXF1aXJlZChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKFxuICAgIHJlcXVpcmVkQnksXG4gICAgYHJlcXVpcmVkQnkg4oCcJHtyZXF1aXJlZEJ5UHJvcE5hbWV94oCdYCxcbiAgICBbcmVxdWlyZWRCeVByb3BOYW1lLCBkZWZhdWx0VmFsdWVdLFxuICApO1xufVxuIl19