{"version":3,"sources":["weatherAction.js"],"names":["GET_WEATHER_DATA_SUCCESS","GET_WEATHER_DATA_FAILURE","url","callAPI","axios","create","baseURL","timeout","getWeather","dispatch","Location","requestPermissionsAsync","getCurrentPositionAsync","accuracy","Accuracy","High","location","lat","coords","latitude","lng","longitude","endpoint","get","res","data","filterData","currentWeather","list","filter","day","now","Date","getTime","Math","abs","timezone","currentDate","dt","getWeatherSuccess","weather","errorMessage","response","message","getWeatherFailure","type","payload","successMessage","rawData","id","city","name","country","coord","lon"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport const GET_WEATHER_DATA_SUCCESS = \"GET_WEATHER_DATA_SUCCESS\";\nexport const GET_WEATHER_DATA_FAILURE = \"GET_WEATHER_DATA_SUCCESS\";\nimport * as Location from 'expo-location';\nimport { API_KEY } from \"@env\";\nimport { isSameDay, format } from \"date-fns\";\n\n\n\n// fetch api with axios\nconst url = \"https://api.openweathermap.org/data/2.5\";\n\nconst callAPI = axios.create({\n  baseURL: url,\n  timeout: 1000,\n});\nexport const getWeather = () => async (dispatch) => {\n  try {\n    Location.requestPermissionsAsync();\n    let location = await Location.getCurrentPositionAsync({ accuracy: Location.Accuracy.High });\n    const lat= location.coords.latitude;\n    const lng = location.coords.longitude \n    const endpoint = `/forecast?lat=${lat}&lon=${lng}&units=metric&appid=${API_KEY}`;\n    const res = await callAPI.get(endpoint);\n    const data = filterData(res.data);\n    const currentWeather = data.list.filter((day) => {\n      const now = new Date().getTime() + Math.abs(data.timezone * 1000);\n      const currentDate = new Date(day.dt * 1000);\n      return isSameDay(now, currentDate);  \n  });\n  dispatch(getWeatherSuccess({data:data,weather:currentWeather[0]}));\n  } catch (error) {\n    const errorMessage = error.response.data.message;\n    dispatch(getWeatherFailure(errorMessage));\n  }\n};\n\n\nexport function getWeatherSuccess({data,weather}) {\n  return {\n    type: GET_WEATHER_DATA_SUCCESS,\n    payload: data,\n    weather: weather\n\n  };\n}\nexport function getWeatherFailure(data) {\n  return {\n    type: GET_WEATHER_DATA_FAILURE,\n    successMessage: data,\n  };\n}\n\nconst filterData = (rawData) => {\n  return {\n    id: rawData.city.id,\n    name: rawData.city.name,\n    country: rawData.city.country,\n    timezone: rawData.city.timezone,\n    coord: {\n      lat: rawData.city.coord.lat,\n      lon: rawData.city.coord.lon,\n    },\n    list: rawData.list,\n  };\n};"]}