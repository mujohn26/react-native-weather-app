137541d3373c8898fe8f39624b2d7702
'use strict';

var GetIntrinsic = require("../GetIntrinsic");

var $gOPD = require("../helpers/getOwnPropertyDescriptor");

var $TypeError = GetIntrinsic('%TypeError%');

var callBound = require("../helpers/callBound");

var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

var has = require('has');

var IsArray = require("./IsArray");

var IsPropertyKey = require("./IsPropertyKey");

var IsRegExp = require("./IsRegExp");

var ToPropertyDescriptor = require("./ToPropertyDescriptor");

var Type = require("./Type");

module.exports = function OrdinaryGetOwnProperty(O, P) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: O must be an Object');
  }

  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: P must be a Property Key');
  }

  if (!has(O, P)) {
    return void 0;
  }

  if (!$gOPD) {
    var arrayLength = IsArray(O) && P === 'length';
    var regexLastIndex = IsRegExp(O) && P === 'lastIndex';
    return {
      '[[Configurable]]': !(arrayLength || regexLastIndex),
      '[[Enumerable]]': $isEnumerable(O, P),
      '[[Value]]': O[P],
      '[[Writable]]': true
    };
  }

  return ToPropertyDescriptor($gOPD(O, P));
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9yZGluYXJ5R2V0T3duUHJvcGVydHkuanMiXSwibmFtZXMiOlsiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsIiRnT1BEIiwiJFR5cGVFcnJvciIsImNhbGxCb3VuZCIsIiRpc0VudW1lcmFibGUiLCJoYXMiLCJJc0FycmF5IiwiSXNQcm9wZXJ0eUtleSIsIklzUmVnRXhwIiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIk9yZGluYXJ5R2V0T3duUHJvcGVydHkiLCJPIiwiUCIsImFycmF5TGVuZ3RoIiwicmVnZXhMYXN0SW5kZXgiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFlBQVksR0FBR0MsT0FBTyxtQkFBMUI7O0FBRUEsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLHVDQUFuQjs7QUFDQSxJQUFJRSxVQUFVLEdBQUdILFlBQVksQ0FBQyxhQUFELENBQTdCOztBQUVBLElBQUlJLFNBQVMsR0FBR0gsT0FBTyx3QkFBdkI7O0FBRUEsSUFBSUksYUFBYSxHQUFHRCxTQUFTLENBQUMsdUNBQUQsQ0FBN0I7O0FBRUEsSUFBSUUsR0FBRyxHQUFHTCxPQUFPLENBQUMsS0FBRCxDQUFqQjs7QUFFQSxJQUFJTSxPQUFPLEdBQUdOLE9BQU8sYUFBckI7O0FBQ0EsSUFBSU8sYUFBYSxHQUFHUCxPQUFPLG1CQUEzQjs7QUFDQSxJQUFJUSxRQUFRLEdBQUdSLE9BQU8sY0FBdEI7O0FBQ0EsSUFBSVMsb0JBQW9CLEdBQUdULE9BQU8sMEJBQWxDOztBQUNBLElBQUlVLElBQUksR0FBR1YsT0FBTyxVQUFsQjs7QUFJQVcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLHNCQUFULENBQWdDQyxDQUFoQyxFQUFtQ0MsQ0FBbkMsRUFBc0M7QUFDdEQsTUFBSUwsSUFBSSxDQUFDSSxDQUFELENBQUosS0FBWSxRQUFoQixFQUEwQjtBQUN6QixVQUFNLElBQUlaLFVBQUosQ0FBZSx1Q0FBZixDQUFOO0FBQ0E7O0FBQ0QsTUFBSSxDQUFDSyxhQUFhLENBQUNRLENBQUQsQ0FBbEIsRUFBdUI7QUFDdEIsVUFBTSxJQUFJYixVQUFKLENBQWUsNENBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUksQ0FBQ0csR0FBRyxDQUFDUyxDQUFELEVBQUlDLENBQUosQ0FBUixFQUFnQjtBQUNmLFdBQU8sS0FBSyxDQUFaO0FBQ0E7O0FBQ0QsTUFBSSxDQUFDZCxLQUFMLEVBQVk7QUFFWCxRQUFJZSxXQUFXLEdBQUdWLE9BQU8sQ0FBQ1EsQ0FBRCxDQUFQLElBQWNDLENBQUMsS0FBSyxRQUF0QztBQUNBLFFBQUlFLGNBQWMsR0FBR1QsUUFBUSxDQUFDTSxDQUFELENBQVIsSUFBZUMsQ0FBQyxLQUFLLFdBQTFDO0FBQ0EsV0FBTztBQUNOLDBCQUFvQixFQUFFQyxXQUFXLElBQUlDLGNBQWpCLENBRGQ7QUFFTix3QkFBa0JiLGFBQWEsQ0FBQ1UsQ0FBRCxFQUFJQyxDQUFKLENBRnpCO0FBR04sbUJBQWFELENBQUMsQ0FBQ0MsQ0FBRCxDQUhSO0FBSU4sc0JBQWdCO0FBSlYsS0FBUDtBQU1BOztBQUNELFNBQU9OLG9CQUFvQixDQUFDUixLQUFLLENBQUNhLENBQUQsRUFBSUMsQ0FBSixDQUFOLENBQTNCO0FBQ0EsQ0F0QkQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRnT1BEID0gcmVxdWlyZSgnLi4vaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnLi4vaGVscGVycy9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBJc1JlZ0V4cCA9IHJlcXVpcmUoJy4vSXNSZWdFeHAnKTtcbnZhciBUb1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vVG9Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb3JkaW5hcnlnZXRvd25wcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE9yZGluYXJ5R2V0T3duUHJvcGVydHkoTywgUCkge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogTyBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRpZiAoIWhhcyhPLCBQKSkge1xuXHRcdHJldHVybiB2b2lkIDA7XG5cdH1cblx0aWYgKCEkZ09QRCkge1xuXHRcdC8vIEVTMyAvIElFIDggZmFsbGJhY2tcblx0XHR2YXIgYXJyYXlMZW5ndGggPSBJc0FycmF5KE8pICYmIFAgPT09ICdsZW5ndGgnO1xuXHRcdHZhciByZWdleExhc3RJbmRleCA9IElzUmVnRXhwKE8pICYmIFAgPT09ICdsYXN0SW5kZXgnO1xuXHRcdHJldHVybiB7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6ICEoYXJyYXlMZW5ndGggfHwgcmVnZXhMYXN0SW5kZXgpLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogJGlzRW51bWVyYWJsZShPLCBQKSxcblx0XHRcdCdbW1ZhbHVlXV0nOiBPW1BdLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXHR9XG5cdHJldHVybiBUb1Byb3BlcnR5RGVzY3JpcHRvcigkZ09QRChPLCBQKSk7XG59O1xuIl19