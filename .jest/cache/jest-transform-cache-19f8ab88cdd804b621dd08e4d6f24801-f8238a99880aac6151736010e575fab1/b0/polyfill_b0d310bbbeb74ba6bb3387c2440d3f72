e860fcf8f467487c5865dc61b32ff9c2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var implementation = require("./implementation");

var lacksProperEnumerationOrder = function lacksProperEnumerationOrder() {
  if (!Object.assign) {
    return false;
  }

  var str = 'abcdefghijklmnopqrst';
  var letters = str.split('');
  var map = {};

  for (var i = 0; i < letters.length; ++i) {
    map[letters[i]] = letters[i];
  }

  var obj = (0, _extends2.default)({}, map);
  var actual = '';

  for (var k in obj) {
    actual += k;
  }

  return str !== actual;
};

var assignHasPendingExceptions = function assignHasPendingExceptions() {
  if (!Object.assign || !Object.preventExtensions) {
    return false;
  }

  var thrower = Object.preventExtensions({
    1: 2
  });

  try {
    (0, _extends2.default)(thrower, 'xy');
  } catch (e) {
    return thrower[1] === 'y';
  }

  return false;
};

module.exports = function getPolyfill() {
  if (!Object.assign) {
    return implementation;
  }

  if (lacksProperEnumerationOrder()) {
    return implementation;
  }

  if (assignHasPendingExceptions()) {
    return implementation;
  }

  return Object.assign;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvbHlmaWxsLmpzIl0sIm5hbWVzIjpbImltcGxlbWVudGF0aW9uIiwicmVxdWlyZSIsImxhY2tzUHJvcGVyRW51bWVyYXRpb25PcmRlciIsIk9iamVjdCIsImFzc2lnbiIsInN0ciIsImxldHRlcnMiLCJzcGxpdCIsIm1hcCIsImkiLCJsZW5ndGgiLCJvYmoiLCJhY3R1YWwiLCJrIiwiYXNzaWduSGFzUGVuZGluZ0V4Y2VwdGlvbnMiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInRocm93ZXIiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImdldFBvbHlmaWxsIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBSUEsY0FBYyxHQUFHQyxPQUFPLG9CQUE1Qjs7QUFFQSxJQUFJQywyQkFBMkIsR0FBRyxTQUE5QkEsMkJBQThCLEdBQVk7QUFDN0MsTUFBSSxDQUFDQyxNQUFNLENBQUNDLE1BQVosRUFBb0I7QUFDbkIsV0FBTyxLQUFQO0FBQ0E7O0FBS0QsTUFBSUMsR0FBRyxHQUFHLHNCQUFWO0FBQ0EsTUFBSUMsT0FBTyxHQUFHRCxHQUFHLENBQUNFLEtBQUosQ0FBVSxFQUFWLENBQWQ7QUFDQSxNQUFJQyxHQUFHLEdBQUcsRUFBVjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILE9BQU8sQ0FBQ0ksTUFBNUIsRUFBb0MsRUFBRUQsQ0FBdEMsRUFBeUM7QUFDeENELElBQUFBLEdBQUcsQ0FBQ0YsT0FBTyxDQUFDRyxDQUFELENBQVIsQ0FBSCxHQUFrQkgsT0FBTyxDQUFDRyxDQUFELENBQXpCO0FBQ0E7O0FBQ0QsTUFBSUUsR0FBRyxHQUFHLHVCQUFjLEVBQWQsRUFBa0JILEdBQWxCLENBQVY7QUFDQSxNQUFJSSxNQUFNLEdBQUcsRUFBYjs7QUFDQSxPQUFLLElBQUlDLENBQVQsSUFBY0YsR0FBZCxFQUFtQjtBQUNsQkMsSUFBQUEsTUFBTSxJQUFJQyxDQUFWO0FBQ0E7O0FBQ0QsU0FBT1IsR0FBRyxLQUFLTyxNQUFmO0FBQ0EsQ0FwQkQ7O0FBc0JBLElBQUlFLDBCQUEwQixHQUFHLFNBQTdCQSwwQkFBNkIsR0FBWTtBQUM1QyxNQUFJLENBQUNYLE1BQU0sQ0FBQ0MsTUFBUixJQUFrQixDQUFDRCxNQUFNLENBQUNZLGlCQUE5QixFQUFpRDtBQUNoRCxXQUFPLEtBQVA7QUFDQTs7QUFLRCxNQUFJQyxPQUFPLEdBQUdiLE1BQU0sQ0FBQ1ksaUJBQVAsQ0FBeUI7QUFBRSxPQUFHO0FBQUwsR0FBekIsQ0FBZDs7QUFDQSxNQUFJO0FBQ0gsMkJBQWNDLE9BQWQsRUFBdUIsSUFBdkI7QUFDQSxHQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1gsV0FBT0QsT0FBTyxDQUFDLENBQUQsQ0FBUCxLQUFlLEdBQXRCO0FBQ0E7O0FBQ0QsU0FBTyxLQUFQO0FBQ0EsQ0FmRDs7QUFpQkFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULEdBQXVCO0FBQ3ZDLE1BQUksQ0FBQ2pCLE1BQU0sQ0FBQ0MsTUFBWixFQUFvQjtBQUNuQixXQUFPSixjQUFQO0FBQ0E7O0FBQ0QsTUFBSUUsMkJBQTJCLEVBQS9CLEVBQW1DO0FBQ2xDLFdBQU9GLGNBQVA7QUFDQTs7QUFDRCxNQUFJYywwQkFBMEIsRUFBOUIsRUFBa0M7QUFDakMsV0FBT2QsY0FBUDtBQUNBOztBQUNELFNBQU9HLE1BQU0sQ0FBQ0MsTUFBZDtBQUNBLENBWEQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIGxhY2tzUHJvcGVyRW51bWVyYXRpb25PcmRlciA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8qXG5cdCAqIHY4LCBzcGVjaWZpY2FsbHkgaW4gbm9kZSA0LngsIGhhcyBhIGJ1ZyB3aXRoIGluY29ycmVjdCBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlclxuXHQgKiBub3RlOiB0aGlzIGRvZXMgbm90IGRldGVjdCB0aGUgYnVnIHVubGVzcyB0aGVyZSdzIDIwIGNoYXJhY3RlcnNcblx0ICovXG5cdHZhciBzdHIgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuXHR2YXIgbGV0dGVycyA9IHN0ci5zcGxpdCgnJyk7XG5cdHZhciBtYXAgPSB7fTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgKytpKSB7XG5cdFx0bWFwW2xldHRlcnNbaV1dID0gbGV0dGVyc1tpXTtcblx0fVxuXHR2YXIgb2JqID0gT2JqZWN0LmFzc2lnbih7fSwgbWFwKTtcblx0dmFyIGFjdHVhbCA9ICcnO1xuXHRmb3IgKHZhciBrIGluIG9iaikge1xuXHRcdGFjdHVhbCArPSBrO1xuXHR9XG5cdHJldHVybiBzdHIgIT09IGFjdHVhbDtcbn07XG5cbnZhciBhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKCFPYmplY3QuYXNzaWduIHx8ICFPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Lypcblx0ICogRmlyZWZveCAzNyBzdGlsbCBoYXMgXCJwZW5kaW5nIGV4Y2VwdGlvblwiIGxvZ2ljIGluIGl0cyBPYmplY3QuYXNzaWduIGltcGxlbWVudGF0aW9uLFxuXHQgKiB3aGljaCBpcyA3MiUgc2xvd2VyIHRoYW4gb3VyIHNoaW0sIGFuZCBGaXJlZm94IDQwJ3MgbmF0aXZlIGltcGxlbWVudGF0aW9uLlxuXHQgKi9cblx0dmFyIHRocm93ZXIgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoeyAxOiAyIH0pO1xuXHR0cnkge1xuXHRcdE9iamVjdC5hc3NpZ24odGhyb3dlciwgJ3h5Jyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gdGhyb3dlclsxXSA9PT0gJ3knO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcblx0fVxuXHRpZiAobGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0aWYgKGFzc2lnbkhhc1BlbmRpbmdFeGNlcHRpb25zKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIE9iamVjdC5hc3NpZ247XG59O1xuIl19