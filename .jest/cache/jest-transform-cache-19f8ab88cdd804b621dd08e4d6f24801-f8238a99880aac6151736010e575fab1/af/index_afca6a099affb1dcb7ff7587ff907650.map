{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","formatDistanceStrict","_index","_interopRequireDefault","require","_index2","_index3","_index4","_index5","_index6","_index7","obj","__esModule","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","dirtyDate","dirtyBaseDate","dirtyOptions","arguments","options","locale","formatDistance","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","roundingMethod","String","roundingMethodFn","Math","floor","ceil","round","seconds","offsetInSeconds","minutes","unit","hours","days","months","years","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,oBAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,oDAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,0BAAR,CAApC;;AAEA,IAAIE,OAAO,GAAGH,sBAAsB,CAACC,OAAO,sBAAR,CAApC;;AAEA,IAAIG,OAAO,GAAGJ,sBAAsB,CAACC,OAAO,mCAAR,CAApC;;AAEA,IAAII,OAAO,GAAGL,sBAAsB,CAACC,OAAO,gCAAR,CAApC;;AAEA,IAAIK,OAAO,GAAGN,sBAAsB,CAACC,OAAO,4BAAR,CAApC;;AAEA,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,iCAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCQ,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEX,IAAAA,OAAO,EAAEW;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,cAAc,GAAG,IAArB;AACA,IAAIC,gBAAgB,GAAG,KAAvB;AACA,IAAIC,eAAe,GAAG,MAAtB;;AAwJA,SAASd,oBAAT,CAA8Be,SAA9B,EAAyCC,aAAzC,EAAwDC,YAAxD,EAAsE;AACpE,GAAC,GAAGR,OAAO,CAACV,OAAZ,EAAqB,CAArB,EAAwBmB,SAAxB;AACA,MAAIC,OAAO,GAAGF,YAAY,IAAI,EAA9B;AACA,MAAIG,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkBZ,OAAO,CAACT,OAAvC;;AAEA,MAAI,CAACqB,MAAM,CAACC,cAAZ,EAA4B;AAC1B,UAAM,IAAIC,UAAJ,CAAe,sDAAf,CAAN;AACD;;AAED,MAAIC,UAAU,GAAG,CAAC,GAAGnB,OAAO,CAACL,OAAZ,EAAqBgB,SAArB,EAAgCC,aAAhC,CAAjB;;AAEA,MAAIQ,KAAK,CAACD,UAAD,CAAT,EAAuB;AACrB,UAAM,IAAID,UAAJ,CAAe,oBAAf,CAAN;AACD;;AAED,MAAIG,eAAe,GAAG,CAAC,GAAGlB,OAAO,CAACR,OAAZ,EAAqBoB,OAArB,CAAtB;AACAM,EAAAA,eAAe,CAACC,SAAhB,GAA4BC,OAAO,CAACR,OAAO,CAACO,SAAT,CAAnC;AACAD,EAAAA,eAAe,CAACF,UAAhB,GAA6BA,UAA7B;AACA,MAAIK,QAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAIN,UAAU,GAAG,CAAjB,EAAoB;AAClBK,IAAAA,QAAQ,GAAG,CAAC,GAAGvB,OAAO,CAACN,OAAZ,EAAqBiB,aAArB,CAAX;AACAa,IAAAA,SAAS,GAAG,CAAC,GAAGxB,OAAO,CAACN,OAAZ,EAAqBgB,SAArB,CAAZ;AACD,GAHD,MAGO;AACLa,IAAAA,QAAQ,GAAG,CAAC,GAAGvB,OAAO,CAACN,OAAZ,EAAqBgB,SAArB,CAAX;AACAc,IAAAA,SAAS,GAAG,CAAC,GAAGxB,OAAO,CAACN,OAAZ,EAAqBiB,aAArB,CAAZ;AACD;;AAED,MAAIc,cAAc,GAAGX,OAAO,CAACW,cAAR,IAA0B,IAA1B,GAAiC,OAAjC,GAA2CC,MAAM,CAACZ,OAAO,CAACW,cAAT,CAAtE;AACA,MAAIE,gBAAJ;;AAEA,MAAIF,cAAc,KAAK,OAAvB,EAAgC;AAC9BE,IAAAA,gBAAgB,GAAGC,IAAI,CAACC,KAAxB;AACD,GAFD,MAEO,IAAIJ,cAAc,KAAK,MAAvB,EAA+B;AACpCE,IAAAA,gBAAgB,GAAGC,IAAI,CAACE,IAAxB;AACD,GAFM,MAEA,IAAIL,cAAc,KAAK,OAAvB,EAAgC;AACrCE,IAAAA,gBAAgB,GAAGC,IAAI,CAACG,KAAxB;AACD,GAFM,MAEA;AACL,UAAM,IAAId,UAAJ,CAAe,mDAAf,CAAN;AACD;;AAED,MAAIe,OAAO,GAAG,CAAC,GAAG/B,OAAO,CAACP,OAAZ,EAAqB8B,SAArB,EAAgCD,QAAhC,CAAd;AACA,MAAIU,eAAe,GAAG,CAAC,CAAC,GAAGrC,MAAM,CAACF,OAAX,EAAoB8B,SAApB,IAAiC,CAAC,GAAG5B,MAAM,CAACF,OAAX,EAAoB6B,QAApB,CAAlC,IAAmE,IAAzF;AACA,MAAIW,OAAO,GAAGP,gBAAgB,CAAC,CAACK,OAAO,GAAGC,eAAX,IAA8B,EAA/B,CAA9B;AACA,MAAIE,IAAJ;;AAEA,MAAIrB,OAAO,CAACqB,IAAR,IAAgB,IAApB,EAA0B;AACxB,QAAID,OAAO,GAAG,CAAd,EAAiB;AACfC,MAAAA,IAAI,GAAG,QAAP;AACD,KAFD,MAEO,IAAID,OAAO,GAAG,EAAd,EAAkB;AACvBC,MAAAA,IAAI,GAAG,QAAP;AACD,KAFM,MAEA,IAAID,OAAO,GAAG3B,cAAd,EAA8B;AACnC4B,MAAAA,IAAI,GAAG,MAAP;AACD,KAFM,MAEA,IAAID,OAAO,GAAG1B,gBAAd,EAAgC;AACrC2B,MAAAA,IAAI,GAAG,KAAP;AACD,KAFM,MAEA,IAAID,OAAO,GAAGzB,eAAd,EAA+B;AACpC0B,MAAAA,IAAI,GAAG,OAAP;AACD,KAFM,MAEA;AACLA,MAAAA,IAAI,GAAG,MAAP;AACD;AACF,GAdD,MAcO;AACLA,IAAAA,IAAI,GAAGT,MAAM,CAACZ,OAAO,CAACqB,IAAT,CAAb;AACD;;AAGD,MAAIA,IAAI,KAAK,QAAb,EAAuB;AACrB,WAAOpB,MAAM,CAACC,cAAP,CAAsB,UAAtB,EAAkCgB,OAAlC,EAA2CZ,eAA3C,CAAP;AACD,GAFD,MAEO,IAAIe,IAAI,KAAK,QAAb,EAAuB;AAC5B,WAAOpB,MAAM,CAACC,cAAP,CAAsB,UAAtB,EAAkCkB,OAAlC,EAA2Cd,eAA3C,CAAP;AACD,GAFM,MAEA,IAAIe,IAAI,KAAK,MAAb,EAAqB;AAC1B,QAAIC,KAAK,GAAGT,gBAAgB,CAACO,OAAO,GAAG,EAAX,CAA5B;AACA,WAAOnB,MAAM,CAACC,cAAP,CAAsB,QAAtB,EAAgCoB,KAAhC,EAAuChB,eAAvC,CAAP;AACD,GAHM,MAGA,IAAIe,IAAI,KAAK,KAAb,EAAoB;AACzB,QAAIE,IAAI,GAAGV,gBAAgB,CAACO,OAAO,GAAG3B,cAAX,CAA3B;AACA,WAAOQ,MAAM,CAACC,cAAP,CAAsB,OAAtB,EAA+BqB,IAA/B,EAAqCjB,eAArC,CAAP;AACD,GAHM,MAGA,IAAIe,IAAI,KAAK,OAAb,EAAsB;AAC3B,QAAIG,MAAM,GAAGX,gBAAgB,CAACO,OAAO,GAAG1B,gBAAX,CAA7B;AACA,WAAOO,MAAM,CAACC,cAAP,CAAsB,SAAtB,EAAiCsB,MAAjC,EAAyClB,eAAzC,CAAP;AACD,GAHM,MAGA,IAAIe,IAAI,KAAK,MAAb,EAAqB;AAC1B,QAAII,KAAK,GAAGZ,gBAAgB,CAACO,OAAO,GAAGzB,eAAX,CAA5B;AACA,WAAOM,MAAM,CAACC,cAAP,CAAsB,QAAtB,EAAgCuB,KAAhC,EAAuCnB,eAAvC,CAAP;AACD;;AAED,QAAM,IAAIH,UAAJ,CAAe,mEAAf,CAAN;AACD;;AAEDuB,MAAM,CAAChD,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDistanceStrict;\n\nvar _index = _interopRequireDefault(require(\"../_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../compareAsc/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../differenceInSeconds/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../_lib/cloneObject/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../locale/en-US/index.js\"));\n\nvar _index7 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_YEAR = 525600;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * var result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * var result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * var result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  (0, _index7.default)(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || _index6.default;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = (0, _index2.default)(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = (0, _index5.default)(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = (0, _index3.default)(dirtyBaseDate);\n    dateRight = (0, _index3.default)(dirtyDate);\n  } else {\n    dateLeft = (0, _index3.default)(dirtyDate);\n    dateRight = (0, _index3.default)(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var seconds = (0, _index4.default)(dateRight, dateLeft);\n  var offsetInSeconds = ((0, _index.default)(dateRight) - (0, _index.default)(dateLeft)) / 1000;\n  var minutes = roundingMethodFn((seconds - offsetInSeconds) / 60);\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (minutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (minutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(minutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}\n\nmodule.exports = exports.default;"]}