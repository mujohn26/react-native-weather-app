63d92d8d065821d543eee2183cb97114
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = nChildren;

var _react = _interopRequireDefault(require("react"));

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function nChildren(n) {
  var propType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _propTypes.node;

  if (typeof n !== 'number' || isNaN(n) || n < 0) {
    throw new TypeError('a non-negative number is required');
  }

  var validator = function nChildrenValidator(props, propName, componentName) {
    if (propName !== 'children') {
      return new TypeError("".concat(componentName, " is using the nChildren validator on a non-children prop"));
    }

    var children = props.children;

    var childrenCount = _react["default"].Children.count(children);

    if (childrenCount !== n) {
      return new RangeError("".concat(componentName, " expects to receive ").concat(n, " children, but received ").concat(childrenCount, " children."));
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return propType.apply(void 0, [props, propName, componentName].concat(rest));
  };

  validator.isRequired = validator;
  return (0, _wrapValidator["default"])(validator, "nChildren:".concat(n), n);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9uQ2hpbGRyZW4uanMiXSwibmFtZXMiOlsicHJvcFR5cGUiLCJub2RlIiwiaXNOYU4iLCJuIiwidmFsaWRhdG9yIiwicmVzdCIsInByb3BOYW1lIiwiY2hpbGRyZW4iLCJwcm9wcyIsImNoaWxkcmVuQ291bnQiLCJSZWFjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUEsQ0FBQSxZQUFBLENBQUE7O0FBQ0EsSUFBQSxjQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLDJCQUFBLENBQUE7Ozs7Ozs7O0FBRWUsU0FBQSxTQUFBLENBQUEsQ0FBQSxFQUF1QztBQUFBLE1BQWpCQSxRQUFpQixHQUFBLFNBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsS0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFOQyxVQUFBQSxDQUFBQSxJQUFNOztBQUNwRCxNQUFJLE9BQUEsQ0FBQSxLQUFBLFFBQUEsSUFBeUJDLEtBQUssQ0FBOUIsQ0FBOEIsQ0FBOUIsSUFBcUNDLENBQUMsR0FBMUMsQ0FBQSxFQUFnRDtBQUM5QyxVQUFNLElBQUEsU0FBQSxDQUFOLG1DQUFNLENBQU47QUFDRDs7QUFFRCxNQUFNQyxTQUFTLEdBQUcsU0FBQSxrQkFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFxRTtBQUNyRixRQUFJRSxRQUFRLEtBQVosVUFBQSxFQUE2QjtBQUMzQixhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBUCwwREFBTyxDQUFBLENBQVA7QUFDRDs7QUFIb0YsUUFLN0VDLFFBTDZFLEdBS2hFQyxLQUxnRSxDQUFBLFFBQUE7O0FBTXJGLFFBQU1DLGFBQWEsR0FBR0MsTUFBQUEsQ0FBQUEsU0FBQUEsQ0FBQUEsQ0FBQUEsUUFBQUEsQ0FBQUEsS0FBQUEsQ0FBdEIsUUFBc0JBLENBQXRCOztBQUVBLFFBQUlELGFBQWEsS0FBakIsQ0FBQSxFQUF5QjtBQUN2QixhQUFPLElBQUEsVUFBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSxzQkFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBLEVBQUEsMEJBQUEsRUFBQSxNQUFBLENBQUEsYUFBQSxFQUFQLFlBQU8sQ0FBQSxDQUFQO0FBR0Q7O0FBWm9GLFNBQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkosSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElBQUEsQ0FBTkE7QUFBTTs7QUFhckYsV0FBT0wsUUFBUSxDQUFSQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFiRixHQUFBOztBQWVBSSxFQUFBQSxTQUFTLENBQVRBLFVBQUFBLEdBQUFBLFNBQUFBO0FBRUEsU0FBTyxDQUFBLEdBQUEsY0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxhQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsRUFBUCxDQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBub2RlIH0gZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5DaGlsZHJlbihuLCBwcm9wVHlwZSA9IG5vZGUpIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBpc05hTihuKSB8fCBuIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Egbm9uLW5lZ2F0aXZlIG51bWJlciBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24gbkNoaWxkcmVuVmFsaWRhdG9yKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICAgIGlmIChwcm9wTmFtZSAhPT0gJ2NoaWxkcmVuJykge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX0gaXMgdXNpbmcgdGhlIG5DaGlsZHJlbiB2YWxpZGF0b3Igb24gYSBub24tY2hpbGRyZW4gcHJvcGApO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IHByb3BzO1xuICAgIGNvbnN0IGNoaWxkcmVuQ291bnQgPSBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbik7XG5cbiAgICBpZiAoY2hpbGRyZW5Db3VudCAhPT0gbikge1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZUVycm9yKFxuICAgICAgICBgJHtjb21wb25lbnROYW1lfSBleHBlY3RzIHRvIHJlY2VpdmUgJHtufSBjaGlsZHJlbiwgYnV0IHJlY2VpdmVkICR7Y2hpbGRyZW5Db3VudH0gY2hpbGRyZW4uYCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IHZhbGlkYXRvcjtcblxuICByZXR1cm4gd3JhcFZhbGlkYXRvcih2YWxpZGF0b3IsIGBuQ2hpbGRyZW46JHtufWAsIG4pO1xufVxuIl19