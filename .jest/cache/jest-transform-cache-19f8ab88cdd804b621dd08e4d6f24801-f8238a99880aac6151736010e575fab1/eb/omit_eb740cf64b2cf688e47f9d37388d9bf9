37a638e7927a57fbdebc1744ecee5385
var arrayMap = require("./_arrayMap"),
    baseClone = require("./_baseClone"),
    baseUnset = require("./_baseUnset"),
    castPath = require("./_castPath"),
    copyObject = require("./_copyObject"),
    customOmitClone = require("./_customOmitClone"),
    flatRest = require("./_flatRest"),
    getAllKeysIn = require("./_getAllKeysIn");

var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
var omit = flatRest(function (object, paths) {
  var result = {};

  if (object == null) {
    return result;
  }

  var isDeep = false;
  paths = arrayMap(paths, function (path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);

  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }

  var length = paths.length;

  while (length--) {
    baseUnset(result, paths[length]);
  }

  return result;
});
module.exports = omit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9taXQuanMiXSwibmFtZXMiOlsiYXJyYXlNYXAiLCJyZXF1aXJlIiwiYmFzZUNsb25lIiwiYmFzZVVuc2V0IiwiY2FzdFBhdGgiLCJjb3B5T2JqZWN0IiwiY3VzdG9tT21pdENsb25lIiwiZmxhdFJlc3QiLCJnZXRBbGxLZXlzSW4iLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJvbWl0Iiwib2JqZWN0IiwicGF0aHMiLCJyZXN1bHQiLCJpc0RlZXAiLCJwYXRoIiwibGVuZ3RoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLGVBQXRCO0FBQUEsSUFDSUMsU0FBUyxHQUFHRCxPQUFPLGdCQUR2QjtBQUFBLElBRUlFLFNBQVMsR0FBR0YsT0FBTyxnQkFGdkI7QUFBQSxJQUdJRyxRQUFRLEdBQUdILE9BQU8sZUFIdEI7QUFBQSxJQUlJSSxVQUFVLEdBQUdKLE9BQU8saUJBSnhCO0FBQUEsSUFLSUssZUFBZSxHQUFHTCxPQUFPLHNCQUw3QjtBQUFBLElBTUlNLFFBQVEsR0FBR04sT0FBTyxlQU50QjtBQUFBLElBT0lPLFlBQVksR0FBR1AsT0FBTyxtQkFQMUI7O0FBVUEsSUFBSVEsZUFBZSxHQUFHLENBQXRCO0FBQUEsSUFDSUMsZUFBZSxHQUFHLENBRHRCO0FBQUEsSUFFSUMsa0JBQWtCLEdBQUcsQ0FGekI7QUF3QkEsSUFBSUMsSUFBSSxHQUFHTCxRQUFRLENBQUMsVUFBU00sTUFBVCxFQUFpQkMsS0FBakIsRUFBd0I7QUFDMUMsTUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsTUFBSUYsTUFBTSxJQUFJLElBQWQsRUFBb0I7QUFDbEIsV0FBT0UsTUFBUDtBQUNEOztBQUNELE1BQUlDLE1BQU0sR0FBRyxLQUFiO0FBQ0FGLEVBQUFBLEtBQUssR0FBR2QsUUFBUSxDQUFDYyxLQUFELEVBQVEsVUFBU0csSUFBVCxFQUFlO0FBQ3JDQSxJQUFBQSxJQUFJLEdBQUdiLFFBQVEsQ0FBQ2EsSUFBRCxFQUFPSixNQUFQLENBQWY7QUFDQUcsSUFBQUEsTUFBTSxLQUFLQSxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsTUFBTCxHQUFjLENBQTVCLENBQU47QUFDQSxXQUFPRCxJQUFQO0FBQ0QsR0FKZSxDQUFoQjtBQUtBWixFQUFBQSxVQUFVLENBQUNRLE1BQUQsRUFBU0wsWUFBWSxDQUFDSyxNQUFELENBQXJCLEVBQStCRSxNQUEvQixDQUFWOztBQUNBLE1BQUlDLE1BQUosRUFBWTtBQUNWRCxJQUFBQSxNQUFNLEdBQUdiLFNBQVMsQ0FBQ2EsTUFBRCxFQUFTTixlQUFlLEdBQUdDLGVBQWxCLEdBQW9DQyxrQkFBN0MsRUFBaUVMLGVBQWpFLENBQWxCO0FBQ0Q7O0FBQ0QsTUFBSVksTUFBTSxHQUFHSixLQUFLLENBQUNJLE1BQW5COztBQUNBLFNBQU9BLE1BQU0sRUFBYixFQUFpQjtBQUNmZixJQUFBQSxTQUFTLENBQUNZLE1BQUQsRUFBU0QsS0FBSyxDQUFDSSxNQUFELENBQWQsQ0FBVDtBQUNEOztBQUNELFNBQU9ILE1BQVA7QUFDRCxDQXBCa0IsQ0FBbkI7QUFzQkFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlIsSUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VDbG9uZSA9IHJlcXVpcmUoJy4vX2Jhc2VDbG9uZScpLFxuICAgIGJhc2VVbnNldCA9IHJlcXVpcmUoJy4vX2Jhc2VVbnNldCcpLFxuICAgIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGN1c3RvbU9taXRDbG9uZSA9IHJlcXVpcmUoJy4vX2N1c3RvbU9taXRDbG9uZScpLFxuICAgIGZsYXRSZXN0ID0gcmVxdWlyZSgnLi9fZmxhdFJlc3QnKSxcbiAgICBnZXRBbGxLZXlzSW4gPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzSW4nKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gKlxuICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gKiAvLyA9PiB7ICdiJzogJzInIH1cbiAqL1xudmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH0pO1xuICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG9taXQ7XG4iXX0=