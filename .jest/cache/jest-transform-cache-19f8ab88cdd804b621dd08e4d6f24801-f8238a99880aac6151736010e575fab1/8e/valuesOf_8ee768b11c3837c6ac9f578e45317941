d19139e133733d678498ee3a7b26d2d6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = valuesOfValidator;

var _isPrimitive = _interopRequireDefault(require("./helpers/isPrimitive"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function valuesOfValidator(propType) {
  if (typeof propType !== 'function') {
    throw new TypeError('objectOf: propType must be a function');
  }

  var validator = function valuesOf(props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    var propValue = props[propName];

    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
      return null;
    }

    var firstError;
    Object.keys(propValue).some(function (key) {
      firstError = propType.apply(void 0, [propValue, key, componentName, location, "".concat(propFullName, ".").concat(key)].concat(rest));
      return firstError;
    });
    return firstError || null;
  };

  validator.isRequired = function valuesOfRequired(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " is required."));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return validator.apply(void 0, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, 'valuesOf', propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92YWx1ZXNPZi5qcyJdLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJyZXN0IiwicHJvcFZhbHVlIiwicHJvcHMiLCJPYmplY3QiLCJmaXJzdEVycm9yIiwicHJvcFR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFlBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEseUJBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsMkJBQUEsQ0FBQTs7Ozs7Ozs7QUFJZSxTQUFBLGlCQUFBLENBQUEsUUFBQSxFQUFxQztBQUNsRCxNQUFJLE9BQUEsUUFBQSxLQUFKLFVBQUEsRUFBb0M7QUFDbEMsVUFBTSxJQUFBLFNBQUEsQ0FBTix1Q0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUEsU0FBUyxHQUFHLFNBQUEsUUFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBT2hCO0FBQUEsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQURHQyxJQUNILEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQURHQSxNQUFBQSxJQUNILENBQUEsSUFBQSxHQUFBLENBQUEsQ0FER0EsR0FDSCxTQUFBLENBQUEsSUFBQSxDQURHQTtBQUNIOztBQUFBLFFBQ29CQyxTQURwQixHQUNrQ0MsS0FEbEMsQ0FBQSxRQUFBLENBQUE7O0FBRUEsUUFBSUQsU0FBUyxJQUFUQSxJQUFBQSxJQUFxQixDQUFBLEdBQUEsWUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUF6QixTQUF5QixDQUF6QixFQUFpRDtBQUMvQyxhQUFBLElBQUE7QUFDRDs7QUFFRCxRQUFBLFVBQUE7QUFDQUUsSUFBQUEsTUFBTSxDQUFOQSxJQUFBQSxDQUFBQSxTQUFBQSxFQUFBQSxJQUFBQSxDQUE0QixVQUFBLEdBQUEsRUFBUztBQUNuQ0MsTUFBQUEsVUFBVSxHQUFHQyxRQUFRLENBQVJBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLFNBQUFBLEVBQUFBLEdBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLEdBQUFBLE1BQUFBLENBQUFBLFlBQUFBLEVBQUFBLEdBQUFBLEVBQUFBLE1BQUFBLENBQUFBLEdBQUFBLENBQUFBLEVBQUFBLE1BQUFBLENBQWJELElBQWFDLENBQUFBLENBQWJEO0FBUUEsYUFBQSxVQUFBO0FBVEZELEtBQUFBO0FBV0EsV0FBT0MsVUFBVSxJQUFqQixJQUFBO0FBekJGLEdBQUE7O0FBMkJBTCxFQUFBQSxTQUFTLENBQVRBLFVBQUFBLEdBQXVCLFNBQUEsZ0JBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFBbUU7QUFBQSxRQUNwRUUsU0FEb0UsR0FDdERDLEtBRHNELENBQUEsUUFBQSxDQUFBOztBQUV4RixRQUFJRCxTQUFTLElBQWIsSUFBQSxFQUF1QjtBQUNyQixhQUFPLElBQUEsU0FBQSxDQUFBLEdBQUEsTUFBQSxDQUFBLGFBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLFFBQUEsRUFBUCxlQUFPLENBQUEsQ0FBUDtBQUNEOztBQUp1RixTQUFBLElBQUEsS0FBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQU5ELElBQU0sR0FBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBO0FBQU5BLE1BQUFBLElBQU0sQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQUFOQSxHQUFNLFNBQUEsQ0FBQSxLQUFBLENBQU5BO0FBQU07O0FBS3hGLFdBQU9ELFNBQVMsQ0FBVEEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBTEZBLEdBQUFBOztBQVFBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsVUFBQSxFQUFQLFFBQU8sQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzUHJpbWl0aXZlIGZyb20gJy4vaGVscGVycy9pc1ByaW1pdGl2ZSc7XG5pbXBvcnQgd3JhcFZhbGlkYXRvciBmcm9tICcuL2hlbHBlcnMvd3JhcFZhbGlkYXRvcic7XG5cbi8vIGNvZGUgYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE0MTU2ZTU2YjljZjE4YWM4Njk2MzE4NWM1YWY0YWJkZGYzZmY4MTEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy90eXBlcy9SZWFjdFByb3BUeXBlcy5qcyNMMzA3LUwzNDBcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsdWVzT2ZWYWxpZGF0b3IocHJvcFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVHlwZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29iamVjdE9mOiBwcm9wVHlwZSBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGNvbnN0IHZhbGlkYXRvciA9IGZ1bmN0aW9uIHZhbHVlc09mKFxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgbG9jYXRpb24sXG4gICAgcHJvcEZ1bGxOYW1lLFxuICAgIC4uLnJlc3RcbiAgKSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCB8fCBpc1ByaW1pdGl2ZShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgZmlyc3RFcnJvcjtcbiAgICBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnNvbWUoKGtleSkgPT4ge1xuICAgICAgZmlyc3RFcnJvciA9IHByb3BUeXBlKFxuICAgICAgICBwcm9wVmFsdWUsXG4gICAgICAgIGtleSxcbiAgICAgICAgY29tcG9uZW50TmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGAke3Byb3BGdWxsTmFtZX0uJHtrZXl9YCxcbiAgICAgICAgLi4ucmVzdCxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZmlyc3RFcnJvcjtcbiAgICB9KTtcbiAgICByZXR1cm4gZmlyc3RFcnJvciB8fCBudWxsO1xuICB9O1xuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIHZhbHVlc09mUmVxdWlyZWQocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX06ICR7cHJvcE5hbWV9IGlzIHJlcXVpcmVkLmApO1xuICAgIH1cbiAgICByZXR1cm4gdmFsaWRhdG9yKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCAndmFsdWVzT2YnLCBwcm9wVHlwZSk7XG59XG4iXX0=