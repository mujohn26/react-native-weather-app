bad01c0a207f7d4385e217c588d6f6ee
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/);
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
var _default = longFormatters;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJkYXRlIiwid2lkdGgiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJkYXRlVGltZUxvbmdGb3JtYXR0ZXIiLCJtYXRjaFJlc3VsdCIsIm1hdGNoIiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lRm9ybWF0IiwiZGF0ZVRpbWUiLCJyZXBsYWNlIiwibG9uZ0Zvcm1hdHRlcnMiLCJwIiwiUCIsIl9kZWZhdWx0IiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQixLQUFLLENBQXZCOztBQUVBLFNBQVNDLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQ0MsVUFBcEMsRUFBZ0Q7QUFDOUMsVUFBUUQsT0FBUjtBQUNFLFNBQUssR0FBTDtBQUNFLGFBQU9DLFVBQVUsQ0FBQ0MsSUFBWCxDQUFnQjtBQUNyQkMsUUFBQUEsS0FBSyxFQUFFO0FBRGMsT0FBaEIsQ0FBUDs7QUFJRixTQUFLLElBQUw7QUFDRSxhQUFPRixVQUFVLENBQUNDLElBQVgsQ0FBZ0I7QUFDckJDLFFBQUFBLEtBQUssRUFBRTtBQURjLE9BQWhCLENBQVA7O0FBSUYsU0FBSyxLQUFMO0FBQ0UsYUFBT0YsVUFBVSxDQUFDQyxJQUFYLENBQWdCO0FBQ3JCQyxRQUFBQSxLQUFLLEVBQUU7QUFEYyxPQUFoQixDQUFQOztBQUlGLFNBQUssTUFBTDtBQUNBO0FBQ0UsYUFBT0YsVUFBVSxDQUFDQyxJQUFYLENBQWdCO0FBQ3JCQyxRQUFBQSxLQUFLLEVBQUU7QUFEYyxPQUFoQixDQUFQO0FBbEJKO0FBc0JEOztBQUVELFNBQVNDLGlCQUFULENBQTJCSixPQUEzQixFQUFvQ0MsVUFBcEMsRUFBZ0Q7QUFDOUMsVUFBUUQsT0FBUjtBQUNFLFNBQUssR0FBTDtBQUNFLGFBQU9DLFVBQVUsQ0FBQ0ksSUFBWCxDQUFnQjtBQUNyQkYsUUFBQUEsS0FBSyxFQUFFO0FBRGMsT0FBaEIsQ0FBUDs7QUFJRixTQUFLLElBQUw7QUFDRSxhQUFPRixVQUFVLENBQUNJLElBQVgsQ0FBZ0I7QUFDckJGLFFBQUFBLEtBQUssRUFBRTtBQURjLE9BQWhCLENBQVA7O0FBSUYsU0FBSyxLQUFMO0FBQ0UsYUFBT0YsVUFBVSxDQUFDSSxJQUFYLENBQWdCO0FBQ3JCRixRQUFBQSxLQUFLLEVBQUU7QUFEYyxPQUFoQixDQUFQOztBQUlGLFNBQUssTUFBTDtBQUNBO0FBQ0UsYUFBT0YsVUFBVSxDQUFDSSxJQUFYLENBQWdCO0FBQ3JCRixRQUFBQSxLQUFLLEVBQUU7QUFEYyxPQUFoQixDQUFQO0FBbEJKO0FBc0JEOztBQUVELFNBQVNHLHFCQUFULENBQStCTixPQUEvQixFQUF3Q0MsVUFBeEMsRUFBb0Q7QUFDbEQsTUFBSU0sV0FBVyxHQUFHUCxPQUFPLENBQUNRLEtBQVIsQ0FBYyxXQUFkLENBQWxCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHRixXQUFXLENBQUMsQ0FBRCxDQUE3QjtBQUNBLE1BQUlHLFdBQVcsR0FBR0gsV0FBVyxDQUFDLENBQUQsQ0FBN0I7O0FBRUEsTUFBSSxDQUFDRyxXQUFMLEVBQWtCO0FBQ2hCLFdBQU9YLGlCQUFpQixDQUFDQyxPQUFELEVBQVVDLFVBQVYsQ0FBeEI7QUFDRDs7QUFFRCxNQUFJVSxjQUFKOztBQUVBLFVBQVFGLFdBQVI7QUFDRSxTQUFLLEdBQUw7QUFDRUUsTUFBQUEsY0FBYyxHQUFHVixVQUFVLENBQUNXLFFBQVgsQ0FBb0I7QUFDbkNULFFBQUFBLEtBQUssRUFBRTtBQUQ0QixPQUFwQixDQUFqQjtBQUdBOztBQUVGLFNBQUssSUFBTDtBQUNFUSxNQUFBQSxjQUFjLEdBQUdWLFVBQVUsQ0FBQ1csUUFBWCxDQUFvQjtBQUNuQ1QsUUFBQUEsS0FBSyxFQUFFO0FBRDRCLE9BQXBCLENBQWpCO0FBR0E7O0FBRUYsU0FBSyxLQUFMO0FBQ0VRLE1BQUFBLGNBQWMsR0FBR1YsVUFBVSxDQUFDVyxRQUFYLENBQW9CO0FBQ25DVCxRQUFBQSxLQUFLLEVBQUU7QUFENEIsT0FBcEIsQ0FBakI7QUFHQTs7QUFFRixTQUFLLE1BQUw7QUFDQTtBQUNFUSxNQUFBQSxjQUFjLEdBQUdWLFVBQVUsQ0FBQ1csUUFBWCxDQUFvQjtBQUNuQ1QsUUFBQUEsS0FBSyxFQUFFO0FBRDRCLE9BQXBCLENBQWpCO0FBR0E7QUF4Qko7O0FBMkJBLFNBQU9RLGNBQWMsQ0FBQ0UsT0FBZixDQUF1QixVQUF2QixFQUFtQ2QsaUJBQWlCLENBQUNVLFdBQUQsRUFBY1IsVUFBZCxDQUFwRCxFQUErRVksT0FBL0UsQ0FBdUYsVUFBdkYsRUFBbUdULGlCQUFpQixDQUFDTSxXQUFELEVBQWNULFVBQWQsQ0FBcEgsQ0FBUDtBQUNEOztBQUVELElBQUlhLGNBQWMsR0FBRztBQUNuQkMsRUFBQUEsQ0FBQyxFQUFFWCxpQkFEZ0I7QUFFbkJZLEVBQUFBLENBQUMsRUFBRVY7QUFGZ0IsQ0FBckI7QUFJQSxJQUFJVyxRQUFRLEdBQUdILGNBQWY7QUFDQWxCLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQm1CLFFBQWxCO0FBQ0FDLE1BQU0sQ0FBQ3RCLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbnZhciBfZGVmYXVsdCA9IGxvbmdGb3JtYXR0ZXJzO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=