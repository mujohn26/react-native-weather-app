264cfaf1569327ecc5d7e1cc630f04dd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));

var _NativeEventEmitter = _interopRequireDefault(require("../EventEmitter/NativeEventEmitter"));

var _NativeAppearance = _interopRequireDefault(require("./NativeAppearance"));

var _invariant = _interopRequireDefault(require("invariant"));

var _DebugEnvironment = require("./DebugEnvironment");

var eventEmitter = new _EventEmitter.default();

if (_NativeAppearance.default) {
  var nativeEventEmitter = new _NativeEventEmitter.default(_NativeAppearance.default);
  nativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {
    var colorScheme = newAppearance.colorScheme;
    (0, _invariant.default)(colorScheme === 'dark' || colorScheme === 'light' || colorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
    preferences.colorScheme = colorScheme;
    eventEmitter.emit('change', {
      colorScheme: colorScheme
    });
  });
}

function getInitialColorScheme() {
  if (__DEV__) {
    if (_DebugEnvironment.isAsyncDebugging) {
      return 'light';
    }
  }

  var nativeColorScheme = _NativeAppearance.default == null ? null : _NativeAppearance.default.getColorScheme() || null;
  (0, _invariant.default)(nativeColorScheme === 'dark' || nativeColorScheme === 'light' || nativeColorScheme == null, "Unrecognized color scheme. Did you mean 'dark' or 'light'?");
  return nativeColorScheme;
}

function getColorScheme() {
  if (!preferences.colorScheme) {
    var initialColorScheme = getInitialColorScheme();
    preferences.colorScheme = initialColorScheme;
    return preferences.colorScheme;
  }

  return preferences.colorScheme;
}

var preferences = {
  colorScheme: null
};
module.exports = {
  getColorScheme: getColorScheme,
  addChangeListener: function addChangeListener(listener) {
    eventEmitter.addListener('change', listener);
  },
  removeChangeListener: function removeChangeListener(listener) {
    eventEmitter.removeListener('change', listener);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcGVhcmFuY2UuanMiXSwibmFtZXMiOlsiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwiTmF0aXZlQXBwZWFyYW5jZSIsIm5hdGl2ZUV2ZW50RW1pdHRlciIsIk5hdGl2ZUV2ZW50RW1pdHRlciIsImFkZExpc3RlbmVyIiwibmV3QXBwZWFyYW5jZSIsImNvbG9yU2NoZW1lIiwicHJlZmVyZW5jZXMiLCJlbWl0IiwiZ2V0SW5pdGlhbENvbG9yU2NoZW1lIiwiX19ERVZfXyIsImlzQXN5bmNEZWJ1Z2dpbmciLCJuYXRpdmVDb2xvclNjaGVtZSIsImdldENvbG9yU2NoZW1lIiwiaW5pdGlhbENvbG9yU2NoZW1lIiwibW9kdWxlIiwiZXhwb3J0cyIsImFkZENoYW5nZUxpc3RlbmVyIiwibGlzdGVuZXIiLCJyZW1vdmVDaGFuZ2VMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIl0sIm1hcHBpbmdzIjoiQUFVQTs7OztBQUVBOztBQUNBOztBQUNBOztBQUlBOztBQUNBOztBQUdBLElBQU1BLFlBQVksR0FBRyxJQUFJQyxxQkFBSixFQUFyQjs7QUFFQSxJQUFJQyx5QkFBSixFQUFzQjtBQUNwQixNQUFNQyxrQkFBa0IsR0FBRyxJQUFJQywyQkFBSixDQUF1QkYseUJBQXZCLENBQTNCO0FBQ0FDLEVBQUFBLGtCQUFrQixDQUFDRSxXQUFuQixDQUNFLG1CQURGLEVBRUUsVUFBQ0MsYUFBRCxFQUEwQztBQUFBLFFBQ2pDQyxXQURpQyxHQUNsQkQsYUFEa0IsQ0FDakNDLFdBRGlDO0FBRXhDLDRCQUNFQSxXQUFXLEtBQUssTUFBaEIsSUFDRUEsV0FBVyxLQUFLLE9BRGxCLElBRUVBLFdBQVcsSUFBSSxJQUhuQixFQUlFLDREQUpGO0FBT0FDLElBQUFBLFdBQVcsQ0FBQ0QsV0FBWixHQUEwQkEsV0FBMUI7QUFDQVAsSUFBQUEsWUFBWSxDQUFDUyxJQUFiLENBQWtCLFFBQWxCLEVBQTRCO0FBQUNGLE1BQUFBLFdBQVcsRUFBWEE7QUFBRCxLQUE1QjtBQUNELEdBYkg7QUFlRDs7QUFFRCxTQUFTRyxxQkFBVCxHQUFtRDtBQUNqRCxNQUFJQyxPQUFKLEVBQWE7QUFDWCxRQUFJQyxrQ0FBSixFQUFzQjtBQUdwQixhQUFPLE9BQVA7QUFDRDtBQUNGOztBQUdELE1BQU1DLGlCQUEwQixHQUM5QlgsNkJBQW9CLElBQXBCLEdBQTJCLElBQTNCLEdBQWtDQSwwQkFBaUJZLGNBQWpCLE1BQXFDLElBRHpFO0FBRUEsMEJBQ0VELGlCQUFpQixLQUFLLE1BQXRCLElBQ0VBLGlCQUFpQixLQUFLLE9BRHhCLElBRUVBLGlCQUFpQixJQUFJLElBSHpCLEVBSUUsNERBSkY7QUFNQSxTQUFPQSxpQkFBUDtBQUNEOztBQUVELFNBQVNDLGNBQVQsR0FBNEM7QUFDMUMsTUFBSSxDQUFDTixXQUFXLENBQUNELFdBQWpCLEVBQThCO0FBQzVCLFFBQU1RLGtCQUFrQixHQUFHTCxxQkFBcUIsRUFBaEQ7QUFDQUYsSUFBQUEsV0FBVyxDQUFDRCxXQUFaLEdBQTBCUSxrQkFBMUI7QUFDQSxXQUFPUCxXQUFXLENBQUNELFdBQW5CO0FBQ0Q7O0FBRUQsU0FBT0MsV0FBVyxDQUFDRCxXQUFuQjtBQUNEOztBQUVELElBQU1DLFdBQVcsR0FBRztBQUNsQkQsRUFBQUEsV0FBVyxFQUFFO0FBREssQ0FBcEI7QUFJQVMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBV2ZILEVBQUFBLGNBQWMsRUFBZEEsY0FYZTtBQWVmSSxFQUFBQSxpQkFmZSw2QkFlR0MsUUFmSCxFQWV1QztBQUNwRG5CLElBQUFBLFlBQVksQ0FBQ0ssV0FBYixDQUF5QixRQUF6QixFQUFtQ2MsUUFBbkM7QUFDRCxHQWpCYztBQXFCZkMsRUFBQUEsb0JBckJlLGdDQXFCTUQsUUFyQk4sRUFxQjBDO0FBQ3ZEbkIsSUFBQUEsWUFBWSxDQUFDcUIsY0FBYixDQUE0QixRQUE1QixFQUFzQ0YsUUFBdEM7QUFDRDtBQXZCYyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcbmltcG9ydCBOYXRpdmVFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL05hdGl2ZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgTmF0aXZlQXBwZWFyYW5jZSwge1xuICB0eXBlIEFwcGVhcmFuY2VQcmVmZXJlbmNlcyxcbiAgdHlwZSBDb2xvclNjaGVtZU5hbWUsXG59IGZyb20gJy4vTmF0aXZlQXBwZWFyYW5jZSc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQge2lzQXN5bmNEZWJ1Z2dpbmd9IGZyb20gJy4vRGVidWdFbnZpcm9ubWVudCc7XG5cbnR5cGUgQXBwZWFyYW5jZUxpc3RlbmVyID0gKHByZWZlcmVuY2VzOiBBcHBlYXJhbmNlUHJlZmVyZW5jZXMpID0+IHZvaWQ7XG5jb25zdCBldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbmlmIChOYXRpdmVBcHBlYXJhbmNlKSB7XG4gIGNvbnN0IG5hdGl2ZUV2ZW50RW1pdHRlciA9IG5ldyBOYXRpdmVFdmVudEVtaXR0ZXIoTmF0aXZlQXBwZWFyYW5jZSk7XG4gIG5hdGl2ZUV2ZW50RW1pdHRlci5hZGRMaXN0ZW5lcihcbiAgICAnYXBwZWFyYW5jZUNoYW5nZWQnLFxuICAgIChuZXdBcHBlYXJhbmNlOiBBcHBlYXJhbmNlUHJlZmVyZW5jZXMpID0+IHtcbiAgICAgIGNvbnN0IHtjb2xvclNjaGVtZX0gPSBuZXdBcHBlYXJhbmNlO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBjb2xvclNjaGVtZSA9PT0gJ2RhcmsnIHx8XG4gICAgICAgICAgY29sb3JTY2hlbWUgPT09ICdsaWdodCcgfHxcbiAgICAgICAgICBjb2xvclNjaGVtZSA9PSBudWxsLFxuICAgICAgICBcIlVucmVjb2duaXplZCBjb2xvciBzY2hlbWUuIERpZCB5b3UgbWVhbiAnZGFyaycgb3IgJ2xpZ2h0Jz9cIixcbiAgICAgICk7XG4gICAgICAvLyBVcGRhdGUgY2FjaGVkIHZhbHVlXG4gICAgICBwcmVmZXJlbmNlcy5jb2xvclNjaGVtZSA9IGNvbG9yU2NoZW1lO1xuICAgICAgZXZlbnRFbWl0dGVyLmVtaXQoJ2NoYW5nZScsIHtjb2xvclNjaGVtZX0pO1xuICAgIH0sXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxDb2xvclNjaGVtZSgpOiA/Q29sb3JTY2hlbWVOYW1lIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoaXNBc3luY0RlYnVnZ2luZykge1xuICAgICAgLy8gSGFyZCBjb2RlIGxpZ2h0IHRoZW1lIHdoZW4gdXNpbmcgdGhlIGFzeW5jIGRlYnVnZ2VyIGFzXG4gICAgICAvLyBzeW5jIGNhbGxzIGFyZW4ndCBzdXBwb3J0ZWRcbiAgICAgIHJldHVybiAnbGlnaHQnO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IChocmFtb3MpIFQ1MjkxOTY1MiBVc2UgP0NvbG9yU2NoZW1lTmFtZSBvbmNlIGNvZGVnZW4gc3VwcG9ydHMgdW5pb25cbiAgY29uc3QgbmF0aXZlQ29sb3JTY2hlbWU6ID9zdHJpbmcgPVxuICAgIE5hdGl2ZUFwcGVhcmFuY2UgPT0gbnVsbCA/IG51bGwgOiBOYXRpdmVBcHBlYXJhbmNlLmdldENvbG9yU2NoZW1lKCkgfHwgbnVsbDtcbiAgaW52YXJpYW50KFxuICAgIG5hdGl2ZUNvbG9yU2NoZW1lID09PSAnZGFyaycgfHxcbiAgICAgIG5hdGl2ZUNvbG9yU2NoZW1lID09PSAnbGlnaHQnIHx8XG4gICAgICBuYXRpdmVDb2xvclNjaGVtZSA9PSBudWxsLFxuICAgIFwiVW5yZWNvZ25pemVkIGNvbG9yIHNjaGVtZS4gRGlkIHlvdSBtZWFuICdkYXJrJyBvciAnbGlnaHQnP1wiLFxuICApO1xuICByZXR1cm4gbmF0aXZlQ29sb3JTY2hlbWU7XG59XG5cbmZ1bmN0aW9uIGdldENvbG9yU2NoZW1lKCk6ID9Db2xvclNjaGVtZU5hbWUge1xuICBpZiAoIXByZWZlcmVuY2VzLmNvbG9yU2NoZW1lKSB7XG4gICAgY29uc3QgaW5pdGlhbENvbG9yU2NoZW1lID0gZ2V0SW5pdGlhbENvbG9yU2NoZW1lKCk7XG4gICAgcHJlZmVyZW5jZXMuY29sb3JTY2hlbWUgPSBpbml0aWFsQ29sb3JTY2hlbWU7XG4gICAgcmV0dXJuIHByZWZlcmVuY2VzLmNvbG9yU2NoZW1lO1xuICB9XG5cbiAgcmV0dXJuIHByZWZlcmVuY2VzLmNvbG9yU2NoZW1lO1xufVxuXG5jb25zdCBwcmVmZXJlbmNlcyA9IHtcbiAgY29sb3JTY2hlbWU6IG51bGwsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLyoqXG4gICAqIE5vdGU6IEFsdGhvdWdoIGNvbG9yIHNjaGVtZSBpcyBhdmFpbGFibGUgaW1tZWRpYXRlbHksIGl0IG1heSBjaGFuZ2UgYXQgYW55XG4gICAqIHRpbWUuIEFueSByZW5kZXJpbmcgbG9naWMgb3Igc3R5bGVzIHRoYXQgZGVwZW5kIG9uIHRoaXMgc2hvdWxkIHRyeSB0byBjYWxsXG4gICAqIHRoaXMgZnVuY3Rpb24gb24gZXZlcnkgcmVuZGVyLCByYXRoZXIgdGhhbiBjYWNoaW5nIHRoZSB2YWx1ZSAoZm9yIGV4YW1wbGUsXG4gICAqIHVzaW5nIGlubGluZSBzdHlsZXMgcmF0aGVyIHRoYW4gc2V0dGluZyBhIHZhbHVlIGluIGEgYFN0eWxlU2hlZXRgKS5cbiAgICpcbiAgICogRXhhbXBsZTogYGNvbnN0IGNvbG9yU2NoZW1lID0gQXBwZWFyYW5jZS5nZXRDb2xvclNjaGVtZSgpO2BcbiAgICpcbiAgICogQHJldHVybnMgez9Db2xvclNjaGVtZU5hbWV9IFZhbHVlIGZvciB0aGUgY29sb3Igc2NoZW1lIHByZWZlcmVuY2UuXG4gICAqL1xuICBnZXRDb2xvclNjaGVtZSxcbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCBoYW5kbGVyIHRoYXQgaXMgZmlyZWQgd2hlbiBhcHBlYXJhbmNlIHByZWZlcmVuY2VzIGNoYW5nZS5cbiAgICovXG4gIGFkZENoYW5nZUxpc3RlbmVyKGxpc3RlbmVyOiBBcHBlYXJhbmNlTGlzdGVuZXIpOiB2b2lkIHtcbiAgICBldmVudEVtaXR0ZXIuYWRkTGlzdGVuZXIoJ2NoYW5nZScsIGxpc3RlbmVyKTtcbiAgfSxcbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxuICAgKi9cbiAgcmVtb3ZlQ2hhbmdlTGlzdGVuZXIobGlzdGVuZXI6IEFwcGVhcmFuY2VMaXN0ZW5lcik6IHZvaWQge1xuICAgIGV2ZW50RW1pdHRlci5yZW1vdmVMaXN0ZW5lcignY2hhbmdlJywgbGlzdGVuZXIpO1xuICB9LFxufTtcbiJdfQ==