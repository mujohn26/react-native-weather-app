{"version":3,"sources":["Appearance.js"],"names":["eventEmitter","EventEmitter","NativeAppearance","nativeEventEmitter","NativeEventEmitter","addListener","newAppearance","colorScheme","preferences","emit","getInitialColorScheme","__DEV__","isAsyncDebugging","nativeColorScheme","getColorScheme","initialColorScheme","module","exports","addChangeListener","listener","removeChangeListener","removeListener"],"mappings":"AAUA;;;;AAEA;;AACA;;AACA;;AAIA;;AACA;;AAGA,IAAMA,YAAY,GAAG,IAAIC,qBAAJ,EAArB;;AAEA,IAAIC,yBAAJ,EAAsB;AACpB,MAAMC,kBAAkB,GAAG,IAAIC,2BAAJ,CAAuBF,yBAAvB,CAA3B;AACAC,EAAAA,kBAAkB,CAACE,WAAnB,CACE,mBADF,EAEE,UAACC,aAAD,EAA0C;AAAA,QACjCC,WADiC,GAClBD,aADkB,CACjCC,WADiC;AAExC,4BACEA,WAAW,KAAK,MAAhB,IACEA,WAAW,KAAK,OADlB,IAEEA,WAAW,IAAI,IAHnB,EAIE,4DAJF;AAOAC,IAAAA,WAAW,CAACD,WAAZ,GAA0BA,WAA1B;AACAP,IAAAA,YAAY,CAACS,IAAb,CAAkB,QAAlB,EAA4B;AAACF,MAAAA,WAAW,EAAXA;AAAD,KAA5B;AACD,GAbH;AAeD;;AAED,SAASG,qBAAT,GAAmD;AACjD,MAAIC,OAAJ,EAAa;AACX,QAAIC,kCAAJ,EAAsB;AAGpB,aAAO,OAAP;AACD;AACF;;AAGD,MAAMC,iBAA0B,GAC9BX,6BAAoB,IAApB,GAA2B,IAA3B,GAAkCA,0BAAiBY,cAAjB,MAAqC,IADzE;AAEA,0BACED,iBAAiB,KAAK,MAAtB,IACEA,iBAAiB,KAAK,OADxB,IAEEA,iBAAiB,IAAI,IAHzB,EAIE,4DAJF;AAMA,SAAOA,iBAAP;AACD;;AAED,SAASC,cAAT,GAA4C;AAC1C,MAAI,CAACN,WAAW,CAACD,WAAjB,EAA8B;AAC5B,QAAMQ,kBAAkB,GAAGL,qBAAqB,EAAhD;AACAF,IAAAA,WAAW,CAACD,WAAZ,GAA0BQ,kBAA1B;AACA,WAAOP,WAAW,CAACD,WAAnB;AACD;;AAED,SAAOC,WAAW,CAACD,WAAnB;AACD;;AAED,IAAMC,WAAW,GAAG;AAClBD,EAAAA,WAAW,EAAE;AADK,CAApB;AAIAS,MAAM,CAACC,OAAP,GAAiB;AAWfH,EAAAA,cAAc,EAAdA,cAXe;AAefI,EAAAA,iBAfe,6BAeGC,QAfH,EAeuC;AACpDnB,IAAAA,YAAY,CAACK,WAAb,CAAyB,QAAzB,EAAmCc,QAAnC;AACD,GAjBc;AAqBfC,EAAAA,oBArBe,gCAqBMD,QArBN,EAqB0C;AACvDnB,IAAAA,YAAY,CAACqB,cAAb,CAA4B,QAA5B,EAAsCF,QAAtC;AACD;AAvBc,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeAppearance, {\n  type AppearancePreferences,\n  type ColorSchemeName,\n} from './NativeAppearance';\nimport invariant from 'invariant';\nimport {isAsyncDebugging} from './DebugEnvironment';\n\ntype AppearanceListener = (preferences: AppearancePreferences) => void;\nconst eventEmitter = new EventEmitter();\n\nif (NativeAppearance) {\n  const nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\n  nativeEventEmitter.addListener(\n    'appearanceChanged',\n    (newAppearance: AppearancePreferences) => {\n      const {colorScheme} = newAppearance;\n      invariant(\n        colorScheme === 'dark' ||\n          colorScheme === 'light' ||\n          colorScheme == null,\n        \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n      );\n      // Update cached value\n      preferences.colorScheme = colorScheme;\n      eventEmitter.emit('change', {colorScheme});\n    },\n  );\n}\n\nfunction getInitialColorScheme(): ?ColorSchemeName {\n  if (__DEV__) {\n    if (isAsyncDebugging) {\n      // Hard code light theme when using the async debugger as\n      // sync calls aren't supported\n      return 'light';\n    }\n  }\n\n  // TODO: (hramos) T52919652 Use ?ColorSchemeName once codegen supports union\n  const nativeColorScheme: ?string =\n    NativeAppearance == null ? null : NativeAppearance.getColorScheme() || null;\n  invariant(\n    nativeColorScheme === 'dark' ||\n      nativeColorScheme === 'light' ||\n      nativeColorScheme == null,\n    \"Unrecognized color scheme. Did you mean 'dark' or 'light'?\",\n  );\n  return nativeColorScheme;\n}\n\nfunction getColorScheme(): ?ColorSchemeName {\n  if (!preferences.colorScheme) {\n    const initialColorScheme = getInitialColorScheme();\n    preferences.colorScheme = initialColorScheme;\n    return preferences.colorScheme;\n  }\n\n  return preferences.colorScheme;\n}\n\nconst preferences = {\n  colorScheme: null,\n};\n\nmodule.exports = {\n  /**\n   * Note: Although color scheme is available immediately, it may change at any\n   * time. Any rendering logic or styles that depend on this should try to call\n   * this function on every render, rather than caching the value (for example,\n   * using inline styles rather than setting a value in a `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.getColorScheme();`\n   *\n   * @returns {?ColorSchemeName} Value for the color scheme preference.\n   */\n  getColorScheme,\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  addChangeListener(listener: AppearanceListener): void {\n    eventEmitter.addListener('change', listener);\n  },\n  /**\n   * Remove an event handler.\n   */\n  removeChangeListener(listener: AppearanceListener): void {\n    eventEmitter.removeListener('change', listener);\n  },\n};\n"]}