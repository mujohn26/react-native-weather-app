8ccb79fe9f4b5cbba9ae162c9e82b8d5
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocationGeofencingRegionState = exports.LocationGeofencingEventType = exports.LocationActivityType = exports.LocationAccuracy = void 0;
var LocationAccuracy;
exports.LocationAccuracy = LocationAccuracy;

(function (LocationAccuracy) {
  LocationAccuracy[LocationAccuracy["Lowest"] = 1] = "Lowest";
  LocationAccuracy[LocationAccuracy["Low"] = 2] = "Low";
  LocationAccuracy[LocationAccuracy["Balanced"] = 3] = "Balanced";
  LocationAccuracy[LocationAccuracy["High"] = 4] = "High";
  LocationAccuracy[LocationAccuracy["Highest"] = 5] = "Highest";
  LocationAccuracy[LocationAccuracy["BestForNavigation"] = 6] = "BestForNavigation";
})(LocationAccuracy || (exports.LocationAccuracy = LocationAccuracy = {}));

var LocationActivityType;
exports.LocationActivityType = LocationActivityType;

(function (LocationActivityType) {
  LocationActivityType[LocationActivityType["Other"] = 1] = "Other";
  LocationActivityType[LocationActivityType["AutomotiveNavigation"] = 2] = "AutomotiveNavigation";
  LocationActivityType[LocationActivityType["Fitness"] = 3] = "Fitness";
  LocationActivityType[LocationActivityType["OtherNavigation"] = 4] = "OtherNavigation";
  LocationActivityType[LocationActivityType["Airborne"] = 5] = "Airborne";
})(LocationActivityType || (exports.LocationActivityType = LocationActivityType = {}));

var LocationGeofencingEventType;
exports.LocationGeofencingEventType = LocationGeofencingEventType;

(function (LocationGeofencingEventType) {
  LocationGeofencingEventType[LocationGeofencingEventType["Enter"] = 1] = "Enter";
  LocationGeofencingEventType[LocationGeofencingEventType["Exit"] = 2] = "Exit";
})(LocationGeofencingEventType || (exports.LocationGeofencingEventType = LocationGeofencingEventType = {}));

var LocationGeofencingRegionState;
exports.LocationGeofencingRegionState = LocationGeofencingRegionState;

(function (LocationGeofencingRegionState) {
  LocationGeofencingRegionState[LocationGeofencingRegionState["Unknown"] = 0] = "Unknown";
  LocationGeofencingRegionState[LocationGeofencingRegionState["Inside"] = 1] = "Inside";
  LocationGeofencingRegionState[LocationGeofencingRegionState["Outside"] = 2] = "Outside";
})(LocationGeofencingRegionState || (exports.LocationGeofencingRegionState = LocationGeofencingRegionState = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,