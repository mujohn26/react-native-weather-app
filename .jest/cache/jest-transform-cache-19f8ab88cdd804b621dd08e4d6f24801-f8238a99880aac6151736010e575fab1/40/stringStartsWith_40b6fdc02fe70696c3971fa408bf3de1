4b3c57b4f2bb955483ca431630f442bc
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = stringStartsWithValidator;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function stringStartsWithValidator(start) {
  if (typeof start !== 'string' || start.length === 0) {
    throw new TypeError('a non-empty string is required');
  }

  var validator = function stringStartsWith(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    var stringError = _propTypes.string.apply(void 0, [props, propName, componentName].concat(rest));

    if (stringError) {
      return stringError;
    }

    if (!propValue.startsWith(start) || propValue.length <= start.length) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " does not start with \"").concat(start, "\""));
    }

    return null;
  };

  validator.isRequired = function requiredStringStartsWith() {
    var stringError = _propTypes.string.isRequired.apply(_propTypes.string, arguments);

    if (stringError) {
      return stringError;
    }

    return validator.apply(void 0, arguments);
  };

  return (0, _wrapValidator["default"])(validator, "stringStartsWith: ".concat(start));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHJpbmdTdGFydHNXaXRoLmpzIl0sIm5hbWVzIjpbInN0YXJ0IiwidmFsaWRhdG9yIiwicmVzdCIsInByb3BWYWx1ZSIsInByb3BzIiwic3RyaW5nRXJyb3IiLCJzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOzs7Ozs7OztBQUVlLFNBQUEseUJBQUEsQ0FBQSxLQUFBLEVBQTBDO0FBQ3ZELE1BQUksT0FBQSxLQUFBLEtBQUEsUUFBQSxJQUE2QkEsS0FBSyxDQUFMQSxNQUFBQSxLQUFqQyxDQUFBLEVBQXFEO0FBQ25ELFVBQU0sSUFBQSxTQUFBLENBQU4sZ0NBQU0sQ0FBTjtBQUNEOztBQUVELE1BQU1DLFNBQVMsR0FBRyxTQUFBLGdCQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQW1FO0FBQUEsUUFDL0RFLFNBRCtELEdBQ2pEQyxLQURpRCxDQUFBLFFBQUEsQ0FBQTs7QUFHbkYsUUFBSUQsU0FBUyxJQUFiLElBQUEsRUFBdUI7QUFDckIsYUFBQSxJQUFBO0FBQ0Q7O0FBTGtGLFNBQUEsSUFBQSxJQUFBLEdBQUEsU0FBQSxDQUFBLE1BQUEsRUFBTkQsSUFBTSxHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsR0FBQSxDQUFBLEdBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUE7QUFBTkEsTUFBQUEsSUFBTSxDQUFBLElBQUEsR0FBQSxDQUFBLENBQU5BLEdBQU0sU0FBQSxDQUFBLElBQUEsQ0FBTkE7QUFBTTs7QUFPbkYsUUFBTUcsV0FBVyxHQUFHQyxVQUFBQSxDQUFBQSxNQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFwQixJQUFvQkEsQ0FBQUEsQ0FBcEI7O0FBQ0EsUUFBQSxXQUFBLEVBQWlCO0FBQ2YsYUFBQSxXQUFBO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDSCxTQUFTLENBQVRBLFVBQUFBLENBQUQsS0FBQ0EsQ0FBRCxJQUFnQ0EsU0FBUyxDQUFUQSxNQUFBQSxJQUFvQkgsS0FBSyxDQUE3RCxNQUFBLEVBQXNFO0FBQ3BFLGFBQU8sSUFBQSxTQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsYUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsUUFBQSxFQUFBLHlCQUFBLEVBQUEsTUFBQSxDQUFBLEtBQUEsRUFBUCxJQUFPLENBQUEsQ0FBUDtBQUNEOztBQUNELFdBQUEsSUFBQTtBQWZGLEdBQUE7O0FBa0JBQyxFQUFBQSxTQUFTLENBQVRBLFVBQUFBLEdBQXVCLFNBQUEsd0JBQUEsR0FBMkM7QUFDaEUsUUFBTUksV0FBVyxHQUFHQyxVQUFBQSxDQUFBQSxNQUFBQSxDQUFBQSxVQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxVQUFBQSxDQUFBQSxNQUFBQSxFQUFwQixTQUFvQkEsQ0FBcEI7O0FBQ0EsUUFBQSxXQUFBLEVBQWlCO0FBQ2YsYUFBQSxXQUFBO0FBQ0Q7O0FBQ0QsV0FBT0wsU0FBUyxDQUFUQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFQLFNBQU9BLENBQVA7QUFMRkEsR0FBQUE7O0FBUUEsU0FBTyxDQUFBLEdBQUEsY0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLFNBQUEsRUFBQSxxQkFBQSxNQUFBLENBQVAsS0FBTyxDQUFBLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0cmluZyB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdHJpbmdTdGFydHNXaXRoVmFsaWRhdG9yKHN0YXJ0KSB7XG4gIGlmICh0eXBlb2Ygc3RhcnQgIT09ICdzdHJpbmcnIHx8IHN0YXJ0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Egbm9uLWVtcHR5IHN0cmluZyBpcyByZXF1aXJlZCcpO1xuICB9XG5cbiAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24gc3RyaW5nU3RhcnRzV2l0aChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG5cbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IHN0cmluZ0Vycm9yID0gc3RyaW5nKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gICAgaWYgKHN0cmluZ0Vycm9yKSB7XG4gICAgICByZXR1cm4gc3RyaW5nRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKCFwcm9wVmFsdWUuc3RhcnRzV2l0aChzdGFydCkgfHwgcHJvcFZhbHVlLmxlbmd0aCA8PSBzdGFydC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGAke2NvbXBvbmVudE5hbWV9OiAke3Byb3BOYW1lfSBkb2VzIG5vdCBzdGFydCB3aXRoIFwiJHtzdGFydH1cImApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIHJlcXVpcmVkU3RyaW5nU3RhcnRzV2l0aCguLi5hcmdzKSB7XG4gICAgY29uc3Qgc3RyaW5nRXJyb3IgPSBzdHJpbmcuaXNSZXF1aXJlZCguLi5hcmdzKTtcbiAgICBpZiAoc3RyaW5nRXJyb3IpIHtcbiAgICAgIHJldHVybiBzdHJpbmdFcnJvcjtcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkYXRvciguLi5hcmdzKTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFZhbGlkYXRvcih2YWxpZGF0b3IsIGBzdHJpbmdTdGFydHNXaXRoOiAke3N0YXJ0fWApO1xufVxuIl19