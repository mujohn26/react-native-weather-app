3f451e8293653d3e3f3ee0d0db23c560
var Stack = require("./_Stack"),
    baseIsEqual = require("./_baseIsEqual");

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }

  object = Object(object);

  while (index--) {
    var data = matchData[index];

    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }

  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();

      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }

      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }

  return true;
}

module.exports = baseIsMatch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9iYXNlSXNNYXRjaC5qcyJdLCJuYW1lcyI6WyJTdGFjayIsInJlcXVpcmUiLCJiYXNlSXNFcXVhbCIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImJhc2VJc01hdGNoIiwib2JqZWN0Iiwic291cmNlIiwibWF0Y2hEYXRhIiwiY3VzdG9taXplciIsImluZGV4IiwibGVuZ3RoIiwibm9DdXN0b21pemVyIiwiT2JqZWN0IiwiZGF0YSIsImtleSIsIm9ialZhbHVlIiwic3JjVmFsdWUiLCJ1bmRlZmluZWQiLCJzdGFjayIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLEtBQUssR0FBR0MsT0FBTyxZQUFuQjtBQUFBLElBQ0lDLFdBQVcsR0FBR0QsT0FBTyxrQkFEekI7O0FBSUEsSUFBSUUsb0JBQW9CLEdBQUcsQ0FBM0I7QUFBQSxJQUNJQyxzQkFBc0IsR0FBRyxDQUQ3Qjs7QUFhQSxTQUFTQyxXQUFULENBQXFCQyxNQUFyQixFQUE2QkMsTUFBN0IsRUFBcUNDLFNBQXJDLEVBQWdEQyxVQUFoRCxFQUE0RDtBQUMxRCxNQUFJQyxLQUFLLEdBQUdGLFNBQVMsQ0FBQ0csTUFBdEI7QUFBQSxNQUNJQSxNQUFNLEdBQUdELEtBRGI7QUFBQSxNQUVJRSxZQUFZLEdBQUcsQ0FBQ0gsVUFGcEI7O0FBSUEsTUFBSUgsTUFBTSxJQUFJLElBQWQsRUFBb0I7QUFDbEIsV0FBTyxDQUFDSyxNQUFSO0FBQ0Q7O0FBQ0RMLEVBQUFBLE1BQU0sR0FBR08sTUFBTSxDQUFDUCxNQUFELENBQWY7O0FBQ0EsU0FBT0ksS0FBSyxFQUFaLEVBQWdCO0FBQ2QsUUFBSUksSUFBSSxHQUFHTixTQUFTLENBQUNFLEtBQUQsQ0FBcEI7O0FBQ0EsUUFBS0UsWUFBWSxJQUFJRSxJQUFJLENBQUMsQ0FBRCxDQUFyQixHQUNJQSxJQUFJLENBQUMsQ0FBRCxDQUFKLEtBQVlSLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDLENBQUQsQ0FBTCxDQUR0QixHQUVJLEVBQUVBLElBQUksQ0FBQyxDQUFELENBQUosSUFBV1IsTUFBYixDQUZSLEVBR007QUFDSixhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUNELFNBQU8sRUFBRUksS0FBRixHQUFVQyxNQUFqQixFQUF5QjtBQUN2QkcsSUFBQUEsSUFBSSxHQUFHTixTQUFTLENBQUNFLEtBQUQsQ0FBaEI7QUFDQSxRQUFJSyxHQUFHLEdBQUdELElBQUksQ0FBQyxDQUFELENBQWQ7QUFBQSxRQUNJRSxRQUFRLEdBQUdWLE1BQU0sQ0FBQ1MsR0FBRCxDQURyQjtBQUFBLFFBRUlFLFFBQVEsR0FBR0gsSUFBSSxDQUFDLENBQUQsQ0FGbkI7O0FBSUEsUUFBSUYsWUFBWSxJQUFJRSxJQUFJLENBQUMsQ0FBRCxDQUF4QixFQUE2QjtBQUMzQixVQUFJRSxRQUFRLEtBQUtFLFNBQWIsSUFBMEIsRUFBRUgsR0FBRyxJQUFJVCxNQUFULENBQTlCLEVBQWdEO0FBQzlDLGVBQU8sS0FBUDtBQUNEO0FBQ0YsS0FKRCxNQUlPO0FBQ0wsVUFBSWEsS0FBSyxHQUFHLElBQUluQixLQUFKLEVBQVo7O0FBQ0EsVUFBSVMsVUFBSixFQUFnQjtBQUNkLFlBQUlXLE1BQU0sR0FBR1gsVUFBVSxDQUFDTyxRQUFELEVBQVdDLFFBQVgsRUFBcUJGLEdBQXJCLEVBQTBCVCxNQUExQixFQUFrQ0MsTUFBbEMsRUFBMENZLEtBQTFDLENBQXZCO0FBQ0Q7O0FBQ0QsVUFBSSxFQUFFQyxNQUFNLEtBQUtGLFNBQVgsR0FDRWhCLFdBQVcsQ0FBQ2UsUUFBRCxFQUFXRCxRQUFYLEVBQXFCYixvQkFBb0IsR0FBR0Msc0JBQTVDLEVBQW9FSyxVQUFwRSxFQUFnRlUsS0FBaEYsQ0FEYixHQUVFQyxNQUZKLENBQUosRUFHTztBQUNMLGVBQU8sS0FBUDtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPLElBQVA7QUFDRDs7QUFFREMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakIsV0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICB2YXIgaW5kZXggPSBtYXRjaERhdGEubGVuZ3RoLFxuICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gIWxlbmd0aDtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgaWYgKChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSlcbiAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgdmFyIGtleSA9IGRhdGFbMF0sXG4gICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgIGlmIChub0N1c3RvbWl6ZXIgJiYgZGF0YVsyXSkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEocmVzdWx0ID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTWF0Y2g7XG4iXX0=