1de9b062d6a00cc62ddee1ac6f298e88
'use strict';

var GetIntrinsic = require("../GetIntrinsic");

var $Array = GetIntrinsic('%Array%');
var $species = GetIntrinsic('%Symbol.species%', true);
var $TypeError = GetIntrinsic('%TypeError%');

var Get = require("./Get");

var IsArray = require("./IsArray");

var IsConstructor = require("./IsConstructor");

var IsInteger = require("./IsInteger");

var Type = require("./Type");

module.exports = function ArraySpeciesCreate(originalArray, length) {
  if (!IsInteger(length) || length < 0) {
    throw new $TypeError('Assertion failed: length must be an integer >= 0');
  }

  var len = length === 0 ? 0 : length;
  var C;
  var isArray = IsArray(originalArray);

  if (isArray) {
    C = Get(originalArray, 'constructor');

    if ($species && Type(C) === 'Object') {
      C = Get(C, $species);

      if (C === null) {
        C = void 0;
      }
    }
  }

  if (typeof C === 'undefined') {
    return $Array(len);
  }

  if (!IsConstructor(C)) {
    throw new $TypeError('C must be a constructor');
  }

  return new C(len);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFycmF5U3BlY2llc0NyZWF0ZS5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJEFycmF5IiwiJHNwZWNpZXMiLCIkVHlwZUVycm9yIiwiR2V0IiwiSXNBcnJheSIsIklzQ29uc3RydWN0b3IiLCJJc0ludGVnZXIiLCJUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5U3BlY2llc0NyZWF0ZSIsIm9yaWdpbmFsQXJyYXkiLCJsZW5ndGgiLCJsZW4iLCJDIiwiaXNBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsWUFBWSxHQUFHQyxPQUFPLG1CQUExQjs7QUFFQSxJQUFJQyxNQUFNLEdBQUdGLFlBQVksQ0FBQyxTQUFELENBQXpCO0FBQ0EsSUFBSUcsUUFBUSxHQUFHSCxZQUFZLENBQUMsa0JBQUQsRUFBcUIsSUFBckIsQ0FBM0I7QUFDQSxJQUFJSSxVQUFVLEdBQUdKLFlBQVksQ0FBQyxhQUFELENBQTdCOztBQUVBLElBQUlLLEdBQUcsR0FBR0osT0FBTyxTQUFqQjs7QUFDQSxJQUFJSyxPQUFPLEdBQUdMLE9BQU8sYUFBckI7O0FBQ0EsSUFBSU0sYUFBYSxHQUFHTixPQUFPLG1CQUEzQjs7QUFDQSxJQUFJTyxTQUFTLEdBQUdQLE9BQU8sZUFBdkI7O0FBQ0EsSUFBSVEsSUFBSSxHQUFHUixPQUFPLFVBQWxCOztBQUlBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0Msa0JBQVQsQ0FBNEJDLGFBQTVCLEVBQTJDQyxNQUEzQyxFQUFtRDtBQUNuRSxNQUFJLENBQUNOLFNBQVMsQ0FBQ00sTUFBRCxDQUFWLElBQXNCQSxNQUFNLEdBQUcsQ0FBbkMsRUFBc0M7QUFDckMsVUFBTSxJQUFJVixVQUFKLENBQWUsa0RBQWYsQ0FBTjtBQUNBOztBQUNELE1BQUlXLEdBQUcsR0FBR0QsTUFBTSxLQUFLLENBQVgsR0FBZSxDQUFmLEdBQW1CQSxNQUE3QjtBQUNBLE1BQUlFLENBQUo7QUFDQSxNQUFJQyxPQUFPLEdBQUdYLE9BQU8sQ0FBQ08sYUFBRCxDQUFyQjs7QUFDQSxNQUFJSSxPQUFKLEVBQWE7QUFDWkQsSUFBQUEsQ0FBQyxHQUFHWCxHQUFHLENBQUNRLGFBQUQsRUFBZ0IsYUFBaEIsQ0FBUDs7QUFNQSxRQUFJVixRQUFRLElBQUlNLElBQUksQ0FBQ08sQ0FBRCxDQUFKLEtBQVksUUFBNUIsRUFBc0M7QUFDckNBLE1BQUFBLENBQUMsR0FBR1gsR0FBRyxDQUFDVyxDQUFELEVBQUliLFFBQUosQ0FBUDs7QUFDQSxVQUFJYSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNmQSxRQUFBQSxDQUFDLEdBQUcsS0FBSyxDQUFUO0FBQ0E7QUFDRDtBQUNEOztBQUNELE1BQUksT0FBT0EsQ0FBUCxLQUFhLFdBQWpCLEVBQThCO0FBQzdCLFdBQU9kLE1BQU0sQ0FBQ2EsR0FBRCxDQUFiO0FBQ0E7O0FBQ0QsTUFBSSxDQUFDUixhQUFhLENBQUNTLENBQUQsQ0FBbEIsRUFBdUI7QUFDdEIsVUFBTSxJQUFJWixVQUFKLENBQWUseUJBQWYsQ0FBTjtBQUNBOztBQUNELFNBQU8sSUFBSVksQ0FBSixDQUFNRCxHQUFOLENBQVA7QUFDQSxDQTVCRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJEFycmF5ID0gR2V0SW50cmluc2ljKCclQXJyYXklJyk7XG52YXIgJHNwZWNpZXMgPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wuc3BlY2llcyUnLCB0cnVlKTtcbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgSXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vSXNDb25zdHJ1Y3RvcicpO1xudmFyIElzSW50ZWdlciA9IHJlcXVpcmUoJy4vSXNJbnRlZ2VyJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuXHRpZiAoIUlzSW50ZWdlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwJyk7XG5cdH1cblx0dmFyIGxlbiA9IGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGg7XG5cdHZhciBDO1xuXHR2YXIgaXNBcnJheSA9IElzQXJyYXkob3JpZ2luYWxBcnJheSk7XG5cdGlmIChpc0FycmF5KSB7XG5cdFx0QyA9IEdldChvcmlnaW5hbEFycmF5LCAnY29uc3RydWN0b3InKTtcblx0XHQvLyBUT0RPOiBmaWd1cmUgb3V0IGhvdyB0byBtYWtlIGEgY3Jvc3MtcmVhbG0gbm9ybWFsIEFycmF5LCBhIHNhbWUtcmVhbG0gQXJyYXlcblx0XHQvLyBpZiAoSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdC8vIFx0aWYgQyBpcyBhbm90aGVyIHJlYWxtJ3MgQXJyYXksIEMgPSB1bmRlZmluZWRcblx0XHQvLyBcdE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKEFycmF5KSkpID09PSBudWxsID9cblx0XHQvLyB9XG5cdFx0aWYgKCRzcGVjaWVzICYmIFR5cGUoQykgPT09ICdPYmplY3QnKSB7XG5cdFx0XHRDID0gR2V0KEMsICRzcGVjaWVzKTtcblx0XHRcdGlmIChDID09PSBudWxsKSB7XG5cdFx0XHRcdEMgPSB2b2lkIDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJEFycmF5KGxlbik7XG5cdH1cblx0aWYgKCFJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0MgbXVzdCBiZSBhIGNvbnN0cnVjdG9yJyk7XG5cdH1cblx0cmV0dXJuIG5ldyBDKGxlbik7IC8vIENvbnN0cnVjdChDLCBsZW4pO1xufTtcblxuIl19