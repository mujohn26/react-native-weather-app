be8052b8d141b1425c8e7bf19bbdbe98
var DomUtils = require("domutils"),
    hasAttrib = DomUtils.hasAttrib,
    getAttributeValue = DomUtils.getAttributeValue,
    falseFunc = require("boolbase").falseFunc;

var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
var attributeRules = {
  __proto__: null,
  equals: function equals(next, data) {
    var name = data.name,
        value = data.value;

    if (data.ignoreCase) {
      value = value.toLowerCase();
      return function equalsIC(elem) {
        var attr = getAttributeValue(elem, name);
        return attr != null && attr.toLowerCase() === value && next(elem);
      };
    }

    return function equals(elem) {
      return getAttributeValue(elem, name) === value && next(elem);
    };
  },
  hyphen: function hyphen(next, data) {
    var name = data.name,
        value = data.value,
        len = value.length;

    if (data.ignoreCase) {
      value = value.toLowerCase();
      return function hyphenIC(elem) {
        var attr = getAttributeValue(elem, name);
        return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len).toLowerCase() === value && next(elem);
      };
    }

    return function hyphen(elem) {
      var attr = getAttributeValue(elem, name);
      return attr != null && attr.substr(0, len) === value && (attr.length === len || attr.charAt(len) === "-") && next(elem);
    };
  },
  element: function element(next, data) {
    var name = data.name,
        value = data.value;

    if (/\s/.test(value)) {
      return falseFunc;
    }

    value = value.replace(reChars, "\\$&");
    var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
        flags = data.ignoreCase ? "i" : "",
        regex = new RegExp(pattern, flags);
    return function element(elem) {
      var attr = getAttributeValue(elem, name);
      return attr != null && regex.test(attr) && next(elem);
    };
  },
  exists: function exists(next, data) {
    var name = data.name;
    return function exists(elem) {
      return hasAttrib(elem, name) && next(elem);
    };
  },
  start: function start(next, data) {
    var name = data.name,
        value = data.value,
        len = value.length;

    if (len === 0) {
      return falseFunc;
    }

    if (data.ignoreCase) {
      value = value.toLowerCase();
      return function startIC(elem) {
        var attr = getAttributeValue(elem, name);
        return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
      };
    }

    return function start(elem) {
      var attr = getAttributeValue(elem, name);
      return attr != null && attr.substr(0, len) === value && next(elem);
    };
  },
  end: function end(next, data) {
    var name = data.name,
        value = data.value,
        len = -value.length;

    if (len === 0) {
      return falseFunc;
    }

    if (data.ignoreCase) {
      value = value.toLowerCase();
      return function endIC(elem) {
        var attr = getAttributeValue(elem, name);
        return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
      };
    }

    return function end(elem) {
      var attr = getAttributeValue(elem, name);
      return attr != null && attr.substr(len) === value && next(elem);
    };
  },
  any: function any(next, data) {
    var name = data.name,
        value = data.value;

    if (value === "") {
      return falseFunc;
    }

    if (data.ignoreCase) {
      var regex = new RegExp(value.replace(reChars, "\\$&"), "i");
      return function anyIC(elem) {
        var attr = getAttributeValue(elem, name);
        return attr != null && regex.test(attr) && next(elem);
      };
    }

    return function any(elem) {
      var attr = getAttributeValue(elem, name);
      return attr != null && attr.indexOf(value) >= 0 && next(elem);
    };
  },
  not: function not(next, data) {
    var name = data.name,
        value = data.value;

    if (value === "") {
      return function notEmpty(elem) {
        return !!getAttributeValue(elem, name) && next(elem);
      };
    } else if (data.ignoreCase) {
      value = value.toLowerCase();
      return function notIC(elem) {
        var attr = getAttributeValue(elem, name);
        return attr != null && attr.toLowerCase() !== value && next(elem);
      };
    }

    return function not(elem) {
      return getAttributeValue(elem, name) !== value && next(elem);
    };
  }
};
module.exports = {
  compile: function compile(next, data, options) {
    if (options && options.strict && (data.ignoreCase || data.action === "not")) throw SyntaxError("Unsupported attribute selector");
    return attributeRules[data.action](next, data);
  },
  rules: attributeRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF0dHJpYnV0ZXMuanMiXSwibmFtZXMiOlsiRG9tVXRpbHMiLCJyZXF1aXJlIiwiaGFzQXR0cmliIiwiZ2V0QXR0cmlidXRlVmFsdWUiLCJmYWxzZUZ1bmMiLCJyZUNoYXJzIiwiYXR0cmlidXRlUnVsZXMiLCJfX3Byb3RvX18iLCJlcXVhbHMiLCJuZXh0IiwiZGF0YSIsIm5hbWUiLCJ2YWx1ZSIsImlnbm9yZUNhc2UiLCJ0b0xvd2VyQ2FzZSIsImVxdWFsc0lDIiwiZWxlbSIsImF0dHIiLCJoeXBoZW4iLCJsZW4iLCJsZW5ndGgiLCJoeXBoZW5JQyIsImNoYXJBdCIsInN1YnN0ciIsImVsZW1lbnQiLCJ0ZXN0IiwicmVwbGFjZSIsInBhdHRlcm4iLCJmbGFncyIsInJlZ2V4IiwiUmVnRXhwIiwiZXhpc3RzIiwic3RhcnQiLCJzdGFydElDIiwiZW5kIiwiZW5kSUMiLCJhbnkiLCJhbnlJQyIsImluZGV4T2YiLCJub3QiLCJub3RFbXB0eSIsIm5vdElDIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbXBpbGUiLCJvcHRpb25zIiwic3RyaWN0IiwiYWN0aW9uIiwiU3ludGF4RXJyb3IiLCJydWxlcyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFJQyxPQUFPLENBQUMsVUFBRCxDQUF2QjtBQUFBLElBQ0lDLFNBQVMsR0FBR0YsUUFBUSxDQUFDRSxTQUR6QjtBQUFBLElBRUlDLGlCQUFpQixHQUFHSCxRQUFRLENBQUNHLGlCQUZqQztBQUFBLElBR0lDLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFVBQUQsQ0FBUCxDQUFvQkcsU0FIcEM7O0FBTUEsSUFBSUMsT0FBTyxHQUFHLDBCQUFkO0FBTUEsSUFBSUMsY0FBYyxHQUFHO0FBQ3BCQyxFQUFBQSxTQUFTLEVBQUUsSUFEUztBQUVwQkMsRUFBQUEsTUFBTSxFQUFFLGdCQUFTQyxJQUFULEVBQWVDLElBQWYsRUFBb0I7QUFDM0IsUUFBSUMsSUFBSSxHQUFJRCxJQUFJLENBQUNDLElBQWpCO0FBQUEsUUFDSUMs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LE1BQW5CLEtBQ0ZwQyxJQUFJLENBQUNHLFVBQUwsSUFBbUJILElBQUksQ0FBQ3FDLE1BQUwsS0FBZ0IsS0FEakMsQ0FBSCxFQUVHLE1BQU1DLFdBQVcsQ0FBQyxnQ0FBRCxDQUFqQjtBQUNILFdBQU8xQyxjQUFjLENBQUNJLElBQUksQ0FBQ3FDLE1BQU4sQ0FBZCxDQUE0QnRDLElBQTVCLEVBQWtDQyxJQUFsQyxDQUFQO0FBQ0EsR0FOZTtBQU9oQnVDLEVBQUFBLEtBQUssRUFBRTNDO0FBUFMsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRG9tVXRpbHMgID0gcmVxdWlyZShcImRvbXV0aWxzXCIpLFxuICAgIGhhc0F0dHJpYiA9IERvbVV0aWxzLmhhc0F0dHJpYixcbiAgICBnZXRBdHRyaWJ1dGVWYWx1ZSA9IERvbVV0aWxzLmdldEF0dHJpYnV0ZVZhbHVlLFxuICAgIGZhbHNlRnVuYyA9IHJlcXVpcmUoXCJib29sYmFzZVwiKS5mYWxzZUZ1bmM7XG5cbi8vaHR0cHM6Ly9naXRodWIuY29tL3NsZXZpdGhhbi9YUmVnRXhwL2Jsb2IvbWFzdGVyL3NyYy94cmVnZXhwLmpzI0w0NjlcbnZhciByZUNoYXJzID0gL1stW1xcXXt9KCkqKz8uLFxcXFxeJHwjXFxzXS9nO1xuXG4vKlxuXHRhdHRyaWJ1dGUgc2VsZWN0b3JzXG4qL1xuXG52YXIgYXR0cmlidXRlUnVsZXMgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0ZXF1YWxzOiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSAgPSBkYXRhLm5hbWUsXG5cdFx0ICAgIHZhbHVlID0gZGF0YS52YWx1ZTtcblxuXHRcdGlmKGRhdGEuaWdub3JlQ2FzZSl7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiBlcXVhbHNJQyhlbGVtKXtcblx0XHRcdFx0dmFyIGF0dHIgPSBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKTtcblx0XHRcdFx0cmV0dXJuIGF0dHIgIT0gbnVsbCAmJiBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBlcXVhbHMoZWxlbSl7XG5cdFx0XHRyZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0fTtcblx0fSxcblx0aHlwaGVuOiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSAgPSBkYXRhLm5hbWUsXG5cdFx0ICAgIHZhbHVlID0gZGF0YS52YWx1ZSxcblx0XHQgICAgbGVuID0gdmFsdWUubGVuZ3RoO1xuXG5cdFx0aWYoZGF0YS5pZ25vcmVDYXNlKXtcblx0XHRcdHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIGh5cGhlbklDKGVsZW0pe1xuXHRcdFx0XHR2YXIgYXR0ciA9IGdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuXHRcdFx0XHRyZXR1cm4gYXR0ciAhPSBudWxsICYmXG5cdFx0XHRcdFx0XHQoYXR0ci5sZW5ndGggPT09IGxlbiB8fCBhdHRyLmNoYXJBdChsZW4pID09PSBcIi1cIikgJiZcblx0XHRcdFx0XHRcdGF0dHIuc3Vic3RyKDAsIGxlbikudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUgJiZcblx0XHRcdFx0XHRcdG5leHQoZWxlbSk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBoeXBoZW4oZWxlbSl7XG5cdFx0XHR2YXIgYXR0ciA9IGdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuXHRcdFx0cmV0dXJuIGF0dHIgIT0gbnVsbCAmJlxuXHRcdFx0XHRcdGF0dHIuc3Vic3RyKDAsIGxlbikgPT09IHZhbHVlICYmXG5cdFx0XHRcdFx0KGF0dHIubGVuZ3RoID09PSBsZW4gfHwgYXR0ci5jaGFyQXQobGVuKSA9PT0gXCItXCIpICYmXG5cdFx0XHRcdFx0bmV4dChlbGVtKTtcblx0XHR9O1xuXHR9LFxuXHRlbGVtZW50OiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSA9IGRhdGEubmFtZSxcblx0XHQgICAgdmFsdWUgPSBkYXRhLnZhbHVlO1xuXG5cdFx0aWYoL1xccy8udGVzdCh2YWx1ZSkpe1xuXHRcdFx0cmV0dXJuIGZhbHNlRnVuYztcblx0XHR9XG5cblx0XHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVDaGFycywgXCJcXFxcJCZcIik7XG5cblx0XHR2YXIgcGF0dGVybiA9IFwiKD86XnxcXFxccylcIiArIHZhbHVlICsgXCIoPzokfFxcXFxzKVwiLFxuXHRcdCAgICBmbGFncyA9IGRhdGEuaWdub3JlQ2FzZSA/IFwiaVwiIDogXCJcIixcblx0XHQgICAgcmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm4sIGZsYWdzKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBlbGVtZW50KGVsZW0pe1xuXHRcdFx0dmFyIGF0dHIgPSBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKTtcblx0XHRcdHJldHVybiBhdHRyICE9IG51bGwgJiYgcmVnZXgudGVzdChhdHRyKSAmJiBuZXh0KGVsZW0pO1xuXHRcdH07XG5cdH0sXG5cdGV4aXN0czogZnVuY3Rpb24obmV4dCwgZGF0YSl7XG5cdFx0dmFyIG5hbWUgPSBkYXRhLm5hbWU7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGV4aXN0cyhlbGVtKXtcblx0XHRcdHJldHVybiBoYXNBdHRyaWIoZWxlbSwgbmFtZSkgJiYgbmV4dChlbGVtKTtcblx0XHR9O1xuXHR9LFxuXHRzdGFydDogZnVuY3Rpb24obmV4dCwgZGF0YSl7XG5cdFx0dmFyIG5hbWUgID0gZGF0YS5uYW1lLFxuXHRcdCAgICB2YWx1ZSA9IGRhdGEudmFsdWUsXG5cdFx0ICAgIGxlbiA9IHZhbHVlLmxlbmd0aDtcblxuXHRcdGlmKGxlbiA9PT0gMCl7XG5cdFx0XHRyZXR1cm4gZmFsc2VGdW5jO1xuXHRcdH1cblx0XHRcblx0XHRpZihkYXRhLmlnbm9yZUNhc2Upe1xuXHRcdFx0dmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gc3RhcnRJQyhlbGVtKXtcblx0XHRcdFx0dmFyIGF0dHIgPSBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKTtcblx0XHRcdFx0cmV0dXJuIGF0dHIgIT0gbnVsbCAmJiBhdHRyLnN1YnN0cigwLCBsZW4pLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBzdGFydChlbGVtKXtcblx0XHRcdHZhciBhdHRyID0gZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG5cdFx0XHRyZXR1cm4gYXR0ciAhPSBudWxsICYmIGF0dHIuc3Vic3RyKDAsIGxlbikgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0fTtcblx0fSxcblx0ZW5kOiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSAgPSBkYXRhLm5hbWUsXG5cdFx0ICAgIHZhbHVlID0gZGF0YS52YWx1ZSxcblx0XHQgICAgbGVuICAgPSAtdmFsdWUubGVuZ3RoO1xuXG5cdFx0aWYobGVuID09PSAwKXtcblx0XHRcdHJldHVybiBmYWxzZUZ1bmM7XG5cdFx0fVxuXG5cdFx0aWYoZGF0YS5pZ25vcmVDYXNlKXtcblx0XHRcdHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIGVuZElDKGVsZW0pe1xuXHRcdFx0XHR2YXIgYXR0ciA9IGdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuXHRcdFx0XHRyZXR1cm4gYXR0ciAhPSBudWxsICYmIGF0dHIuc3Vic3RyKGxlbikudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUgJiYgbmV4dChlbGVtKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIGVuZChlbGVtKXtcblx0XHRcdHZhciBhdHRyID0gZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG5cdFx0XHRyZXR1cm4gYXR0ciAhPSBudWxsICYmIGF0dHIuc3Vic3RyKGxlbikgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0fTtcblx0fSxcblx0YW55OiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSAgPSBkYXRhLm5hbWUsXG5cdFx0ICAgIHZhbHVlID0gZGF0YS52YWx1ZTtcblxuXHRcdGlmKHZhbHVlID09PSBcIlwiKXtcblx0XHRcdHJldHVybiBmYWxzZUZ1bmM7XG5cdFx0fVxuXG5cdFx0aWYoZGF0YS5pZ25vcmVDYXNlKXtcblx0XHRcdHZhciByZWdleCA9IG5ldyBSZWdFeHAodmFsdWUucmVwbGFjZShyZUNoYXJzLCBcIlxcXFwkJlwiKSwgXCJpXCIpO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gYW55SUMoZWxlbSl7XG5cdFx0XHRcdHZhciBhdHRyID0gZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG5cdFx0XHRcdHJldHVybiBhdHRyICE9IG51bGwgJiYgcmVnZXgudGVzdChhdHRyKSAmJiBuZXh0KGVsZW0pO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gYW55KGVsZW0pe1xuXHRcdFx0dmFyIGF0dHIgPSBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKTtcblx0XHRcdHJldHVybiBhdHRyICE9IG51bGwgJiYgYXR0ci5pbmRleE9mKHZhbHVlKSA+PSAwICYmIG5leHQoZWxlbSk7XG5cdFx0fTtcblx0fSxcblx0bm90OiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSAgPSBkYXRhLm5hbWUsXG5cdFx0ICAgIHZhbHVlID0gZGF0YS52YWx1ZTtcblxuXHRcdGlmKHZhbHVlID09PSBcIlwiKXtcblx0XHRcdHJldHVybiBmdW5jdGlvbiBub3RFbXB0eShlbGVtKXtcblx0XHRcdFx0cmV0dXJuICEhZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkgJiYgbmV4dChlbGVtKTtcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmKGRhdGEuaWdub3JlQ2FzZSl7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiBub3RJQyhlbGVtKXtcblx0XHRcdFx0dmFyIGF0dHIgPSBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKTtcblx0XHRcdFx0cmV0dXJuIGF0dHIgIT0gbnVsbCAmJiBhdHRyLnRvTG93ZXJDYXNlKCkgIT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiBmdW5jdGlvbiBub3QoZWxlbSl7XG5cdFx0XHRyZXR1cm4gZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkgIT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG5cdFx0fTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNvbXBpbGU6IGZ1bmN0aW9uKG5leHQsIGRhdGEsIG9wdGlvbnMpe1xuXHRcdGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3QgJiYgKFxuXHRcdFx0ZGF0YS5pZ25vcmVDYXNlIHx8IGRhdGEuYWN0aW9uID09PSBcIm5vdFwiXG5cdFx0KSkgdGhyb3cgU3ludGF4RXJyb3IoXCJVbnN1cHBvcnRlZCBhdHRyaWJ1dGUgc2VsZWN0b3JcIik7XG5cdFx0cmV0dXJuIGF0dHJpYnV0ZVJ1bGVzW2RhdGEuYWN0aW9uXShuZXh0LCBkYXRhKTtcblx0fSxcblx0cnVsZXM6IGF0dHJpYnV0ZVJ1bGVzXG59O1xuIl19