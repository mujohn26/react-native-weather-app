a091677bb81579f832de18c1d50bb3af
var isLaziable = require("./_isLaziable"),
    setData = require("./_setData"),
    setWrapToString = require("./_setWrapToString");

var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;

function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;
  bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
  }

  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
  var result = wrapFunc.apply(undefined, newData);

  if (isLaziable(func)) {
    setData(result, newData);
  }

  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

module.exports = createRecurry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9jcmVhdGVSZWN1cnJ5LmpzIl0sIm5hbWVzIjpbImlzTGF6aWFibGUiLCJyZXF1aXJlIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsIldSQVBfQklORF9GTEFHIiwiV1JBUF9CSU5EX0tFWV9GTEFHIiwiV1JBUF9DVVJSWV9CT1VORF9GTEFHIiwiV1JBUF9DVVJSWV9GTEFHIiwiV1JBUF9QQVJUSUFMX0ZMQUciLCJXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyIsImNyZWF0ZVJlY3VycnkiLCJmdW5jIiwiYml0bWFzayIsIndyYXBGdW5jIiwicGxhY2Vob2xkZXIiLCJ0aGlzQXJnIiwicGFydGlhbHMiLCJob2xkZXJzIiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0N1cnJ5IiwibmV3SG9sZGVycyIsInVuZGVmaW5lZCIsIm5ld0hvbGRlcnNSaWdodCIsIm5ld1BhcnRpYWxzIiwibmV3UGFydGlhbHNSaWdodCIsIm5ld0RhdGEiLCJyZXN1bHQiLCJhcHBseSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFVBQVUsR0FBR0MsT0FBTyxpQkFBeEI7QUFBQSxJQUNJQyxPQUFPLEdBQUdELE9BQU8sY0FEckI7QUFBQSxJQUVJRSxlQUFlLEdBQUdGLE9BQU8sc0JBRjdCOztBQUtBLElBQUlHLGNBQWMsR0FBRyxDQUFyQjtBQUFBLElBQ0lDLGtCQUFrQixHQUFHLENBRHpCO0FBQUEsSUFFSUMscUJBQXFCLEdBQUcsQ0FGNUI7QUFBQSxJQUdJQyxlQUFlLEdBQUcsQ0FIdEI7QUFBQSxJQUlJQyxpQkFBaUIsR0FBRyxFQUp4QjtBQUFBLElBS0lDLHVCQUF1QixHQUFHLEVBTDlCOztBQXdCQSxTQUFTQyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsT0FBN0IsRUFBc0NDLFFBQXRDLEVBQWdEQyxXQUFoRCxFQUE2REMsT0FBN0QsRUFBc0VDLFFBQXRFLEVBQWdGQyxPQUFoRixFQUF5RkMsTUFBekYsRUFBaUdDLEdBQWpHLEVBQXNHQyxLQUF0RyxFQUE2RztBQUMzRyxNQUFJQyxPQUFPLEdBQUdULE9BQU8sR0FBR0wsZUFBeEI7QUFBQSxNQUNJZSxVQUFVLEdBQUdELE9BQU8sR0FBR0osT0FBSCxHQUFhTSxTQURyQztBQUFBLE1BRUlDLGVBQWUsR0FBR0gsT0FBTyxHQUFHRSxTQUFILEdBQWVOLE9BRjVDO0FBQUEsTUFHSVEsV0FBVyxHQUFHSixPQUFPLEdBQUdMLFFBQUgsR0FBY08sU0FIdkM7QUFBQSxNQUlJRyxnQkFBZ0IsR0FBR0wsT0FBTyxHQUFHRSxTQUFILEdBQWVQLFFBSjdDO0FBTUFKLEVBQUFBLE9BQU8sSUFBS1MsT0FBTyxHQUFHYixpQkFBSCxHQUF1QkMsdUJBQTFDO0FBQ0FHLEVBQUFBLE9BQU8sSUFBSSxFQUFFUyxPQUFPLEdBQUdaLHVCQUFILEdBQTZCRCxpQkFBdEMsQ0FBWDs7QUFFQSxNQUFJLEVBQUVJLE9BQU8sR0FBR04scUJBQVosQ0FBSixFQUF3QztBQUN0Q00sSUFBQUEsT0FBTyxJQUFJLEVBQUVSLGNBQWMsR0FBR0Msa0JBQW5CLENBQVg7QUFDRDs7QUFDRCxNQUFJc0IsT0FBTyxHQUFHLENBQ1poQixJQURZLEVBQ05DLE9BRE0sRUFDR0csT0FESCxFQUNZVSxXQURaLEVBQ3lCSCxVQUR6QixFQUNxQ0ksZ0JBRHJDLEVBRVpGLGVBRlksRUFFS04sTUFGTCxFQUVhQyxHQUZiLEVBRWtCQyxLQUZsQixDQUFkO0FBS0EsTUFBSVEsTUFBTSxHQUFHZixRQUFRLENBQUNnQixLQUFULENBQWVOLFNBQWYsRUFBMEJJLE9BQTFCLENBQWI7O0FBQ0EsTUFBSTNCLFVBQVUsQ0FBQ1csSUFBRCxDQUFkLEVBQXNCO0FBQ3BCVCxJQUFBQSxPQUFPLENBQUMwQixNQUFELEVBQVNELE9BQVQsQ0FBUDtBQUNEOztBQUNEQyxFQUFBQSxNQUFNLENBQUNkLFdBQVAsR0FBcUJBLFdBQXJCO0FBQ0EsU0FBT1gsZUFBZSxDQUFDeUIsTUFBRCxFQUFTakIsSUFBVCxFQUFlQyxPQUFmLENBQXRCO0FBQ0Q7O0FBRURrQixNQUFNLENBQUNDLE9BQVAsR0FBaUJyQixhQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBpc0xhemlhYmxlID0gcmVxdWlyZSgnLi9faXNMYXppYWJsZScpLFxuICAgIHNldERhdGEgPSByZXF1aXJlKCcuL19zZXREYXRhJyksXG4gICAgc2V0V3JhcFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fc2V0V3JhcFRvU3RyaW5nJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xudmFyIFdSQVBfQklORF9GTEFHID0gMSxcbiAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgV1JBUF9DVVJSWV9GTEFHID0gOCxcbiAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgIFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHID0gNjQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBGdW5jIFRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGBmdW5jYCB3cmFwcGVyLlxuICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgdmFyIGlzQ3VycnkgPSBiaXRtYXNrICYgV1JBUF9DVVJSWV9GTEFHLFxuICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICBuZXdQYXJ0aWFscyA9IGlzQ3VycnkgPyBwYXJ0aWFscyA6IHVuZGVmaW5lZCxcbiAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICBiaXRtYXNrICY9IH4oaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHIDogV1JBUF9QQVJUSUFMX0ZMQUcpO1xuXG4gIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgfVxuICB2YXIgbmV3RGF0YSA9IFtcbiAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICBuZXdIb2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eVxuICBdO1xuXG4gIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICBpZiAoaXNMYXppYWJsZShmdW5jKSkge1xuICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgfVxuICByZXN1bHQucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZVJlY3Vycnk7XG4iXX0=