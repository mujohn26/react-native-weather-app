4efc3d4ac919cab2e47374a743d14ffd
'use strict';

var GetIntrinsic = require("../GetIntrinsic");

var $TypeError = GetIntrinsic('%TypeError%');

var isPropertyDescriptor = require("../helpers/isPropertyDescriptor");

var DefineOwnProperty = require("../helpers/DefineOwnProperty");

var FromPropertyDescriptor = require("./FromPropertyDescriptor");

var IsAccessorDescriptor = require("./IsAccessorDescriptor");

var IsDataDescriptor = require("./IsDataDescriptor");

var IsPropertyKey = require("./IsPropertyKey");

var SameValue = require("./SameValue");

var ToPropertyDescriptor = require("./ToPropertyDescriptor");

var Type = require("./Type");

module.exports = function DefinePropertyOrThrow(O, P, desc) {
  if (Type(O) !== 'Object') {
    throw new $TypeError('Assertion failed: Type(O) is not Object');
  }

  if (!IsPropertyKey(P)) {
    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
  }

  var Desc = isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, desc) ? desc : ToPropertyDescriptor(desc);

  if (!isPropertyDescriptor({
    Type: Type,
    IsDataDescriptor: IsDataDescriptor,
    IsAccessorDescriptor: IsAccessorDescriptor
  }, Desc)) {
    throw new $TypeError('Assertion failed: Desc is not a valid Property Descriptor');
  }

  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlZmluZVByb3BlcnR5T3JUaHJvdy5qcyJdLCJuYW1lcyI6WyJHZXRJbnRyaW5zaWMiLCJyZXF1aXJlIiwiJFR5cGVFcnJvciIsImlzUHJvcGVydHlEZXNjcmlwdG9yIiwiRGVmaW5lT3duUHJvcGVydHkiLCJGcm9tUHJvcGVydHlEZXNjcmlwdG9yIiwiSXNBY2Nlc3NvckRlc2NyaXB0b3IiLCJJc0RhdGFEZXNjcmlwdG9yIiwiSXNQcm9wZXJ0eUtleSIsIlNhbWVWYWx1ZSIsIlRvUHJvcGVydHlEZXNjcmlwdG9yIiwiVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJEZWZpbmVQcm9wZXJ0eU9yVGhyb3ciLCJPIiwiUCIsImRlc2MiLCJEZXNjIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLE9BQU8sbUJBQTFCOztBQUVBLElBQUlDLFVBQVUsR0FBR0YsWUFBWSxDQUFDLGFBQUQsQ0FBN0I7O0FBRUEsSUFBSUcsb0JBQW9CLEdBQUdGLE9BQU8sbUNBQWxDOztBQUNBLElBQUlHLGlCQUFpQixHQUFHSCxPQUFPLGdDQUEvQjs7QUFFQSxJQUFJSSxzQkFBc0IsR0FBR0osT0FBTyw0QkFBcEM7O0FBQ0EsSUFBSUssb0JBQW9CLEdBQUdMLE9BQU8sMEJBQWxDOztBQUNBLElBQUlNLGdCQUFnQixHQUFHTixPQUFPLHNCQUE5Qjs7QUFDQSxJQUFJTyxhQUFhLEdBQUdQLE9BQU8sbUJBQTNCOztBQUNBLElBQUlRLFNBQVMsR0FBR1IsT0FBTyxlQUF2Qjs7QUFDQSxJQUFJUyxvQkFBb0IsR0FBR1QsT0FBTywwQkFBbEM7O0FBQ0EsSUFBSVUsSUFBSSxHQUFHVixPQUFPLFVBQWxCOztBQUlBVyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MscUJBQVQsQ0FBK0JDLENBQS9CLEVBQWtDQyxDQUFsQyxFQUFxQ0MsSUFBckMsRUFBMkM7QUFDM0QsTUFBSU4sSUFBSSxDQUFDSSxDQUFELENBQUosS0FBWSxRQUFoQixFQUEwQjtBQUN6QixVQUFNLElBQUliLFVBQUosQ0FBZSx5Q0FBZixDQUFOO0FBQ0E7O0FBRUQsTUFBSSxDQUFDTSxhQUFhLENBQUNRLENBQUQsQ0FBbEIsRUFBdUI7QUFDdEIsVUFBTSxJQUFJZCxVQUFKLENBQWUsZ0RBQWYsQ0FBTjtBQUNBOztBQUVELE1BQUlnQixJQUFJLEdBQUdmLG9CQUFvQixDQUFDO0FBQy9CUSxJQUFBQSxJQUFJLEVBQUVBLElBRHlCO0FBRS9CSixJQUFBQSxnQkFBZ0IsRUFBRUEsZ0JBRmE7QUFHL0JELElBQUFBLG9CQUFvQixFQUFFQTtBQUhTLEdBQUQsRUFJNUJXLElBSjRCLENBQXBCLEdBSUFBLElBSkEsR0FJT1Asb0JBQW9CLENBQUNPLElBQUQsQ0FKdEM7O0FBS0EsTUFBSSxDQUFDZCxvQkFBb0IsQ0FBQztBQUN6QlEsSUFBQUEsSUFBSSxFQUFFQSxJQURtQjtBQUV6QkosSUFBQUEsZ0JBQWdCLEVBQUVBLGdCQUZPO0FBR3pCRCxJQUFBQSxvQkFBb0IsRUFBRUE7QUFIRyxHQUFELEVBSXRCWSxJQUpzQixDQUF6QixFQUlVO0FBQ1QsVUFBTSxJQUFJaEIsVUFBSixDQUFlLDJEQUFmLENBQU47QUFDQTs7QUFFRCxTQUFPRSxpQkFBaUIsQ0FDdkJHLGdCQUR1QixFQUV2QkUsU0FGdUIsRUFHdkJKLHNCQUh1QixFQUl2QlUsQ0FKdUIsRUFLdkJDLENBTHVCLEVBTXZCRSxJQU51QixDQUF4QjtBQVFBLENBOUJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgaXNQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgRGVmaW5lT3duUHJvcGVydHkgPSByZXF1aXJlKCcuLi9oZWxwZXJzL0RlZmluZU93blByb3BlcnR5Jyk7XG5cbnZhciBGcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgSXNBY2Nlc3NvckRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzQWNjZXNzb3JEZXNjcmlwdG9yJyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBTYW1lVmFsdWUgPSByZXF1aXJlKCcuL1NhbWVWYWx1ZScpO1xudmFyIFRvUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Ub1Byb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1kZWZpbmVwcm9wZXJ0eW9ydGhyb3dcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBEZWZpbmVQcm9wZXJ0eU9yVGhyb3coTywgUCwgZGVzYykge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cblx0dmFyIERlc2MgPSBpc1Byb3BlcnR5RGVzY3JpcHRvcih7XG5cdFx0VHlwZTogVHlwZSxcblx0XHRJc0RhdGFEZXNjcmlwdG9yOiBJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdElzQWNjZXNzb3JEZXNjcmlwdG9yOiBJc0FjY2Vzc29yRGVzY3JpcHRvclxuXHR9LCBkZXNjKSA/IGRlc2MgOiBUb1Byb3BlcnR5RGVzY3JpcHRvcihkZXNjKTtcblx0aWYgKCFpc1Byb3BlcnR5RGVzY3JpcHRvcih7XG5cdFx0VHlwZTogVHlwZSxcblx0XHRJc0RhdGFEZXNjcmlwdG9yOiBJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdElzQWNjZXNzb3JEZXNjcmlwdG9yOiBJc0FjY2Vzc29yRGVzY3JpcHRvclxuXHR9LCBEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBEZXNjIGlzIG5vdCBhIHZhbGlkIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdFNhbWVWYWx1ZSxcblx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdE8sXG5cdFx0UCxcblx0XHREZXNjXG5cdCk7XG59O1xuIl19