2af9d74e4e4001a9489602600a8edd27
module.exports = compile;

var BaseFuncs = require("boolbase"),
    trueFunc = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;

function compile(parsed) {
  var a = parsed[0],
      b = parsed[1] - 1;
  if (b < 0 && a <= 0) return falseFunc;
  if (a === -1) return function (pos) {
    return pos <= b;
  };
  if (a === 0) return function (pos) {
    return pos === b;
  };
  if (a === 1) return b < 0 ? trueFunc : function (pos) {
    return pos >= b;
  };
  var bMod = b % a;
  if (bMod < 0) bMod += a;

  if (a > 1) {
    return function (pos) {
      return pos >= b && pos % a === bMod;
    };
  }

  a *= -1;
  return function (pos) {
    return pos <= b && pos % a === bMod;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBpbGUuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbXBpbGUiLCJCYXNlRnVuY3MiLCJyZXF1aXJlIiwidHJ1ZUZ1bmMiLCJmYWxzZUZ1bmMiLCJwYXJzZWQiLCJhIiwiYiIsInBvcyIsImJNb2QiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLE9BQWpCOztBQUVBLElBQUlDLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdkI7QUFBQSxJQUNJQyxRQUFRLEdBQUlGLFNBQVMsQ0FBQ0UsUUFEMUI7QUFBQSxJQUVJQyxTQUFTLEdBQUdILFNBQVMsQ0FBQ0csU0FGMUI7O0FBUUEsU0FBU0osT0FBVCxDQUFpQkssTUFBakIsRUFBd0I7QUFDdkIsTUFBSUMsQ0FBQyxHQUFHRCxNQUFNLENBQUMsQ0FBRCxDQUFkO0FBQUEsTUFDSUUsQ0FBQyxHQUFHRixNQUFNLENBQUMsQ0FBRCxDQUFOLEdBQVksQ0FEcEI7QUFLQSxNQUFHRSxDQUFDLEdBQUcsQ0FBSixJQUFTRCxDQUFDLElBQUksQ0FBakIsRUFBb0IsT0FBT0YsU0FBUDtBQUdwQixNQUFHRSxDQUFDLEtBQUksQ0FBQyxDQUFULEVBQVksT0FBTyxVQUFTRSxHQUFULEVBQWE7QUFBRSxXQUFPQSxHQUFHLElBQUlELENBQWQ7QUFBa0IsR0FBeEM7QUFDWixNQUFHRCxDQUFDLEtBQUssQ0FBVCxFQUFZLE9BQU8sVUFBU0UsR0FBVCxFQUFhO0FBQUUsV0FBT0EsR0FBRyxLQUFLRCxDQUFmO0FBQW1CLEdBQXpDO0FBRVosTUFBR0QsQ0FBQyxLQUFLLENBQVQsRUFBWSxPQUFPQyxDQUFDLEdBQUcsQ0FBSixHQUFRSixRQUFSLEdBQW1CLFVBQVNLLEdBQVQsRUFBYTtBQUFFLFdBQU9BLEdBQUcsSUFBSUQsQ0FBZDtBQUFrQixHQUEzRDtBQUdaLE1BQUlFLElBQUksR0FBR0YsQ0FBQyxHQUFHRCxDQUFmO0FBQ0EsTUFBR0csSUFBSSxHQUFHLENBQVYsRUFBYUEsSUFBSSxJQUFJSCxDQUFSOztBQUViLE1BQUdBLENBQUMsR0FBRyxDQUFQLEVBQVM7QUFDUixXQUFPLFVBQVNFLEdBQVQsRUFBYTtBQUNuQixhQUFPQSxHQUFHLElBQUlELENBQVAsSUFBWUMsR0FBRyxHQUFHRixDQUFOLEtBQVlHLElBQS9CO0FBQ0EsS0FGRDtBQUdBOztBQUVESCxFQUFBQSxDQUFDLElBQUksQ0FBQyxDQUFOO0FBRUEsU0FBTyxVQUFTRSxHQUFULEVBQWE7QUFDbkIsV0FBT0EsR0FBRyxJQUFJRCxDQUFQLElBQVlDLEdBQUcsR0FBR0YsQ0FBTixLQUFZRyxJQUEvQjtBQUNBLEdBRkQ7QUFHQSIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gY29tcGlsZTtcblxudmFyIEJhc2VGdW5jcyA9IHJlcXVpcmUoXCJib29sYmFzZVwiKSxcbiAgICB0cnVlRnVuYyAgPSBCYXNlRnVuY3MudHJ1ZUZ1bmMsXG4gICAgZmFsc2VGdW5jID0gQmFzZUZ1bmNzLmZhbHNlRnVuYztcblxuLypcblx0cmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIGFuIGVsZW1lbnRzIGluZGV4IG1hdGNoZXMgdGhlIGdpdmVuIHJ1bGVcblx0aGlnaGx5IG9wdGltaXplZCB0byByZXR1cm4gdGhlIGZhc3Rlc3Qgc29sdXRpb25cbiovXG5mdW5jdGlvbiBjb21waWxlKHBhcnNlZCl7XG5cdHZhciBhID0gcGFyc2VkWzBdLFxuXHQgICAgYiA9IHBhcnNlZFsxXSAtIDE7XG5cblx0Ly93aGVuIGIgPD0gMCwgYSpuIHdvbid0IGJlIHBvc3NpYmxlIGZvciBhbnkgbWF0Y2hlcyB3aGVuIGEgPCAwXG5cdC8vYmVzaWRlcywgdGhlIHNwZWNpZmljYXRpb24gc2F5cyB0aGF0IG5vIGVsZW1lbnQgaXMgbWF0Y2hlZCB3aGVuIGEgYW5kIGIgYXJlIDBcblx0aWYoYiA8IDAgJiYgYSA8PSAwKSByZXR1cm4gZmFsc2VGdW5jO1xuXG5cdC8vd2hlbiBhIGlzIGluIHRoZSByYW5nZSAtMS4uMSwgaXQgbWF0Y2hlcyBhbnkgZWxlbWVudCAoc28gb25seSBiIGlzIGNoZWNrZWQpXG5cdGlmKGEgPT09LTEpIHJldHVybiBmdW5jdGlvbihwb3MpeyByZXR1cm4gcG9zIDw9IGI7IH07XG5cdGlmKGEgPT09IDApIHJldHVybiBmdW5jdGlvbihwb3MpeyByZXR1cm4gcG9zID09PSBiOyB9O1xuXHQvL3doZW4gYiA8PSAwIGFuZCBhID09PSAxLCB0aGV5IG1hdGNoIGFueSBlbGVtZW50XG5cdGlmKGEgPT09IDEpIHJldHVybiBiIDwgMCA/IHRydWVGdW5jIDogZnVuY3Rpb24ocG9zKXsgcmV0dXJuIHBvcyA+PSBiOyB9O1xuXG5cdC8vd2hlbiBhID4gMCwgbW9kdWxvIGNhbiBiZSB1c2VkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgbWF0Y2hcblx0dmFyIGJNb2QgPSBiICUgYTtcblx0aWYoYk1vZCA8IDApIGJNb2QgKz0gYTtcblxuXHRpZihhID4gMSl7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHBvcyl7XG5cdFx0XHRyZXR1cm4gcG9zID49IGIgJiYgcG9zICUgYSA9PT0gYk1vZDtcblx0XHR9O1xuXHR9XG5cblx0YSAqPSAtMTsgLy9tYWtlIGBhYCBwb3NpdGl2ZVxuXG5cdHJldHVybiBmdW5jdGlvbihwb3Mpe1xuXHRcdHJldHVybiBwb3MgPD0gYiAmJiBwb3MgJSBhID09PSBiTW9kO1xuXHR9O1xufSJdfQ==