2f25898639477e28221a8f842c488e68
'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;

if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
  try {
    badArrayLike = Object.defineProperty({}, 'length', {
      get: function get() {
        throw isCallableMarker;
      }
    });
    isCallableMarker = {};
    reflectApply(function () {
      throw 42;
    }, null, badArrayLike);
  } catch (_) {
    if (_ !== isCallableMarker) {
      reflectApply = null;
    }
  }
} else {
  reflectApply = null;
}

var constructorRegex = /^\s*class\b/;

var isES6ClassFn = function isES6ClassFunction(value) {
  try {
    var fnStr = fnToStr.call(value);
    return constructorRegex.test(fnStr);
  } catch (e) {
    return false;
  }
};

var tryFunctionObject = function tryFunctionToStr(value) {
  try {
    if (isES6ClassFn(value)) {
      return false;
    }

    fnToStr.call(value);
    return true;
  } catch (e) {
    return false;
  }
};

var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
module.exports = reflectApply ? function isCallable(value) {
  if (!value) {
    return false;
  }

  if (typeof value !== 'function' && typeof value !== 'object') {
    return false;
  }

  if (typeof value === 'function' && !value.prototype) {
    return true;
  }

  try {
    reflectApply(value, null, badArrayLike);
  } catch (e) {
    if (e !== isCallableMarker) {
      return false;
    }
  }

  return !isES6ClassFn(value);
} : function isCallable(value) {
  if (!value) {
    return false;
  }

  if (typeof value !== 'function' && typeof value !== 'object') {
    return false;
  }

  if (typeof value === 'function' && !value.prototype) {
    return true;
  }

  if (hasToStringTag) {
    return tryFunctionObject(value);
  }

  if (isES6ClassFn(value)) {
    return false;
  }

  var strClass = toStr.call(value);
  return strClass === fnClass || strClass === genClass;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImZuVG9TdHIiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwicmVmbGVjdEFwcGx5IiwiUmVmbGVjdCIsImFwcGx5IiwiYmFkQXJyYXlMaWtlIiwiaXNDYWxsYWJsZU1hcmtlciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiXyIsImNvbnN0cnVjdG9yUmVnZXgiLCJpc0VTNkNsYXNzRm4iLCJpc0VTNkNsYXNzRnVuY3Rpb24iLCJ2YWx1ZSIsImZuU3RyIiwiY2FsbCIsInRlc3QiLCJlIiwidHJ5RnVuY3Rpb25PYmplY3QiLCJ0cnlGdW5jdGlvblRvU3RyIiwidG9TdHIiLCJmbkNsYXNzIiwiZ2VuQ2xhc3MiLCJoYXNUb1N0cmluZ1RhZyIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzQ2FsbGFibGUiLCJzdHJDbGFzcyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsT0FBTyxHQUFHQyxRQUFRLENBQUNDLFNBQVQsQ0FBbUJDLFFBQWpDO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLE9BQU9DLE9BQVAsS0FBbUIsUUFBbkIsSUFBK0JBLE9BQU8sS0FBSyxJQUEzQyxJQUFtREEsT0FBTyxDQUFDQyxLQUE5RTtBQUNBLElBQUlDLFlBQUo7QUFDQSxJQUFJQyxnQkFBSjs7QUFDQSxJQUFJLE9BQU9KLFlBQVAsS0FBd0IsVUFBeEIsSUFBc0MsT0FBT0ssTUFBTSxDQUFDQyxjQUFkLEtBQWlDLFVBQTNFLEVBQXVGO0FBQ3RGLE1BQUk7QUFDSEgsSUFBQUEsWUFBWSxHQUFHRSxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsRUFBdEIsRUFBMEIsUUFBMUIsRUFBb0M7QUFDbERDLE1BQUFBLEdBQUcsRUFBRSxlQUFZO0FBQ2hCLGNBQU1ILGdCQUFOO0FBQ0E7QUFIaUQsS0FBcEMsQ0FBZjtBQUtBQSxJQUFBQSxnQkFBZ0IsR0FBRyxFQUFuQjtBQUVBSixJQUFBQSxZQUFZ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UDtBQUFlOztBQUMxQyxNQUFJZ0IsUUFBUSxHQUFHVCxLQUFLLENBQUNMLElBQU4sQ0FBV0YsS0FBWCxDQUFmO0FBQ0EsU0FBT2dCLFFBQVEsS0FBS1IsT0FBYixJQUF3QlEsUUFBUSxLQUFLUCxRQUE1QztBQUNBLENBcEJGIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWZsZWN0QXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdCAhPT0gbnVsbCAmJiBSZWZsZWN0LmFwcGx5O1xudmFyIGJhZEFycmF5TGlrZTtcbnZhciBpc0NhbGxhYmxlTWFya2VyO1xuaWYgKHR5cGVvZiByZWZsZWN0QXBwbHkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHR0cnkge1xuXHRcdGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2xlbmd0aCcsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBpc0NhbGxhYmxlTWFya2VyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlzQ2FsbGFibGVNYXJrZXIgPSB7fTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuXHRcdHJlZmxlY3RBcHBseShmdW5jdGlvbiAoKSB7IHRocm93IDQyOyB9LCBudWxsLCBiYWRBcnJheUxpa2UpO1xuXHR9IGNhdGNoIChfKSB7XG5cdFx0aWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcblx0XHRcdHJlZmxlY3RBcHBseSA9IG51bGw7XG5cdFx0fVxuXHR9XG59IGVsc2Uge1xuXHRyZWZsZWN0QXBwbHkgPSBudWxsO1xufVxuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSByZWZsZWN0QXBwbHlcblx0PyBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJlZmxlY3RBcHBseSh2YWx1ZSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoZSAhPT0gaXNDYWxsYWJsZU1hcmtlcikgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR9XG5cdFx0cmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpO1xuXHR9XG5cdDogZnVuY3Rpb24gaXNDYWxsYWJsZSh2YWx1ZSkge1xuXHRcdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIXZhbHVlLnByb3RvdHlwZSkgeyByZXR1cm4gdHJ1ZTsgfVxuXHRcdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dmFyIHN0ckNsYXNzID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcblx0fTtcbiJdfQ==