65993123e0187c8dea9eceeba931abd6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isProtectedDayOfYearToken = isProtectedDayOfYearToken;
exports.isProtectedWeekYearToken = isProtectedWeekYearToken;
exports.throwProtectedError = throwProtectedError;
var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];

function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}

function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}

function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsInRva2VuIiwiaW5kZXhPZiIsImZvcm1hdCIsImlucHV0IiwiUmFuZ2VFcnJvciIsImNvbmNhdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLHlCQUFSLEdBQW9DQSx5QkFBcEM7QUFDQUYsT0FBTyxDQUFDRyx3QkFBUixHQUFtQ0Esd0JBQW5DO0FBQ0FILE9BQU8sQ0FBQ0ksbUJBQVIsR0FBOEJBLG1CQUE5QjtBQUNBLElBQUlDLHdCQUF3QixHQUFHLENBQUMsR0FBRCxFQUFNLElBQU4sQ0FBL0I7QUFDQSxJQUFJQyx1QkFBdUIsR0FBRyxDQUFDLElBQUQsRUFBTyxNQUFQLENBQTlCOztBQUVBLFNBQVNKLHlCQUFULENBQW1DSyxLQUFuQyxFQUEwQztBQUN4QyxTQUFPRix3QkFBd0IsQ0FBQ0csT0FBekIsQ0FBaUNELEtBQWpDLE1BQTRDLENBQUMsQ0FBcEQ7QUFDRDs7QUFFRCxTQUFTSix3QkFBVCxDQUFrQ0ksS0FBbEMsRUFBeUM7QUFDdkMsU0FBT0QsdUJBQXVCLENBQUNFLE9BQXhCLENBQWdDRCxLQUFoQyxNQUEyQyxDQUFDLENBQW5EO0FBQ0Q7O0FBRUQsU0FBU0gsbUJBQVQsQ0FBNkJHLEtBQTdCLEVBQW9DRSxNQUFwQyxFQUE0Q0MsS0FBNUMsRUFBbUQ7QUFDakQsTUFBSUgsS0FBSyxLQUFLLE1BQWQsRUFBc0I7QUFDcEIsVUFBTSxJQUFJSSxVQUFKLENBQWUscUNBQXFDQyxNQUFyQyxDQUE0Q0gsTUFBNUMsRUFBb0Qsd0NBQXBELEVBQThGRyxNQUE5RixDQUFxR0YsS0FBckcsRUFBNEcsOEJBQTVHLENBQWYsQ0FBTjtBQUNELEdBRkQsTUFFTyxJQUFJSCxLQUFLLEtBQUssSUFBZCxFQUFvQjtBQUN6QixVQUFNLElBQUlJLFVBQUosQ0FBZSxpQ0FBaUNDLE1BQWpDLENBQXdDSCxNQUF4QyxFQUFnRCx3Q0FBaEQsRUFBMEZHLE1BQTFGLENBQWlHRixLQUFqRyxFQUF3Ryw4QkFBeEcsQ0FBZixDQUFOO0FBQ0QsR0FGTSxNQUVBLElBQUlILEtBQUssS0FBSyxHQUFkLEVBQW1CO0FBQ3hCLFVBQU0sSUFBSUksVUFBSixDQUFlLCtCQUErQkMsTUFBL0IsQ0FBc0NILE1BQXRDLEVBQThDLG9EQUE5QyxFQUFvR0csTUFBcEcsQ0FBMkdGLEtBQTNHLEVBQWtILDhCQUFsSCxDQUFmLENBQU47QUFDRCxHQUZNLE1BRUEsSUFBSUgsS0FBSyxLQUFLLElBQWQsRUFBb0I7QUFDekIsVUFBTSxJQUFJSSxVQUFKLENBQWUsaUNBQWlDQyxNQUFqQyxDQUF3Q0gsTUFBeEMsRUFBZ0Qsb0RBQWhELEVBQXNHRyxNQUF0RyxDQUE2R0YsS0FBN0csRUFBb0gsOEJBQXBILENBQWYsQ0FBTjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiA9IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW47XG5leHBvcnRzLmlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiA9IGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbjtcbmV4cG9ydHMudGhyb3dQcm90ZWN0ZWRFcnJvciA9IHRocm93UHJvdGVjdGVkRXJyb3I7XG52YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcblxuZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSJdfQ==