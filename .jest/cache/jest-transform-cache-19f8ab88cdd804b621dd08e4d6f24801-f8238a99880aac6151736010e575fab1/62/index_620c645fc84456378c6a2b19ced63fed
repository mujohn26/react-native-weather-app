6af0a5d6acf167814fe81b7058f19e72
'use strict';

var keys = require('object-keys');

var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function isFunction(fn) {
  return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function arePropertyDescriptorsSupported() {
  var obj = {};

  try {
    origDefineProperty(obj, 'x', {
      enumerable: false,
      value: obj
    });

    for (var _ in obj) {
      return false;
    }

    return obj.x === obj;
  } catch (e) {
    return false;
  }
};

var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function defineProperty(object, name, value, predicate) {
  if (name in object && (!isFunction(predicate) || !predicate())) {
    return;
  }

  if (supportsDescriptors) {
    origDefineProperty(object, name, {
      configurable: true,
      enumerable: false,
      value: value,
      writable: true
    });
  } else {
    object[name] = value;
  }
};

var defineProperties = function defineProperties(object, map) {
  var predicates = arguments.length > 2 ? arguments[2] : {};
  var props = keys(map);

  if (hasSymbols) {
    props = concat.call(props, Object.getOwnPropertySymbols(map));
  }

  for (var i = 0; i < props.length; i += 1) {
    defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
  }
};

defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImtleXMiLCJyZXF1aXJlIiwiaGFzU3ltYm9scyIsIlN5bWJvbCIsInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjb25jYXQiLCJBcnJheSIsIm9yaWdEZWZpbmVQcm9wZXJ0eSIsImRlZmluZVByb3BlcnR5IiwiaXNGdW5jdGlvbiIsImZuIiwiY2FsbCIsImFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQiLCJvYmoiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJfIiwieCIsImUiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwib2JqZWN0IiwibmFtZSIsInByZWRpY2F0ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsIm1hcCIsInByZWRpY2F0ZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQWxCOztBQUNBLElBQUlDLFVBQVUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDLE9BQU9BLE1BQU0sQ0FBQyxLQUFELENBQWIsS0FBeUIsUUFBMUU7QUFFQSxJQUFJQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQkMsUUFBN0I7QUFDQSxJQUFJQyxNQUFNLEdBQUdDLEtBQUssQ0FBQ0gsU0FBTixDQUFnQkUsTUFBN0I7QUFDQSxJQUFJRSxrQkFBa0IsR0FBR0wsTUFBTSxDQUFDTSxjQUFoQzs7QUFFQSxJQUFJQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFVQyxFQUFWLEVBQWM7QUFDOUIsU0FBTyxPQUFPQSxFQUFQLEtBQWMsVUFBZCxJQUE0QlQsS0FBSyxDQUFDVSxJQUFOLENBQVdELEVBQVgsTUFBbUIsbUJBQXREO0FBQ0EsQ0FGRDs7QUFJQSxJQUFJRSwrQkFBK0IsR0FBRyxTQUFsQ0EsK0JBQWtDLEdBQVk7QUFDakQsTUFBSUMsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsTUFBSTtBQUNITixJQUFBQSxrQkFBa0IsQ0FBQ00sR0FBRCxFQUFNLEdBQU4sRUFBVztBQUFFQyxNQUFBQSxVQUFVLEVBQUUsS0FBZDtBQUFxQkMsTUFBQUEsS0FBSyxFQUFFRjtBQUE1QixLQUFYLENBQWxCOztBQUVBLFNBQUssSUFBSUcsQ0FBVCxJQUFjSCxHQUFkLEVBQW1CO0FBQ2xCLGFBQU8sS0FBUDtBQUNBOztBQUNELFdBQU9BLEdBQUcsQ0FBQ0ksQ0FBSixLQUFVSixHQUFqQjtBQUNBLEdBUEQsQ0FPRSxPQUFPSyxDQUFQLEVBQVU7QUFDWCxXQUFPLEtBQVA7QUFDQTtBQUNELENBWkQ7O0FBYUEsSUFBSUMsbUJBQW1CLEdBQUdaLGtCQUFrQixJQUFJSywrQkFBK0IsRUFBL0U7O0FBRUEsSUFBSUosY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFVWSxNQUFWLEVBQWtCQyxJQUFsQixFQUF3Qk4sS0FBeEIsRUFBK0JPLFNBQS9CLEVBQTBDO0FBQzlELE1BQUlELElBQUksSUFBSUQsTUFBUixLQUFtQixDQUFDWCxVQUFVLENBQUNhLFNBQUQsQ0FBWCxJQUEwQixDQUFDQSxTQUFTLEVBQXZELENBQUosRUFBZ0U7QUFDL0Q7QUFDQTs7QUFDRCxNQUFJSCxtQkFBSixFQUF5QjtBQUN4QlosSUFBQUEsa0JBQWtCLENBQUNhLE1BQUQsRUFBU0MsSUFBVCxFQUFlO0FBQ2hDRSxNQUFBQSxZQUFZLEVBQUUsSUFEa0I7QUFFaENULE1BQUFBLFVBQVUsRUFBRSxLQUZvQjtBQUdoQ0MsTUFBQUEsS0FBSyxFQUFFQSxLQUh5QjtBQUloQ1MsTUFBQUEsUUFBUSxFQUFFO0FBSnNCLEtBQWYsQ0FBbEI7QUFNQSxHQVBELE1BT087QUFDTkosSUFBQUEsTUFBTSxDQUFDQyxJQUFELENBQU4sR0FBZU4sS0FBZjtBQUNBO0FBQ0QsQ0FkRDs7QUFnQkEsSUFBSVUsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFVTCxNQUFWLEVBQWtCTSxHQUFsQixFQUF1QjtBQUM3QyxNQUFJQyxVQUFVLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUFuQixHQUF1QkQsU0FBUyxDQUFDLENBQUQsQ0FBaEMsR0FBc0MsRUFBdkQ7QUFDQSxNQUFJRSxLQUFLLEdBQUdqQyxJQUFJLENBQUM2QixHQUFELENBQWhCOztBQUNBLE1BQUkzQixVQUFKLEVBQWdCO0FBQ2YrQixJQUFBQSxLQUFLLEdBQUd6QixNQUFNLENBQUNNLElBQVAsQ0FBWW1CLEtBQVosRUFBbUI1QixNQUFNLENBQUM2QixxQkFBUCxDQUE2QkwsR0FBN0IsQ0FBbkIsQ0FBUjtBQUNBOztBQUNELE9BQUssSUFBSU0sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsS0FBSyxDQUFDRCxNQUExQixFQUFrQ0csQ0FBQyxJQUFJLENBQXZDLEVBQTBDO0FBQ3pDeEIsSUFBQUEsY0FBYyxDQUFDWSxNQUFELEVBQVNVLEtBQUssQ0FBQ0UsQ0FBRCxDQUFkLEVBQW1CTixHQUFHLENBQUNJLEtBQUssQ0FBQ0UsQ0FBRCxDQUFOLENBQXRCLEVBQWtDTCxVQUFVLENBQUNHLEtBQUssQ0FBQ0UsQ0FBRCxDQUFOLENBQTVDLENBQWQ7QUFDQTtBQUNELENBVEQ7O0FBV0FQLGdCQUFnQixDQUFDTixtQkFBakIsR0FBdUMsQ0FBQyxDQUFDQSxtQkFBekM7QUFFQWMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVCxnQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sKCdmb28nKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciBvcmlnRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG5cdFx0Zm9yICh2YXIgXyBpbiBvYmopIHsgLy8ganNjczppZ25vcmUgZGlzYWxsb3dVbnVzZWRWYXJpYWJsZXNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIG9iai54ID09PSBvYmo7XG5cdH0gY2F0Y2ggKGUpIHsgLyogdGhpcyBpcyBJRSA4LiAqL1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gb3JpZ0RlZmluZVByb3BlcnR5ICYmIGFyZVByb3BlcnR5RGVzY3JpcHRvcnNTdXBwb3J0ZWQoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QgJiYgKCFpc0Z1bmN0aW9uKHByZWRpY2F0ZSkgfHwgIXByZWRpY2F0ZSgpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAoc3VwcG9ydHNEZXNjcmlwdG9ycykge1xuXHRcdG9yaWdEZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0d3JpdGFibGU6IHRydWVcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRvYmplY3RbbmFtZV0gPSB2YWx1ZTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiJdfQ==