{"version":3,"sources":["_baseClone.js"],"names":["Stack","require","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isArray","isBuffer","isMap","isObject","isSet","keys","keysIn","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","argsTag","arrayTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","objectTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","baseClone","value","bitmask","customizer","key","object","stack","result","isDeep","isFlat","isFull","undefined","isArr","tag","isFunc","stacked","get","set","forEach","subValue","add","keysFunc","props","module","exports"],"mappings":"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","sourcesContent":["var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n"]}