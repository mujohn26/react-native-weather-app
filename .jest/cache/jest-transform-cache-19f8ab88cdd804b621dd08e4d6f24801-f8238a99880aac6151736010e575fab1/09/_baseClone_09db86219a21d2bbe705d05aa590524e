345a8483b279ad8595532551f30bf10b
var Stack = require("./_Stack"),
    arrayEach = require("./_arrayEach"),
    assignValue = require("./_assignValue"),
    baseAssign = require("./_baseAssign"),
    baseAssignIn = require("./_baseAssignIn"),
    cloneBuffer = require("./_cloneBuffer"),
    copyArray = require("./_copyArray"),
    copySymbols = require("./_copySymbols"),
    copySymbolsIn = require("./_copySymbolsIn"),
    getAllKeys = require("./_getAllKeys"),
    getAllKeysIn = require("./_getAllKeysIn"),
    getTag = require("./_getTag"),
    initCloneArray = require("./_initCloneArray"),
    initCloneByTag = require("./_initCloneByTag"),
    initCloneObject = require("./_initCloneObject"),
    isArray = require("./isArray"),
    isBuffer = require("./isBuffer"),
    isMap = require("./isMap"),
    isObject = require("./isObject"),
    isSet = require("./isSet"),
    keys = require("./keys"),
    keysIn = require("./keysIn");

var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }

  if (result !== undefined) {
    return result;
  }

  if (!isObject(value)) {
    return value;
  }

  var isArr = isArray(value);

  if (isArr) {
    result = initCloneArray(value);

    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }

    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);

      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }

      result = initCloneByTag(value, tag, isDeep);
    }
  }

  stack || (stack = new Stack());
  var stacked = stack.get(value);

  if (stacked) {
    return stacked;
  }

  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }

    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9iYXNlQ2xvbmUuanMiXSwibmFtZXMiOlsiU3RhY2siLCJyZXF1aXJlIiwiYXJyYXlFYWNoIiwiYXNzaWduVmFsdWUiLCJiYXNlQXNzaWduIiwiYmFzZUFzc2lnbkluIiwiY2xvbmVCdWZmZXIiLCJjb3B5QXJyYXkiLCJjb3B5U3ltYm9scyIsImNvcHlTeW1ib2xzSW4iLCJnZXRBbGxLZXlzIiwiZ2V0QWxsS2V5c0luIiwiZ2V0VGFnIiwiaW5pdENsb25lQXJyYXkiLCJpbml0Q2xvbmVCeVRhZyIsImluaXRDbG9uZU9iamVjdCIsImlzQXJyYXkiLCJpc0J1ZmZlciIsImlzTWFwIiwiaXNPYmplY3QiLCJpc1NldCIsImtleXMiLCJrZXlzSW4iLCJDTE9ORV9ERUVQX0ZMQUciLCJDTE9ORV9GTEFUX0ZMQUciLCJDTE9ORV9TWU1CT0xTX0ZMQUciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsInZhbHVlIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJrZXkiLCJvYmplY3QiLCJzdGFjayIsInJlc3VsdCIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsInVuZGVmaW5lZCIsImlzQXJyIiwidGFnIiwiaXNGdW5jIiwic3RhY2tlZCIsImdldCIsInNldCIsImZvckVhY2giLCJzdWJWYWx1ZSIsImFkZCIsImtleXNG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RUFBcUNILEtBQXJDLEVBQTRDSyxLQUE1QyxDQUF6QjtBQUNELEtBRkQ7QUFHRDs7QUFFRCxNQUFJZSxRQUFRLEdBQUdYLE1BQU0sR0FDaEJELE1BQU0sR0FBR25ELFlBQUgsR0FBa0JELFVBRFIsR0FFaEJvRCxNQUFNLEdBQUd4QyxNQUFILEdBQVlELElBRnZCO0FBSUEsTUFBSXNELEtBQUssR0FBR1YsS0FBSyxHQUFHRCxTQUFILEdBQWVVLFFBQVEsQ0FBQ3BCLEtBQUQsQ0FBeEM7QUFDQXBELEVBQUFBLFNBQVMsQ0FBQ3lFLEtBQUssSUFBSXJCLEtBQVYsRUFBaUIsVUFBU2tCLFFBQVQsRUFBbUJmLEdBQW5CLEVBQXdCO0FBQ2hELFFBQUlrQixLQUFKLEVBQVc7QUFDVGxCLE1BQUFBLEdBQUcsR0FBR2UsUUFBTjtBQUNBQSxNQUFBQSxRQUFRLEdBQUdsQixLQUFLLENBQUNHLEdBQUQsQ0FBaEI7QUFDRDs7QUFFRHRELElBQUFBLFdBQVcsQ0FBQ3lELE1BQUQsRUFBU0gsR0FBVCxFQUFjSixTQUFTLENBQUNtQixRQUFELEVBQVdqQixPQUFYLEVBQW9CQyxVQUFwQixFQUFnQ0MsR0FBaEMsRUFBcUNILEtBQXJDLEVBQTRDSyxLQUE1QyxDQUF2QixDQUFYO0FBQ0QsR0FQUSxDQUFUO0FBUUEsU0FBT0MsTUFBUDtBQUNEOztBQUVEZ0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsU0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFycmF5RWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5RWFjaCcpLFxuICAgIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbicpLFxuICAgIGJhc2VBc3NpZ25JbiA9IHJlcXVpcmUoJy4vX2Jhc2VBc3NpZ25JbicpLFxuICAgIGNsb25lQnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVCdWZmZXInKSxcbiAgICBjb3B5QXJyYXkgPSByZXF1aXJlKCcuL19jb3B5QXJyYXknKSxcbiAgICBjb3B5U3ltYm9scyA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzJyksXG4gICAgY29weVN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2NvcHlTeW1ib2xzSW4nKSxcbiAgICBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpLFxuICAgIGdldEFsbEtleXNJbiA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXNJbicpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGluaXRDbG9uZUFycmF5ID0gcmVxdWlyZSgnLi9faW5pdENsb25lQXJyYXknKSxcbiAgICBpbml0Q2xvbmVCeVRhZyA9IHJlcXVpcmUoJy4vX2luaXRDbG9uZUJ5VGFnJyksXG4gICAgaW5pdENsb25lT2JqZWN0ID0gcmVxdWlyZSgnLi9faW5pdENsb25lT2JqZWN0JyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzTWFwID0gcmVxdWlyZSgnLi9pc01hcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU2V0ID0gcmVxdWlyZSgnLi9pc1NldCcpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ2xvbmU7XG4iXX0=