961d1b74b4bc1804223cace1d7d8e319
'use strict';

var DOCUMENT_MODE = require("../common/html").DOCUMENT_MODE;

exports.createDocument = function () {
  return {
    nodeName: '#document',
    mode: DOCUMENT_MODE.NO_QUIRKS,
    childNodes: []
  };
};

exports.createDocumentFragment = function () {
  return {
    nodeName: '#document-fragment',
    childNodes: []
  };
};

exports.createElement = function (tagName, namespaceURI, attrs) {
  return {
    nodeName: tagName,
    tagName: tagName,
    attrs: attrs,
    namespaceURI: namespaceURI,
    childNodes: [],
    parentNode: null
  };
};

exports.createCommentNode = function (data) {
  return {
    nodeName: '#comment',
    data: data,
    parentNode: null
  };
};

var createTextNode = function createTextNode(value) {
  return {
    nodeName: '#text',
    value: value,
    parentNode: null
  };
};

var appendChild = exports.appendChild = function (parentNode, newNode) {
  parentNode.childNodes.push(newNode);
  newNode.parentNode = parentNode;
};

var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
  var insertionIdx = parentNode.childNodes.indexOf(referenceNode);
  parentNode.childNodes.splice(insertionIdx, 0, newNode);
  newNode.parentNode = parentNode;
};

exports.setTemplateContent = function (templateElement, contentElement) {
  templateElement.content = contentElement;
};

exports.getTemplateContent = function (templateElement) {
  return templateElement.content;
};

exports.setDocumentType = function (document, name, publicId, systemId) {
  var doctypeNode = null;

  for (var i = 0; i < document.childNodes.length; i++) {
    if (document.childNodes[i].nodeName === '#documentType') {
      doctypeNode = document.childNodes[i];
      break;
    }
  }

  if (doctypeNode) {
    doctypeNode.name = name;
    doctypeNode.publicId = publicId;
    doctypeNode.systemId = systemId;
  } else {
    appendChild(document, {
      nodeName: '#documentType',
      name: name,
      publicId: publicId,
      systemId: systemId
    });
  }
};

exports.setDocumentMode = function (document, mode) {
  document.mode = mode;
};

exports.getDocumentMode = function (document) {
  return document.mode;
};

exports.detachNode = function (node) {
  if (node.parentNode) {
    var idx = node.parentNode.childNodes.indexOf(node);
    node.parentNode.childNodes.splice(idx, 1);
    node.parentNode = null;
  }
};

exports.insertText = function (parentNode, text) {
  if (parentNode.childNodes.length) {
    var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

    if (prevNode.nodeName === '#text') {
      prevNode.value += text;
      return;
    }
  }

  appendChild(parentNode, createTextNode(text));
};

exports.insertTextBefore = function (parentNode, text, referenceNode) {
  var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
  if (prevNode && prevNode.nodeName === '#text') prevNode.value += text;else insertBefore(parentNode, createTextNode(text), referenceNode);
};

exports.adoptAttributes = function (recipient, attrs) {
  var recipientAttrsMap = [];

  for (var i = 0; i < recipient.attrs.length; i++) {
    recipientAttrsMap.push(recipient.attrs[i].name);
  }

  for (var j = 0; j < attrs.length; j++) {
    if (recipientAttrsMap.indexOf(attrs[j].name) === -1) recipient.attrs.push(attrs[j]);
  }
};

exports.getFirstChild = function (node) {
  return node.childNodes[0];
};

exports.getChildNodes = function (node) {
  return node.childNodes;
};

exports.getParentNode = function (node) {
  return node.parentNode;
};

exports.getAttrList = function (element) {
  return element.attrs;
};

exports.getTagName = function (element) {
  return element.tagName;
};

exports.getNamespaceURI = function (element) {
  return element.namespaceURI;
};

exports.getTextNodeContent = function (textNode) {
  return textNode.value;
};

exports.getCommentNodeContent = function (commentNode) {
  return commentNode.data;
};

exports.getDocumentTypeNodeName = function (doctypeNode) {
  return doctypeNode.name;
};

exports.getDocumentTypeNodePublicId = function (doctypeNode) {
  return doctypeNode.publicId;
};

exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
  return doctypeNode.systemId;
};

exports.isTextNode = function (node) {
  return node.nodeName === '#text';
};

exports.isCommentNode = function (node) {
  return node.nodeName === '#comment';
};

exports.isDocumentTypeNode = function (node) {
  return node.nodeName === '#documentType';
};

exports.isElementNode = function (node) {
  return !!node.tagName;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHQuanMiXSwibmFtZXMiOlsiRE9DVU1FTlRfTU9ERSIsInJlcXVpcmUiLCJleHBvcnRzIiwiY3JlYXRlRG9jdW1lbnQiLCJub2RlTmFtZSIsIm1vZGUiLCJOT19RVUlSS1MiLCJjaGlsZE5vZGVzIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0YWdOYW1lIiwibmFtZXNwYWNlVVJJIiwiYXR0cnMiLCJwYXJlbnROb2RlIiwiY3JlYXRlQ29tbWVudE5vZGUiLCJkYXRhIiwiY3JlYXRlVGV4dE5vZGUiLCJ2YWx1ZSIsImFwcGVuZENoaWxkIiwibmV3Tm9kZSIsInB1c2giLCJpbnNlcnRCZWZvcmUiLCJyZWZlcmVuY2VOb2RlIiwiaW5zZXJ0aW9uSWR4IiwiaW5kZXhPZiIsInNwbGljZSIsInNldFRlbXBsYXRlQ29udGVudCIsInRlbXBsYXRlRWxlbWVudCIsImNvbnRlbnRFbGVtZW50IiwiY29udGVudCIsImdldFRlbXBsYXRlQ29udGVudCIsInNldERvY3VtZW50VHlwZSIsImRvY3VtZW50IiwibmFtZSIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJkb2N0eXBlTm9kZSIsImkiLCJsZW5ndGgiLCJzZXREb2N1bWVudE1vZGUiLCJnZXREb2N1bWVudE1vZGUiLCJkZXRhY2hOb2RlIiwibm9kZSIsImlkeCIsImluc2VydFRleHQiLCJ0ZXh0IiwicHJldk5vZGUiLCJpbnNlcnRUZXh0QmVmb3JlIiwiYWRvcHRBdHRyaWJ1dGVzIiwicmVjaXBpZW50IiwicmVjaXBpZW50QXR0cnNNYXAiLCJqIiwiZ2V0Rmlyc3RDaGlsZCIsImdldENoaWxkTm9kZXMiLCJnZXRQYXJlbnROb2RlIiwiZ2V0QXR0ckxpc3QiLCJlbGVtZW50IiwiZ2V0VGFnTmFtZSIsImdldE5hbWVzcGFjZVVSSSIsImdldFRleHROb2RlQ29udGVudCIsInRleHROb2RlIiwiZ2V0Q29tbWVudE5vZGVDb250ZW50IiwiY29tbWVudE5vZGUiLCJnZXREb2N1bWVudFR5cGVOb2RlTmFtZSIsImdldERvY3VtZW50VHlwZU5vZGVQdWJsaWNJZCIsImdldERvY3VtZW50VHlwZU5vZGVTeXN0ZW1JZCIsImlzVGV4dE5vZGUiLCJpc0NvbW1lbnROb2RlIiwiaXNEb2N1bWVudFR5cGVOb2RlIiwiaXNFbGVtZW50Tm9kZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsYUFBYSxHQUFHQyxPQUFPLGtCQUFQLENBQTBCRCxhQUE5Qzs7QUFHQUUsT0FBTyxDQUFDQyxjQUFSLEdBQXlCLFlBQVk7QUFDakMsU0FBTztBQUNIQyxJQUFBQSxRQUFRLEVBQUUsV0FEUDtBQUVIQyxJQUFBQSxJQUFJLEVBQUVMLGFBQWEsQ0FBQ00sU0FGakI7QUFHSEMsSUFBQUEsVUFBVSxFQUFFO0FBSFQsR0FBUDtBQUtILENBTkQ7O0FBUUFMLE9BQU8sQ0FBQ00sc0JBQVIsR0FBaUMsWUFBWTtBQUN6QyxTQUFPO0FBQ0hKLElBQUFBLFFBQVEsRUFBRSxvQkFEUDtBQUVIRyxJQUFBQSxVQUFVLEVBQUU7QUFGVCxHQUFQO0FBSUgsQ0FMRDs7QUFPQUwsT0FBTyxDQUFDTyxhQUFSLEdBQXdCLFVBQVVDLE9BQVYsRUFBbUJDLFlBQW5CLEVBQWlDQyxLQUFqQyxFQUF3QztBQUM1RCxTQUFPO0FBQ0hSLElBQUFBLFFBQVEsRUFBRU0sT0FEUDtBQUVIQSxJQUFBQSxPQUFPLEVBQUVBLE9BRk47QUFHSEUsSUFBQUEsS0FBSyxFQUFFQSxLQUhKO0FBSUhELElBQUFBLFlBQVksRUFBRUEsWUFKWDtBQUtISixJQUFBQSxVQUFVLEVBQUUsRUFMVDtBQU1ITSxJQUFBQSxVQUFVLEVBQUU7QUFOVCxHQUFQO0FBUUgsQ0FURDs7QUFXQVgsT0FBTyxDQUFDWSxpQkFBUixHQUE0QixVQUFVQyxJQUFWLEVBQWdCO0FBQ3hDLFNBQU87QUFDSFgsSUFBQUEsUUFBUSxFQUFFLFVBRFA7QUFFSFcsSUFBQUEsSUFBSSxFQUFFQSxJQUZIO0FBR0hGLElBQUFBLFVBQVUsRUFBRTtBQUhULEdBQVA7QUFLSCxDQU5EOztBQVFB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TCxLQUFrQixVQUF6QjtBQUNILENBRkQ7O0FBSUFGLE9BQU8sQ0FBQ2tFLGtCQUFSLEdBQTZCLFVBQVUxQixJQUFWLEVBQWdCO0FBQ3pDLFNBQU9BLElBQUksQ0FBQ3RDLFFBQUwsS0FBa0IsZUFBekI7QUFDSCxDQUZEOztBQUlBRixPQUFPLENBQUNtRSxhQUFSLEdBQXdCLFVBQVUzQixJQUFWLEVBQWdCO0FBQ3BDLFNBQU8sQ0FBQyxDQUFDQSxJQUFJLENBQUNoQyxPQUFkO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIERPQ1VNRU5UX01PREUgPSByZXF1aXJlKCcuLi9jb21tb24vaHRtbCcpLkRPQ1VNRU5UX01PREU7XG5cbi8vTm9kZSBjb25zdHJ1Y3Rpb25cbmV4cG9ydHMuY3JlYXRlRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZU5hbWU6ICcjZG9jdW1lbnQnLFxuICAgICAgICBtb2RlOiBET0NVTUVOVF9NT0RFLk5PX1FVSVJLUyxcbiAgICAgICAgY2hpbGROb2RlczogW11cbiAgICB9O1xufTtcblxuZXhwb3J0cy5jcmVhdGVEb2N1bWVudEZyYWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG5vZGVOYW1lOiAnI2RvY3VtZW50LWZyYWdtZW50JyxcbiAgICAgICAgY2hpbGROb2RlczogW11cbiAgICB9O1xufTtcblxuZXhwb3J0cy5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKHRhZ05hbWUsIG5hbWVzcGFjZVVSSSwgYXR0cnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBub2RlTmFtZTogdGFnTmFtZSxcbiAgICAgICAgdGFnTmFtZTogdGFnTmFtZSxcbiAgICAgICAgYXR0cnM6IGF0dHJzLFxuICAgICAgICBuYW1lc3BhY2VVUkk6IG5hbWVzcGFjZVVSSSxcbiAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgIHBhcmVudE5vZGU6IG51bGxcbiAgICB9O1xufTtcblxuZXhwb3J0cy5jcmVhdGVDb21tZW50Tm9kZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZU5hbWU6ICcjY29tbWVudCcsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIHBhcmVudE5vZGU6IG51bGxcbiAgICB9O1xufTtcblxudmFyIGNyZWF0ZVRleHROb2RlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZU5hbWU6ICcjdGV4dCcsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcGFyZW50Tm9kZTogbnVsbFxuICAgIH07XG59O1xuXG5cbi8vVHJlZSBtdXRhdGlvblxudmFyIGFwcGVuZENoaWxkID0gZXhwb3J0cy5hcHBlbmRDaGlsZCA9IGZ1bmN0aW9uIChwYXJlbnROb2RlLCBuZXdOb2RlKSB7XG4gICAgcGFyZW50Tm9kZS5jaGlsZE5vZGVzLnB1c2gobmV3Tm9kZSk7XG4gICAgbmV3Tm9kZS5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbn07XG5cbnZhciBpbnNlcnRCZWZvcmUgPSBleHBvcnRzLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgdmFyIGluc2VydGlvbklkeCA9IHBhcmVudE5vZGUuY2hpbGROb2Rlcy5pbmRleE9mKHJlZmVyZW5jZU5vZGUpO1xuXG4gICAgcGFyZW50Tm9kZS5jaGlsZE5vZGVzLnNwbGljZShpbnNlcnRpb25JZHgsIDAsIG5ld05vZGUpO1xuICAgIG5ld05vZGUucGFyZW50Tm9kZSA9IHBhcmVudE5vZGU7XG59O1xuXG5leHBvcnRzLnNldFRlbXBsYXRlQ29udGVudCA9IGZ1bmN0aW9uICh0ZW1wbGF0ZUVsZW1lbnQsIGNvbnRlbnRFbGVtZW50KSB7XG4gICAgdGVtcGxhdGVFbGVtZW50LmNvbnRlbnQgPSBjb250ZW50RWxlbWVudDtcbn07XG5cbmV4cG9ydHMuZ2V0VGVtcGxhdGVDb250ZW50ID0gZnVuY3Rpb24gKHRlbXBsYXRlRWxlbWVudCkge1xuICAgIHJldHVybiB0ZW1wbGF0ZUVsZW1lbnQuY29udGVudDtcbn07XG5cbmV4cG9ydHMuc2V0RG9jdW1lbnRUeXBlID0gZnVuY3Rpb24gKGRvY3VtZW50LCBuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpIHtcbiAgICB2YXIgZG9jdHlwZU5vZGUgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC5jaGlsZE5vZGVzW2ldLm5vZGVOYW1lID09PSAnI2RvY3VtZW50VHlwZScpIHtcbiAgICAgICAgICAgIGRvY3R5cGVOb2RlID0gZG9jdW1lbnQuY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgIGRvY3R5cGVOb2RlLm5hbWUgPSBuYW1lO1xuICAgICAgICBkb2N0eXBlTm9kZS5wdWJsaWNJZCA9IHB1YmxpY0lkO1xuICAgICAgICBkb2N0eXBlTm9kZS5zeXN0ZW1JZCA9IHN5c3RlbUlkO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICBhcHBlbmRDaGlsZChkb2N1bWVudCwge1xuICAgICAgICAgICAgbm9kZU5hbWU6ICcjZG9jdW1lbnRUeXBlJyxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBwdWJsaWNJZDogcHVibGljSWQsXG4gICAgICAgICAgICBzeXN0ZW1JZDogc3lzdGVtSWRcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuZXhwb3J0cy5zZXREb2N1bWVudE1vZGUgPSBmdW5jdGlvbiAoZG9jdW1lbnQsIG1vZGUpIHtcbiAgICBkb2N1bWVudC5tb2RlID0gbW9kZTtcbn07XG5cbmV4cG9ydHMuZ2V0RG9jdW1lbnRNb2RlID0gZnVuY3Rpb24gKGRvY3VtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50Lm1vZGU7XG59O1xuXG5leHBvcnRzLmRldGFjaE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgdmFyIGlkeCA9IG5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzLmluZGV4T2Yobm9kZSk7XG5cbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgfVxufTtcblxuZXhwb3J0cy5pbnNlcnRUZXh0ID0gZnVuY3Rpb24gKHBhcmVudE5vZGUsIHRleHQpIHtcbiAgICBpZiAocGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICB2YXIgcHJldk5vZGUgPSBwYXJlbnROb2RlLmNoaWxkTm9kZXNbcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChwcmV2Tm9kZS5ub2RlTmFtZSA9PT0gJyN0ZXh0Jykge1xuICAgICAgICAgICAgcHJldk5vZGUudmFsdWUgKz0gdGV4dDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFwcGVuZENoaWxkKHBhcmVudE5vZGUsIGNyZWF0ZVRleHROb2RlKHRleHQpKTtcbn07XG5cbmV4cG9ydHMuaW5zZXJ0VGV4dEJlZm9yZSA9IGZ1bmN0aW9uIChwYXJlbnROb2RlLCB0ZXh0LCByZWZlcmVuY2VOb2RlKSB7XG4gICAgdmFyIHByZXZOb2RlID0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzW3BhcmVudE5vZGUuY2hpbGROb2Rlcy5pbmRleE9mKHJlZmVyZW5jZU5vZGUpIC0gMV07XG5cbiAgICBpZiAocHJldk5vZGUgJiYgcHJldk5vZGUubm9kZU5hbWUgPT09ICcjdGV4dCcpXG4gICAgICAgIHByZXZOb2RlLnZhbHVlICs9IHRleHQ7XG4gICAgZWxzZVxuICAgICAgICBpbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgY3JlYXRlVGV4dE5vZGUodGV4dCksIHJlZmVyZW5jZU5vZGUpO1xufTtcblxuZXhwb3J0cy5hZG9wdEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAocmVjaXBpZW50LCBhdHRycykge1xuICAgIHZhciByZWNpcGllbnRBdHRyc01hcCA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNpcGllbnQuYXR0cnMubGVuZ3RoOyBpKyspXG4gICAgICAgIHJlY2lwaWVudEF0dHJzTWFwLnB1c2gocmVjaXBpZW50LmF0dHJzW2ldLm5hbWUpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBhdHRycy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVjaXBpZW50QXR0cnNNYXAuaW5kZXhPZihhdHRyc1tqXS5uYW1lKSA9PT0gLTEpXG4gICAgICAgICAgICByZWNpcGllbnQuYXR0cnMucHVzaChhdHRyc1tqXSk7XG4gICAgfVxufTtcblxuXG4vL1RyZWUgdHJhdmVyc2luZ1xuZXhwb3J0cy5nZXRGaXJzdENoaWxkID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzWzBdO1xufTtcblxuZXhwb3J0cy5nZXRDaGlsZE5vZGVzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzO1xufTtcblxuZXhwb3J0cy5nZXRQYXJlbnROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlO1xufTtcblxuZXhwb3J0cy5nZXRBdHRyTGlzdCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuYXR0cnM7XG59O1xuXG4vL05vZGUgZGF0YVxuZXhwb3J0cy5nZXRUYWdOYW1lID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC50YWdOYW1lO1xufTtcblxuZXhwb3J0cy5nZXROYW1lc3BhY2VVUkkgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm5hbWVzcGFjZVVSSTtcbn07XG5cbmV4cG9ydHMuZ2V0VGV4dE5vZGVDb250ZW50ID0gZnVuY3Rpb24gKHRleHROb2RlKSB7XG4gICAgcmV0dXJuIHRleHROb2RlLnZhbHVlO1xufTtcblxuZXhwb3J0cy5nZXRDb21tZW50Tm9kZUNvbnRlbnQgPSBmdW5jdGlvbiAoY29tbWVudE5vZGUpIHtcbiAgICByZXR1cm4gY29tbWVudE5vZGUuZGF0YTtcbn07XG5cbmV4cG9ydHMuZ2V0RG9jdW1lbnRUeXBlTm9kZU5hbWUgPSBmdW5jdGlvbiAoZG9jdHlwZU5vZGUpIHtcbiAgICByZXR1cm4gZG9jdHlwZU5vZGUubmFtZTtcbn07XG5cbmV4cG9ydHMuZ2V0RG9jdW1lbnRUeXBlTm9kZVB1YmxpY0lkID0gZnVuY3Rpb24gKGRvY3R5cGVOb2RlKSB7XG4gICAgcmV0dXJuIGRvY3R5cGVOb2RlLnB1YmxpY0lkO1xufTtcblxuZXhwb3J0cy5nZXREb2N1bWVudFR5cGVOb2RlU3lzdGVtSWQgPSBmdW5jdGlvbiAoZG9jdHlwZU5vZGUpIHtcbiAgICByZXR1cm4gZG9jdHlwZU5vZGUuc3lzdGVtSWQ7XG59O1xuXG4vL05vZGUgdHlwZXNcbmV4cG9ydHMuaXNUZXh0Tm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICcjdGV4dCc7XG59O1xuXG5leHBvcnRzLmlzQ29tbWVudE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnI2NvbW1lbnQnO1xufTtcblxuZXhwb3J0cy5pc0RvY3VtZW50VHlwZU5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50VHlwZSc7XG59O1xuXG5leHBvcnRzLmlzRWxlbWVudE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiAhIW5vZGUudGFnTmFtZTtcbn07XG4iXX0=