9edaf2f52e9157bb68ae0928bb74f8e2
var domEach = require("../utils").domEach,
    _ = {
  pick: require('lodash/pick')
};

var toString = Object.prototype.toString;

exports.css = function (prop, val) {
  if (arguments.length === 2 || toString.call(prop) === '[object Object]') {
    return domEach(this, function (idx, el) {
      setCss(el, prop, val, idx);
    });
  } else {
    return getCss(this[0], prop);
  }
};

function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);

    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function (k) {
      setCss(el, k, prop[k]);
    });
  }
}

function getCss(el, prop) {
  var styles = parse(el.attribs.style);

  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    return _.pick(styles, prop);
  } else {
    return styles;
  }
}

function stringify(obj) {
  return Object.keys(obj || {}).reduce(function (str, prop) {
    return str += '' + (str ? ' ' : '') + prop + ': ' + obj[prop] + ';';
  }, '');
}

function parse(styles) {
  styles = (styles || '').trim();
  if (!styles) return {};
  return styles.split(';').reduce(function (obj, str) {
    var n = str.indexOf(':');
    if (n < 1 || n === str.length - 1) return obj;
    obj[str.slice(0, n).trim()] = str.slice(n + 1).trim();
    return obj;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNzcy5qcyJdLCJuYW1lcyI6WyJkb21FYWNoIiwicmVxdWlyZSIsIl8iLCJwaWNrIiwidG9TdHJpbmciLCJPYmplY3QiLCJwcm90b3R5cGUiLCJleHBvcnRzIiwiY3NzIiwicHJvcCIsInZhbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNhbGwiLCJpZHgiLCJlbCIsInNldENzcyIsImdldENzcyIsInN0eWxlcyIsImF0dHJpYnMiLCJzdHlsZSIsInN0cmluZ2lmeSIsImtleXMiLCJmb3JFYWNoIiwiayIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5Iiwib2JqIiwicmVkdWNlIiwic3RyIiwidHJpbSIsInNwbGl0IiwibiIsImluZGV4T2YiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLFlBQVAsQ0FBb0JELE9BQWxDO0FBQUEsSUFDSUUsQ0FBQyxHQUFHO0FBQ0ZDLEVBQUFBLElBQUksRUFBRUYsT0FBTyxDQUFDLGFBQUQ7QUFEWCxDQURSOztBQUtBLElBQUlHLFFBQVEsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCRixRQUFoQzs7QUFXQUcsT0FBTyxDQUFDQyxHQUFSLEdBQWMsVUFBU0MsSUFBVCxFQUFlQyxHQUFmLEVBQW9CO0FBQ2hDLE1BQUlDLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUFyQixJQUVEUixRQUFRLENBQUNTLElBQVQsQ0FBY0osSUFBZCxNQUF3QixpQkFGM0IsRUFFK0M7QUFDN0MsV0FBT1QsT0FBTyxDQUFDLElBQUQsRUFBTyxVQUFTYyxHQUFULEVBQWNDLEVBQWQsRUFBa0I7QUFDckNDLE1BQUFBLE1BQU0sQ0FBQ0QsRUFBRCxFQUFLTixJQUFMLEVBQVdDLEdBQVgsRUFBZ0JJLEdBQWhCLENBQU47QUFDRCxLQUZhLENBQWQ7QUFHRCxHQU5ELE1BTU87QUFDTCxXQUFPRyxNQUFNLENBQUMsS0FBSyxDQUFMLENBQUQsRUFBVVIsSUFBVixDQUFiO0FBQ0Q7QUFDRixDQVZEOztBQXNCQSxTQUFT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S0FBSixDQUFVRixDQUFDLEdBQUMsQ0FBWixFQUFlRixJQUFmLEVBQTdCO0FBQ0EsV0FBT0gsR0FBUDtBQUNELEdBUkksRUFRRixFQVJFLENBQVA7QUFTRCIsInNvdXJjZXNDb250ZW50IjpbInZhciBkb21FYWNoID0gcmVxdWlyZSgnLi4vdXRpbHMnKS5kb21FYWNoLFxuICAgIF8gPSB7XG4gICAgICBwaWNrOiByZXF1aXJlKCdsb2Rhc2gvcGljaycpLFxuICAgIH07XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogU2V0IC8gR2V0IGNzcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHByb3BcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge3NlbGZ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY3NzID0gZnVuY3Rpb24ocHJvcCwgdmFsKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyIHx8XG4gICAgLy8gV2hlbiBgcHJvcGAgaXMgYSBcInBsYWluXCIgb2JqZWN0XG4gICAgKHRvU3RyaW5nLmNhbGwocHJvcCkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSkge1xuICAgIHJldHVybiBkb21FYWNoKHRoaXMsIGZ1bmN0aW9uKGlkeCwgZWwpIHtcbiAgICAgIHNldENzcyhlbCwgcHJvcCwgdmFsLCBpZHgpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRDc3ModGhpc1swXSwgcHJvcCk7XG4gIH1cbn07XG5cbi8qKlxuICogU2V0IHN0eWxlcyBvZiBhbGwgZWxlbWVudHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBwcm9wXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsXG4gKiBAcGFyYW0ge051bWJlcn0gaWR4IC0gb3B0aW9uYWwgaW5kZXggd2l0aGluIHRoZSBzZWxlY3Rpb25cbiAqIEByZXR1cm4ge3NlbGZ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXRDc3MoZWwsIHByb3AsIHZhbCwgaWR4KSB7XG4gIGlmICgnc3RyaW5nJyA9PSB0eXBlb2YgcHJvcCkge1xuICAgIHZhciBzdHlsZXMgPSBnZXRDc3MoZWwpO1xuICAgIGlmICh0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWwgPSB2YWwuY2FsbChlbCwgaWR4LCBzdHlsZXNbcHJvcF0pO1xuICAgIH1cblxuICAgIGlmICh2YWwgPT09ICcnKSB7XG4gICAgICBkZWxldGUgc3R5bGVzW3Byb3BdO1xuICAgIH0gZWxzZSBpZiAodmFsICE9IG51bGwpIHtcbiAgICAgIHN0eWxlc1twcm9wXSA9IHZhbDtcbiAgICB9XG5cbiAgICBlbC5hdHRyaWJzLnN0eWxlID0gc3RyaW5naWZ5KHN0eWxlcyk7XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT0gdHlwZW9mIHByb3ApIHtcbiAgICBPYmplY3Qua2V5cyhwcm9wKS5mb3JFYWNoKGZ1bmN0aW9uKGspe1xuICAgICAgc2V0Q3NzKGVsLCBrLCBwcm9wW2tdKTtcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBwYXJzZWQgc3R5bGVzIG9mIHRoZSBmaXJzdCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBnZXRDc3MoZWwsIHByb3ApIHtcbiAgdmFyIHN0eWxlcyA9IHBhcnNlKGVsLmF0dHJpYnMuc3R5bGUpO1xuICBpZiAodHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHN0eWxlc1twcm9wXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHByb3ApKSB7XG4gICAgcmV0dXJuIF8ucGljayhzdHlsZXMsIHByb3ApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cbn1cblxuLyoqXG4gKiBTdHJpbmdpZnkgYG9iamAgdG8gc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaiB8fCB7fSlcbiAgICAucmVkdWNlKGZ1bmN0aW9uKHN0ciwgcHJvcCl7XG4gICAgICByZXR1cm4gc3RyICs9ICcnXG4gICAgICAgICsgKHN0ciA/ICcgJyA6ICcnKVxuICAgICAgICArIHByb3BcbiAgICAgICAgKyAnOiAnXG4gICAgICAgICsgb2JqW3Byb3BdXG4gICAgICAgICsgJzsnO1xuICAgIH0sICcnKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBgc3R5bGVzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3R5bGVzXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHlsZXMpIHtcbiAgc3R5bGVzID0gKHN0eWxlcyB8fCAnJykudHJpbSgpO1xuXG4gIGlmICghc3R5bGVzKSByZXR1cm4ge307XG5cbiAgcmV0dXJuIHN0eWxlc1xuICAgIC5zcGxpdCgnOycpXG4gICAgLnJlZHVjZShmdW5jdGlvbihvYmosIHN0cil7XG4gICAgICB2YXIgbiA9IHN0ci5pbmRleE9mKCc6Jyk7XG4gICAgICAvLyBza2lwIGlmIHRoZXJlIGlzIG5vIDosIG9yIGlmIGl0IGlzIHRoZSBmaXJzdC9sYXN0IGNoYXJhY3RlclxuICAgICAgaWYgKG4gPCAxIHx8IG4gPT09IHN0ci5sZW5ndGgtMSkgcmV0dXJuIG9iajtcbiAgICAgIG9ialtzdHIuc2xpY2UoMCxuKS50cmltKCldID0gc3RyLnNsaWNlKG4rMSkudHJpbSgpO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG59XG4iXX0=