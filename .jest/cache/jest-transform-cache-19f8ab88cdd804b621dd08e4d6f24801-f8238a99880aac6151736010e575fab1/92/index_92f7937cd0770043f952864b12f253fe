ae3f89d031c75c4f9bf02f1f7ace280f
'use strict';

var Tokenizer = require("../tokenizer"),
    OpenElementStack = require("./open_element_stack"),
    FormattingElementList = require("./formatting_element_list"),
    LocationInfoParserMixin = require("../extensions/location_info/parser_mixin"),
    defaultTreeAdapter = require("../tree_adapters/default"),
    mergeOptions = require("../utils/merge_options"),
    doctype = require("../common/doctype"),
    foreignContent = require("../common/foreign_content"),
    UNICODE = require("../common/unicode"),
    HTML = require("../common/html");

var $ = HTML.TAG_NAMES,
    NS = HTML.NAMESPACES,
    ATTRS = HTML.ATTRS;
var DEFAULT_OPTIONS = {
  locationInfo: false,
  treeAdapter: defaultTreeAdapter
};
var HIDDEN_INPUT_TYPE = 'hidden';
var AA_OUTER_LOOP_ITER = 8,
    AA_INNER_LOOP_ITER = 3;
var INITIAL_MODE = 'INITIAL_MODE',
    BEFORE_HTML_MODE = 'BEFORE_HTML_MODE',
    BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE',
    IN_HEAD_MODE = 'IN_HEAD_MODE',
    AFTER_HEAD_MODE = 'AFTER_HEAD_MODE',
    IN_BODY_MODE = 'IN_BODY_MODE',
    TEXT_MODE = 'TEXT_MODE',
    IN_TABLE_MODE = 'IN_TABLE_MODE',
    IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE',
    IN_CAPTION_MODE = 'IN_CAPTION_MODE',
    IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE',
    IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE',
    IN_ROW_MODE = 'IN_ROW_MODE',
    IN_CELL_MODE = 'IN_CELL_MODE',
    IN_SELECT_MODE = 'IN_SELECT_MODE',
    IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE',
    IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE',
    AFTER_BODY_MODE = 'AFTER_BODY_MODE',
    IN_FRAMESET_MODE = 'IN_FRAMESET_MODE',
    AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE',
    AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE',
    AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';
var INSERTION_MODE_RESET_MAP = Object.create(null);
INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
INSERTION_MODE_RESET_MAP[$.TBODY] = INSERTION_MODE_RESET_MAP[$.THEAD] = INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;
var TEMPLATE_INSERTION_MODE_SWITCH_MAP = Object.create(null);
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] = TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;

var _ = Object.create(null);

_[INITIAL_MODE] = Object.create(null);
_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] = _[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] = _[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;
_[BEFORE_HTML_MODE] = Object.create(null);
_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;
_[BEFORE_HEAD_MODE] = Object.create(null);
_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;
_[IN_HEAD_MODE] = Object.create(null);
_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;
_[AFTER_HEAD_MODE] = Object.create(null);
_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;
_[IN_BODY_MODE] = Object.create(null);
_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[TEXT_MODE] = Object.create(null);
_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;
_[IN_TABLE_MODE] = Object.create(null);
_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_TEXT_MODE] = Object.create(null);
_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] = _[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;
_[IN_CAPTION_MODE] = Object.create(null);
_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_COLUMN_GROUP_MODE] = Object.create(null);
_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TABLE_BODY_MODE] = Object.create(null);
_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_ROW_MODE] = Object.create(null);
_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = _[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_CELL_MODE] = Object.create(null);
_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_MODE] = Object.create(null);
_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_SELECT_IN_TABLE_MODE] = Object.create(null);
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;
_[IN_TEMPLATE_MODE] = Object.create(null);
_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;
_[AFTER_BODY_MODE] = Object.create(null);
_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[IN_FRAMESET_MODE] = Object.create(null);
_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_FRAMESET_MODE] = Object.create(null);
_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_BODY_MODE] = Object.create(null);
_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;
_[AFTER_AFTER_FRAMESET_MODE] = Object.create(null);
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] = _[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

var Parser = module.exports = function (options) {
  this.options = mergeOptions(DEFAULT_OPTIONS, options);
  this.treeAdapter = this.options.treeAdapter;
  this.pendingScript = null;
  if (this.options.locationInfo) new LocationInfoParserMixin(this);
};

Parser.prototype.parse = function (html) {
  var document = this.treeAdapter.createDocument();

  this._bootstrap(document, null);

  this.tokenizer.write(html, true);

  this._runParsingLoop(null);

  return document;
};

Parser.prototype.parseFragment = function (html, fragmentContext) {
  if (!fragmentContext) fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
  var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

  this._bootstrap(documentMock, fragmentContext);

  if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) this._pushTmplInsertionMode(IN_TEMPLATE_MODE);

  this._initTokenizerForFragmentParsing();

  this._insertFakeRootElement();

  this._resetInsertionMode();

  this._findFormInFragmentContext();

  this.tokenizer.write(html, true);

  this._runParsingLoop(null);

  var rootElement = this.treeAdapter.getFirstChild(documentMock),
      fragment = this.treeAdapter.createDocumentFragment();

  this._adoptNodes(rootElement, fragment);

  return fragment;
};

Parser.prototype._bootstrap = function (document, fragmentContext) {
  this.tokenizer = new Tokenizer(this.options);
  this.stopped = false;
  this.insertionMode = INITIAL_MODE;
  this.originalInsertionMode = '';
  this.document = document;
  this.fragmentContext = fragmentContext;
  this.headElement = null;
  this.formElement = null;
  this.openElements = new OpenElementStack(this.document, this.treeAdapter);
  this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
  this.tmplInsertionModeStack = [];
  this.tmplInsertionModeStackTop = -1;
  this.currentTmplInsertionMode = null;
  this.pendingCharacterTokens = [];
  this.hasNonWhitespacePendingCharacterToken = false;
  this.framesetOk = true;
  this.skipNextNewLine = false;
  this.fosterParentingEnabled = false;
};

Parser.prototype._runParsingLoop = function (scriptHandler) {
  while (!this.stopped) {
    this._setupTokenizerCDATAMode();

    var token = this.tokenizer.getNextToken();
    if (token.type === Tokenizer.HIBERNATION_TOKEN) break;

    if (this.skipNextNewLine) {
      this.skipNextNewLine = false;

      if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
        if (token.chars.length === 1) continue;
        token.chars = token.chars.substr(1);
      }
    }

    this._processInputToken(token);

    if (scriptHandler && this.pendingScript) break;
  }
};

Parser.prototype.runParsingLoopForCurrentChunk = function (writeCallback, scriptHandler) {
  this._runParsingLoop(scriptHandler);

  if (scriptHandler && this.pendingScript) {
    var script = this.pendingScript;
    this.pendingScript = null;
    scriptHandler(script);
    return;
  }

  if (writeCallback) writeCallback();
};

Parser.prototype._setupTokenizerCDATAMode = function () {
  var current = this._getAdjustedCurrentElement();

  this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
};

Parser.prototype._switchToTextParsing = function (currentToken, nextTokenizerState) {
  this._insertElement(currentToken, NS.HTML);

  this.tokenizer.state = nextTokenizerState;
  this.originalInsertionMode = this.insertionMode;
  this.insertionMode = TEXT_MODE;
};

Parser.prototype.switchToPlaintextParsing = function () {
  this.insertionMode = TEXT_MODE;
  this.originalInsertionMode = IN_BODY_MODE;
  this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
};

Parser.prototype._getAdjustedCurrentElement = function () {
  return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
};

Parser.prototype._findFormInFragmentContext = function () {
  var node = this.fragmentContext;

  do {
    if (this.treeAdapter.getTagName(node) === $.FORM) {
      this.formElement = node;
      break;
    }

    node = this.treeAdapter.getParentNode(node);
  } while (node);
};

Parser.prototype._initTokenizerForFragmentParsing = function () {
  if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
    var tn = this.treeAdapter.getTagName(this.fragmentContext);
    if (tn === $.TITLE || tn === $.TEXTAREA) this.tokenizer.state = Tokenizer.MODE.RCDATA;else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) this.tokenizer.state = Tokenizer.MODE.RAWTEXT;else if (tn === $.SCRIPT) this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;else if (tn === $.PLAINTEXT) this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
  }
};

Parser.prototype._setDocumentType = function (token) {
  this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
};

Parser.prototype._attachElementToTree = function (element) {
  if (this._shouldFosterParentOnInsertion()) this._fosterParentElement(element);else {
    var parent = this.openElements.currentTmplContent || this.openElements.current;
    this.treeAdapter.appendChild(parent, element);
  }
};

Parser.prototype._appendElement = function (token, namespaceURI) {
  var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

  this._attachElementToTree(element);
};

Parser.prototype._insertElement = function (token, namespaceURI) {
  var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

  this._attachElementToTree(element);

  this.openElements.push(element);
};

Parser.prototype._insertFakeElement = function (tagName) {
  var element = this.treeAdapter.createElement(tagName, NS.HTML, []);

  this._attachElementToTree(element);

  this.openElements.push(element);
};

Parser.prototype._insertTemplate = function (token) {
  var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs),
      content = this.treeAdapter.createDocumentFragment();
  this.treeAdapter.setTemplateContent(tmpl, content);

  this._attachElementToTree(tmpl);

  this.openElements.push(tmpl);
};

Parser.prototype._insertFakeRootElement = function () {
  var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);
  this.treeAdapter.appendChild(this.openElements.current, element);
  this.openElements.push(element);
};

Parser.prototype._appendCommentNode = function (token, parent) {
  var commentNode = this.treeAdapter.createCommentNode(token.data);
  this.treeAdapter.appendChild(parent, commentNode);
};

Parser.prototype._insertCharacters = function (token) {
  if (this._shouldFosterParentOnInsertion()) this._fosterParentText(token.chars);else {
    var parent = this.openElements.currentTmplContent || this.openElements.current;
    this.treeAdapter.insertText(parent, token.chars);
  }
};

Parser.prototype._adoptNodes = function (donor, recipient) {
  while (true) {
    var child = this.treeAdapter.getFirstChild(donor);
    if (!child) break;
    this.treeAdapter.detachNode(child);
    this.treeAdapter.appendChild(recipient, child);
  }
};

Parser.prototype._shouldProcessTokenInForeignContent = function (token) {
  var current = this._getAdjustedCurrentElement();

  if (!current || current === this.document) return false;
  var ns = this.treeAdapter.getNamespaceURI(current);
  if (ns === NS.HTML) return false;
  if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) return false;
  var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN,
      isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
  if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) return false;
  if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) return false;
  return token.type !== Tokenizer.EOF_TOKEN;
};

Parser.prototype._processToken = function (token) {
  _[this.insertionMode][token.type](this, token);
};

Parser.prototype._processTokenInBodyMode = function (token) {
  _[IN_BODY_MODE][token.type](this, token);
};

Parser.prototype._processTokenInForeignContent = function (token) {
  if (token.type === Tokenizer.CHARACTER_TOKEN) characterInForeignContent(this, token);else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) nullCharacterInForeignContent(this, token);else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) insertCharacters(this, token);else if (token.type === Tokenizer.COMMENT_TOKEN) appendComment(this, token);else if (token.type === Tokenizer.START_TAG_TOKEN) startTagInForeignContent(this, token);else if (token.type === Tokenizer.END_TAG_TOKEN) endTagInForeignContent(this, token);
};

Parser.prototype._processInputToken = function (token) {
  if (this._shouldProcessTokenInForeignContent(token)) this._processTokenInForeignContent(token);else this._processToken(token);
};

Parser.prototype._isIntegrationPoint = function (element, foreignNS) {
  var tn = this.treeAdapter.getTagName(element),
      ns = this.treeAdapter.getNamespaceURI(element),
      attrs = this.treeAdapter.getAttrList(element);
  return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
};

Parser.prototype._reconstructActiveFormattingElements = function () {
  var listLength = this.activeFormattingElements.length;

  if (listLength) {
    var unopenIdx = listLength,
        entry = null;

    do {
      unopenIdx--;
      entry = this.activeFormattingElements.entries[unopenIdx];

      if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
        unopenIdx++;
        break;
      }
    } while (unopenIdx > 0);

    for (var i = unopenIdx; i < listLength; i++) {
      entry = this.activeFormattingElements.entries[i];

      this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));

      entry.element = this.openElements.current;
    }
  }
};

Parser.prototype._closeTableCell = function () {
  this.openElements.generateImpliedEndTags();
  this.openElements.popUntilTableCellPopped();
  this.activeFormattingElements.clearToLastMarker();
  this.insertionMode = IN_ROW_MODE;
};

Parser.prototype._closePElement = function () {
  this.openElements.generateImpliedEndTagsWithExclusion($.P);
  this.openElements.popUntilTagNamePopped($.P);
};

Parser.prototype._resetInsertionMode = function () {
  for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
    var element = this.openElements.items[i];

    if (i === 0) {
      last = true;
      if (this.fragmentContext) element = this.fragmentContext;
    }

    var tn = this.treeAdapter.getTagName(element),
        newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

    if (newInsertionMode) {
      this.insertionMode = newInsertionMode;
      break;
    } else if (!last && (tn === $.TD || tn === $.TH)) {
      this.insertionMode = IN_CELL_MODE;
      break;
    } else if (!last && tn === $.HEAD) {
      this.insertionMode = IN_HEAD_MODE;
      break;
    } else if (tn === $.SELECT) {
      this._resetInsertionModeForSelect(i);

      break;
    } else if (tn === $.TEMPLATE) {
      this.insertionMode = this.currentTmplInsertionMode;
      break;
    } else if (tn === $.HTML) {
      this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
      break;
    } else if (last) {
      this.insertionMode = IN_BODY_MODE;
      break;
    }
  }
};

Parser.prototype._resetInsertionModeForSelect = function (selectIdx) {
  if (selectIdx > 0) {
    for (var i = selectIdx - 1; i > 0; i--) {
      var ancestor = this.openElements.items[i],
          tn = this.treeAdapter.getTagName(ancestor);
      if (tn === $.TEMPLATE) break;else if (tn === $.TABLE) {
        this.insertionMode = IN_SELECT_IN_TABLE_MODE;
        return;
      }
    }
  }

  this.insertionMode = IN_SELECT_MODE;
};

Parser.prototype._pushTmplInsertionMode = function (mode) {
  this.tmplInsertionModeStack.push(mode);
  this.tmplInsertionModeStackTop++;
  this.currentTmplInsertionMode = mode;
};

Parser.prototype._popTmplInsertionMode = function () {
  this.tmplInsertionModeStack.pop();
  this.tmplInsertionModeStackTop--;
  this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
};

Parser.prototype._isElementCausesFosterParenting = function (element) {
  var tn = this.treeAdapter.getTagName(element);
  return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
};

Parser.prototype._shouldFosterParentOnInsertion = function () {
  return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
};

Parser.prototype._findFosterParentingLocation = function () {
  var location = {
    parent: null,
    beforeElement: null
  };

  for (var i = this.openElements.stackTop; i >= 0; i--) {
    var openElement = this.openElements.items[i],
        tn = this.treeAdapter.getTagName(openElement),
        ns = this.treeAdapter.getNamespaceURI(openElement);

    if (tn === $.TEMPLATE && ns === NS.HTML) {
      location.parent = this.treeAdapter.getTemplateContent(openElement);
      break;
    } else if (tn === $.TABLE) {
      location.parent = this.treeAdapter.getParentNode(openElement);
      if (location.parent) location.beforeElement = openElement;else location.parent = this.openElements.items[i - 1];
      break;
    }
  }

  if (!location.parent) location.parent = this.openElements.items[0];
  return location;
};

Parser.prototype._fosterParentElement = function (element) {
  var location = this._findFosterParentingLocation();

  if (location.beforeElement) this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);else this.treeAdapter.appendChild(location.parent, element);
};

Parser.prototype._fosterParentText = function (chars) {
  var location = this._findFosterParentingLocation();

  if (location.beforeElement) this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);else this.treeAdapter.insertText(location.parent, chars);
};

Parser.prototype._isSpecialElement = function (element) {
  var tn = this.treeAdapter.getTagName(element),
      ns = this.treeAdapter.getNamespaceURI(element);
  return HTML.SPECIAL_ELEMENTS[ns][tn];
};

function aaObtainFormattingElementEntry(p, token) {
  var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

  if (formattingElementEntry) {
    if (!p.openElements.contains(formattingElementEntry.element)) {
      p.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p.openElements.hasInScope(token.tagName)) formattingElementEntry = null;
  } else genericEndTagInBody(p, token);

  return formattingElementEntry;
}

function aaObtainFurthestBlock(p, formattingElementEntry) {
  var furthestBlock = null;

  for (var i = p.openElements.stackTop; i >= 0; i--) {
    var element = p.openElements.items[i];
    if (element === formattingElementEntry.element) break;
    if (p._isSpecialElement(element)) furthestBlock = element;
  }

  if (!furthestBlock) {
    p.openElements.popUntilElementPopped(formattingElementEntry.element);
    p.activeFormattingElements.removeEntry(formattingElementEntry);
  }

  return furthestBlock;
}

function aaInnerLoop(p, furthestBlock, formattingElement) {
  var lastElement = furthestBlock,
      nextElement = p.openElements.getCommonAncestor(furthestBlock);

  for (var i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
    nextElement = p.openElements.getCommonAncestor(element);
    var elementEntry = p.activeFormattingElements.getElementEntry(element),
        counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER,
        shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) p.activeFormattingElements.removeEntry(elementEntry);
      p.openElements.remove(element);
    } else {
      element = aaRecreateElementFromEntry(p, elementEntry);
      if (lastElement === furthestBlock) p.activeFormattingElements.bookmark = elementEntry;
      p.treeAdapter.detachNode(lastElement);
      p.treeAdapter.appendChild(element, lastElement);
      lastElement = element;
    }
  }

  return lastElement;
}

function aaRecreateElementFromEntry(p, elementEntry) {
  var ns = p.treeAdapter.getNamespaceURI(elementEntry.element),
      newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
  p.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
}

function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
  if (p._isElementCausesFosterParenting(commonAncestor)) p._fosterParentElement(lastElement);else {
    var tn = p.treeAdapter.getTagName(commonAncestor),
        ns = p.treeAdapter.getNamespaceURI(commonAncestor);
    if (tn === $.TEMPLATE && ns === NS.HTML) commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
    p.treeAdapter.appendChild(commonAncestor, lastElement);
  }
}

function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
  var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element),
      token = formattingElementEntry.token,
      newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

  p._adoptNodes(furthestBlock, newElement);

  p.treeAdapter.appendChild(furthestBlock, newElement);
  p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
  p.activeFormattingElements.removeEntry(formattingElementEntry);
  p.openElements.remove(formattingElementEntry.element);
  p.openElements.insertAfter(furthestBlock, newElement);
}

function callAdoptionAgency(p, token) {
  var formattingElementEntry;

  for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
    formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
    if (!formattingElementEntry) break;
    var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
    if (!furthestBlock) break;
    p.activeFormattingElements.bookmark = formattingElementEntry;
    var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element),
        commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
    p.treeAdapter.detachNode(lastElement);
    aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
    aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
  }
}

function ignoreToken() {}

function appendComment(p, token) {
  p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
}

function appendCommentToRootHtmlElement(p, token) {
  p._appendCommentNode(token, p.openElements.items[0]);
}

function appendCommentToDocument(p, token) {
  p._appendCommentNode(token, p.document);
}

function insertCharacters(p, token) {
  p._insertCharacters(token);
}

function stopParsing(p) {
  p.stopped = true;
}

function doctypeInInitialMode(p, token) {
  p._setDocumentType(token);

  var mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token.name, token.publicId, token.systemId);
  p.treeAdapter.setDocumentMode(p.document, mode);
  p.insertionMode = BEFORE_HTML_MODE;
}

function tokenInInitialMode(p, token) {
  p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
  p.insertionMode = BEFORE_HTML_MODE;

  p._processToken(token);
}

function startTagBeforeHtml(p, token) {
  if (token.tagName === $.HTML) {
    p._insertElement(token, NS.HTML);

    p.insertionMode = BEFORE_HEAD_MODE;
  } else tokenBeforeHtml(p, token);
}

function endTagBeforeHtml(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) tokenBeforeHtml(p, token);
}

function tokenBeforeHtml(p, token) {
  p._insertFakeRootElement();

  p.insertionMode = BEFORE_HEAD_MODE;

  p._processToken(token);
}

function startTagBeforeHead(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.HEAD) {
    p._insertElement(token, NS.HTML);

    p.headElement = p.openElements.current;
    p.insertionMode = IN_HEAD_MODE;
  } else tokenBeforeHead(p, token);
}

function endTagBeforeHead(p, token) {
  var tn = token.tagName;
  if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) tokenBeforeHead(p, token);
}

function tokenBeforeHead(p, token) {
  p._insertFakeElement($.HEAD);

  p.headElement = p.openElements.current;
  p.insertionMode = IN_HEAD_MODE;

  p._processToken(token);
}

function startTagInHead(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) p._appendElement(token, NS.HTML);else if (tn === $.TITLE) p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE) p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);else if (tn === $.SCRIPT) p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);else if (tn === $.TEMPLATE) {
      p._insertTemplate(token, NS.HTML);

      p.activeFormattingElements.insertMarker();
      p.framesetOk = false;
      p.insertionMode = IN_TEMPLATE_MODE;

      p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
    } else if (tn !== $.HEAD) tokenInHead(p, token);
}

function endTagInHead(p, token) {
  var tn = token.tagName;

  if (tn === $.HEAD) {
    p.openElements.pop();
    p.insertionMode = AFTER_HEAD_MODE;
  } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) tokenInHead(p, token);else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped($.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();

    p._popTmplInsertionMode();

    p._resetInsertionMode();
  }
}

function tokenInHead(p, token) {
  p.openElements.pop();
  p.insertionMode = AFTER_HEAD_MODE;

  p._processToken(token);
}

function startTagAfterHead(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.BODY) {
    p._insertElement(token, NS.HTML);

    p.framesetOk = false;
    p.insertionMode = IN_BODY_MODE;
  } else if (tn === $.FRAMESET) {
    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_FRAMESET_MODE;
  } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
    p.openElements.push(p.headElement);
    startTagInHead(p, token);
    p.openElements.remove(p.headElement);
  } else if (tn !== $.HEAD) tokenAfterHead(p, token);
}

function endTagAfterHead(p, token) {
  var tn = token.tagName;
  if (tn === $.BODY || tn === $.HTML || tn === $.BR) tokenAfterHead(p, token);else if (tn === $.TEMPLATE) endTagInHead(p, token);
}

function tokenAfterHead(p, token) {
  p._insertFakeElement($.BODY);

  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
}

function whitespaceCharacterInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertCharacters(token);
}

function characterInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertCharacters(token);

  p.framesetOk = false;
}

function htmlStartTagInBody(p, token) {
  if (p.openElements.tmplCount === 0) p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
}

function bodyStartTagInBody(p, token) {
  var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

  if (bodyElement && p.openElements.tmplCount === 0) {
    p.framesetOk = false;
    p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
  }
}

function framesetStartTagInBody(p, token) {
  var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

  if (p.framesetOk && bodyElement) {
    p.treeAdapter.detachNode(bodyElement);
    p.openElements.popAllUpToHtmlElement();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_FRAMESET_MODE;
  }
}

function addressStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();

  p._insertElement(token, NS.HTML);
}

function numberedHeaderStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();
  var tn = p.openElements.currentTagName;
  if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) p.openElements.pop();

  p._insertElement(token, NS.HTML);
}

function preStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();

  p._insertElement(token, NS.HTML);

  p.skipNextNewLine = true;
  p.framesetOk = false;
}

function formStartTagInBody(p, token) {
  var inTemplate = p.openElements.tmplCount > 0;

  if (!p.formElement || inTemplate) {
    if (p.openElements.hasInButtonScope($.P)) p._closePElement();

    p._insertElement(token, NS.HTML);

    if (!inTemplate) p.formElement = p.openElements.current;
  }
}

function listItemStartTagInBody(p, token) {
  p.framesetOk = false;
  var tn = token.tagName;

  for (var i = p.openElements.stackTop; i >= 0; i--) {
    var element = p.openElements.items[i],
        elementTn = p.treeAdapter.getTagName(element),
        closeTn = null;
    if (tn === $.LI && elementTn === $.LI) closeTn = $.LI;else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) closeTn = elementTn;

    if (closeTn) {
      p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
      p.openElements.popUntilTagNamePopped(closeTn);
      break;
    }

    if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) break;
  }

  if (p.openElements.hasInButtonScope($.P)) p._closePElement();

  p._insertElement(token, NS.HTML);
}

function plaintextStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();

  p._insertElement(token, NS.HTML);

  p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}

function buttonStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.BUTTON)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped($.BUTTON);
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
}

function aStartTagInBody(p, token) {
  var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

  if (activeElementEntry) {
    callAdoptionAgency(p, token);
    p.openElements.remove(activeElementEntry.element);
    p.activeFormattingElements.removeEntry(activeElementEntry);
  }

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function bStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function nobrStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  if (p.openElements.hasInScope($.NOBR)) {
    callAdoptionAgency(p, token);

    p._reconstructActiveFormattingElements();
  }

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.pushElement(p.openElements.current, token);
}

function appletStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.activeFormattingElements.insertMarker();
  p.framesetOk = false;
}

function tableStartTagInBody(p, token) {
  if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) p._closePElement();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
  p.insertionMode = IN_TABLE_MODE;
}

function areaStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._appendElement(token, NS.HTML);

  p.framesetOk = false;
}

function inputStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._appendElement(token, NS.HTML);

  var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
  if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) p.framesetOk = false;
}

function paramStartTagInBody(p, token) {
  p._appendElement(token, NS.HTML);
}

function hrStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();
  if (p.openElements.currentTagName === $.MENUITEM) p.openElements.pop();

  p._appendElement(token, NS.HTML);

  p.framesetOk = false;
}

function imageStartTagInBody(p, token) {
  token.tagName = $.IMG;
  areaStartTagInBody(p, token);
}

function textareaStartTagInBody(p, token) {
  p._insertElement(token, NS.HTML);

  p.skipNextNewLine = true;
  p.tokenizer.state = Tokenizer.MODE.RCDATA;
  p.originalInsertionMode = p.insertionMode;
  p.framesetOk = false;
  p.insertionMode = TEXT_MODE;
}

function xmpStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();

  p._reconstructActiveFormattingElements();

  p.framesetOk = false;

  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function iframeStartTagInBody(p, token) {
  p.framesetOk = false;

  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function noembedStartTagInBody(p, token) {
  p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}

function selectStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);

  p.framesetOk = false;
  if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) p.insertionMode = IN_SELECT_IN_TABLE_MODE;else p.insertionMode = IN_SELECT_MODE;
}

function optgroupStartTagInBody(p, token) {
  if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
}

function rbStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTags();

  p._insertElement(token, NS.HTML);
}

function rtStartTagInBody(p, token) {
  if (p.openElements.hasInScope($.RUBY)) p.openElements.generateImpliedEndTagsWithExclusion($.RTC);

  p._insertElement(token, NS.HTML);
}

function menuitemStartTagInBody(p, token) {
  if (p.openElements.currentTagName === $.MENUITEM) p.openElements.pop();

  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
}

function menuStartTagInBody(p, token) {
  if (p.openElements.hasInButtonScope($.P)) p._closePElement();
  if (p.openElements.currentTagName === $.MENUITEM) p.openElements.pop();

  p._insertElement(token, NS.HTML);
}

function mathStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  foreignContent.adjustTokenMathMLAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);
  if (token.selfClosing) p._appendElement(token, NS.MATHML);else p._insertElement(token, NS.MATHML);
}

function svgStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  foreignContent.adjustTokenSVGAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);
  if (token.selfClosing) p._appendElement(token, NS.SVG);else p._insertElement(token, NS.SVG);
}

function genericStartTagInBody(p, token) {
  p._reconstructActiveFormattingElements();

  p._insertElement(token, NS.HTML);
}

function startTagInBody(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 1:
      if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) bStartTagInBody(p, token);else if (tn === $.P) addressStartTagInBody(p, token);else if (tn === $.A) aStartTagInBody(p, token);else genericStartTagInBody(p, token);
      break;

    case 2:
      if (tn === $.DL || tn === $.OL || tn === $.UL) addressStartTagInBody(p, token);else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderStartTagInBody(p, token);else if (tn === $.LI || tn === $.DD || tn === $.DT) listItemStartTagInBody(p, token);else if (tn === $.EM || tn === $.TT) bStartTagInBody(p, token);else if (tn === $.BR) areaStartTagInBody(p, token);else if (tn === $.HR) hrStartTagInBody(p, token);else if (tn === $.RB) rbStartTagInBody(p, token);else if (tn === $.RT || tn === $.RP) rtStartTagInBody(p, token);else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) genericStartTagInBody(p, token);
      break;

    case 3:
      if (tn === $.DIV || tn === $.DIR || tn === $.NAV) addressStartTagInBody(p, token);else if (tn === $.PRE) preStartTagInBody(p, token);else if (tn === $.BIG) bStartTagInBody(p, token);else if (tn === $.IMG || tn === $.WBR) areaStartTagInBody(p, token);else if (tn === $.XMP) xmpStartTagInBody(p, token);else if (tn === $.SVG) svgStartTagInBody(p, token);else if (tn === $.RTC) rbStartTagInBody(p, token);else if (tn !== $.COL) genericStartTagInBody(p, token);
      break;

    case 4:
      if (tn === $.HTML) htmlStartTagInBody(p, token);else if (tn === $.BASE || tn === $.LINK || tn === $.META) startTagInHead(p, token);else if (tn === $.BODY) bodyStartTagInBody(p, token);else if (tn === $.MAIN) addressStartTagInBody(p, token);else if (tn === $.FORM) formStartTagInBody(p, token);else if (tn === $.CODE || tn === $.FONT) bStartTagInBody(p, token);else if (tn === $.NOBR) nobrStartTagInBody(p, token);else if (tn === $.AREA) areaStartTagInBody(p, token);else if (tn === $.MATH) mathStartTagInBody(p, token);else if (tn === $.MENU) menuStartTagInBody(p, token);else if (tn !== $.HEAD) genericStartTagInBody(p, token);
      break;

    case 5:
      if (tn === $.STYLE || tn === $.TITLE) startTagInHead(p, token);else if (tn === $.ASIDE) addressStartTagInBody(p, token);else if (tn === $.SMALL) bStartTagInBody(p, token);else if (tn === $.TABLE) tableStartTagInBody(p, token);else if (tn === $.EMBED) areaStartTagInBody(p, token);else if (tn === $.INPUT) inputStartTagInBody(p, token);else if (tn === $.PARAM || tn === $.TRACK) paramStartTagInBody(p, token);else if (tn === $.IMAGE) imageStartTagInBody(p, token);else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) genericStartTagInBody(p, token);
      break;

    case 6:
      if (tn === $.SCRIPT) startTagInHead(p, token);else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressStartTagInBody(p, token);else if (tn === $.BUTTON) buttonStartTagInBody(p, token);else if (tn === $.STRIKE || tn === $.STRONG) bStartTagInBody(p, token);else if (tn === $.APPLET || tn === $.OBJECT) appletStartTagInBody(p, token);else if (tn === $.KEYGEN) areaStartTagInBody(p, token);else if (tn === $.SOURCE) paramStartTagInBody(p, token);else if (tn === $.IFRAME) iframeStartTagInBody(p, token);else if (tn === $.SELECT) selectStartTagInBody(p, token);else if (tn === $.OPTION) optgroupStartTagInBody(p, token);else genericStartTagInBody(p, token);
      break;

    case 7:
      if (tn === $.BGSOUND) startTagInHead(p, token);else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) addressStartTagInBody(p, token);else if (tn === $.LISTING) preStartTagInBody(p, token);else if (tn === $.MARQUEE) appletStartTagInBody(p, token);else if (tn === $.NOEMBED) noembedStartTagInBody(p, token);else if (tn !== $.CAPTION) genericStartTagInBody(p, token);
      break;

    case 8:
      if (tn === $.BASEFONT) startTagInHead(p, token);else if (tn === $.MENUITEM) menuitemStartTagInBody(p, token);else if (tn === $.FRAMESET) framesetStartTagInBody(p, token);else if (tn === $.FIELDSET) addressStartTagInBody(p, token);else if (tn === $.TEXTAREA) textareaStartTagInBody(p, token);else if (tn === $.TEMPLATE) startTagInHead(p, token);else if (tn === $.NOSCRIPT) noembedStartTagInBody(p, token);else if (tn === $.OPTGROUP) optgroupStartTagInBody(p, token);else if (tn !== $.COLGROUP) genericStartTagInBody(p, token);
      break;

    case 9:
      if (tn === $.PLAINTEXT) plaintextStartTagInBody(p, token);else genericStartTagInBody(p, token);
      break;

    case 10:
      if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressStartTagInBody(p, token);else genericStartTagInBody(p, token);
      break;

    default:
      genericStartTagInBody(p, token);
  }
}

function bodyEndTagInBody(p) {
  if (p.openElements.hasInScope($.BODY)) p.insertionMode = AFTER_BODY_MODE;
}

function htmlEndTagInBody(p, token) {
  if (p.openElements.hasInScope($.BODY)) {
    p.insertionMode = AFTER_BODY_MODE;

    p._processToken(token);
  }
}

function addressEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
  }
}

function formEndTagInBody(p) {
  var inTemplate = p.openElements.tmplCount > 0,
      formElement = p.formElement;
  if (!inTemplate) p.formElement = null;

  if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
    p.openElements.generateImpliedEndTags();
    if (inTemplate) p.openElements.popUntilTagNamePopped($.FORM);else p.openElements.remove(formElement);
  }
}

function pEndTagInBody(p) {
  if (!p.openElements.hasInButtonScope($.P)) p._insertFakeElement($.P);

  p._closePElement();
}

function liEndTagInBody(p) {
  if (p.openElements.hasInListItemScope($.LI)) {
    p.openElements.generateImpliedEndTagsWithExclusion($.LI);
    p.openElements.popUntilTagNamePopped($.LI);
  }
}

function ddEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTagsWithExclusion(tn);
    p.openElements.popUntilTagNamePopped(tn);
  }
}

function numberedHeaderEndTagInBody(p) {
  if (p.openElements.hasNumberedHeaderInScope()) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilNumberedHeaderPopped();
  }
}

function appletEndTagInBody(p, token) {
  var tn = token.tagName;

  if (p.openElements.hasInScope(tn)) {
    p.openElements.generateImpliedEndTags();
    p.openElements.popUntilTagNamePopped(tn);
    p.activeFormattingElements.clearToLastMarker();
  }
}

function brEndTagInBody(p) {
  p._reconstructActiveFormattingElements();

  p._insertFakeElement($.BR);

  p.openElements.pop();
  p.framesetOk = false;
}

function genericEndTagInBody(p, token) {
  var tn = token.tagName;

  for (var i = p.openElements.stackTop; i > 0; i--) {
    var element = p.openElements.items[i];

    if (p.treeAdapter.getTagName(element) === tn) {
      p.openElements.generateImpliedEndTagsWithExclusion(tn);
      p.openElements.popUntilElementPopped(element);
      break;
    }

    if (p._isSpecialElement(element)) break;
  }
}

function endTagInBody(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 1:
      if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) callAdoptionAgency(p, token);else if (tn === $.P) pEndTagInBody(p, token);else genericEndTagInBody(p, token);
      break;

    case 2:
      if (tn === $.DL || tn === $.UL || tn === $.OL) addressEndTagInBody(p, token);else if (tn === $.LI) liEndTagInBody(p, token);else if (tn === $.DD || tn === $.DT) ddEndTagInBody(p, token);else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) numberedHeaderEndTagInBody(p, token);else if (tn === $.BR) brEndTagInBody(p, token);else if (tn === $.EM || tn === $.TT) callAdoptionAgency(p, token);else genericEndTagInBody(p, token);
      break;

    case 3:
      if (tn === $.BIG) callAdoptionAgency(p, token);else if (tn === $.DIR || tn === $.DIV || tn === $.NAV) addressEndTagInBody(p, token);else genericEndTagInBody(p, token);
      break;

    case 4:
      if (tn === $.BODY) bodyEndTagInBody(p, token);else if (tn === $.HTML) htmlEndTagInBody(p, token);else if (tn === $.FORM) formEndTagInBody(p, token);else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) callAdoptionAgency(p, token);else if (tn === $.MAIN || tn === $.MENU) addressEndTagInBody(p, token);else genericEndTagInBody(p, token);
      break;

    case 5:
      if (tn === $.ASIDE) addressEndTagInBody(p, token);else if (tn === $.SMALL) callAdoptionAgency(p, token);else genericEndTagInBody(p, token);
      break;

    case 6:
      if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP) addressEndTagInBody(p, token);else if (tn === $.APPLET || tn === $.OBJECT) appletEndTagInBody(p, token);else if (tn === $.STRIKE || tn === $.STRONG) callAdoptionAgency(p, token);else genericEndTagInBody(p, token);
      break;

    case 7:
      if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY) addressEndTagInBody(p, token);else if (tn === $.MARQUEE) appletEndTagInBody(p, token);else genericEndTagInBody(p, token);
      break;

    case 8:
      if (tn === $.FIELDSET) addressEndTagInBody(p, token);else if (tn === $.TEMPLATE) endTagInHead(p, token);else genericEndTagInBody(p, token);
      break;

    case 10:
      if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) addressEndTagInBody(p, token);else genericEndTagInBody(p, token);
      break;

    default:
      genericEndTagInBody(p, token);
  }
}

function eofInBody(p, token) {
  if (p.tmplInsertionModeStackTop > -1) eofInTemplate(p, token);else p.stopped = true;
}

function endTagInText(p, token) {
  if (token.tagName === $.SCRIPT) p.pendingScript = p.openElements.current;
  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;
}

function eofInText(p, token) {
  p.openElements.pop();
  p.insertionMode = p.originalInsertionMode;

  p._processToken(token);
}

function characterInTable(p, token) {
  var curTn = p.openElements.currentTagName;

  if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
    p.pendingCharacterTokens = [];
    p.hasNonWhitespacePendingCharacterToken = false;
    p.originalInsertionMode = p.insertionMode;
    p.insertionMode = IN_TABLE_TEXT_MODE;

    p._processToken(token);
  } else tokenInTable(p, token);
}

function captionStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();
  p.activeFormattingElements.insertMarker();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_CAPTION_MODE;
}

function colgroupStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_COLUMN_GROUP_MODE;
}

function colStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertFakeElement($.COLGROUP);

  p.insertionMode = IN_COLUMN_GROUP_MODE;

  p._processToken(token);
}

function tbodyStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertElement(token, NS.HTML);

  p.insertionMode = IN_TABLE_BODY_MODE;
}

function tdStartTagInTable(p, token) {
  p.openElements.clearBackToTableContext();

  p._insertFakeElement($.TBODY);

  p.insertionMode = IN_TABLE_BODY_MODE;

  p._processToken(token);
}

function tableStartTagInTable(p, token) {
  if (p.openElements.hasInTableScope($.TABLE)) {
    p.openElements.popUntilTagNamePopped($.TABLE);

    p._resetInsertionMode();

    p._processToken(token);
  }
}

function inputStartTagInTable(p, token) {
  var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
  if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) p._appendElement(token, NS.HTML);else tokenInTable(p, token);
}

function formStartTagInTable(p, token) {
  if (!p.formElement && p.openElements.tmplCount === 0) {
    p._insertElement(token, NS.HTML);

    p.formElement = p.openElements.current;
    p.openElements.pop();
  }
}

function startTagInTable(p, token) {
  var tn = token.tagName;

  switch (tn.length) {
    case 2:
      if (tn === $.TD || tn === $.TH || tn === $.TR) tdStartTagInTable(p, token);else tokenInTable(p, token);
      break;

    case 3:
      if (tn === $.COL) colStartTagInTable(p, token);else tokenInTable(p, token);
      break;

    case 4:
      if (tn === $.FORM) formStartTagInTable(p, token);else tokenInTable(p, token);
      break;

    case 5:
      if (tn === $.TABLE) tableStartTagInTable(p, token);else if (tn === $.STYLE) startTagInHead(p, token);else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) tbodyStartTagInTable(p, token);else if (tn === $.INPUT) inputStartTagInTable(p, token);else tokenInTable(p, token);
      break;

    case 6:
      if (tn === $.SCRIPT) startTagInHead(p, token);else tokenInTable(p, token);
      break;

    case 7:
      if (tn === $.CAPTION) captionStartTagInTable(p, token);else tokenInTable(p, token);
      break;

    case 8:
      if (tn === $.COLGROUP) colgroupStartTagInTable(p, token);else if (tn === $.TEMPLATE) startTagInHead(p, token);else tokenInTable(p, token);
      break;

    default:
      tokenInTable(p, token);
  }
}

function endTagInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.TABLE)) {
      p.openElements.popUntilTagNamePopped($.TABLE);

      p._resetInsertionMode();
    }
  } else if (tn === $.TEMPLATE) endTagInHead(p, token);else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) tokenInTable(p, token);
}

function tokenInTable(p, token) {
  var savedFosterParentingState = p.fosterParentingEnabled;
  p.fosterParentingEnabled = true;

  p._processTokenInBodyMode(token);

  p.fosterParentingEnabled = savedFosterParentingState;
}

function whitespaceCharacterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
}

function characterInTableText(p, token) {
  p.pendingCharacterTokens.push(token);
  p.hasNonWhitespacePendingCharacterToken = true;
}

function tokenInTableText(p, token) {
  var i = 0;

  if (p.hasNonWhitespacePendingCharacterToken) {
    for (; i < p.pendingCharacterTokens.length; i++) {
      tokenInTable(p, p.pendingCharacterTokens[i]);
    }
  } else {
    for (; i < p.pendingCharacterTokens.length; i++) {
      p._insertCharacters(p.pendingCharacterTokens[i]);
    }
  }

  p.insertionMode = p.originalInsertionMode;

  p._processToken(token);
}

function startTagInCaption(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped($.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else startTagInBody(p, token);
}

function endTagInCaption(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.CAPTION)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped($.CAPTION);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_TABLE_MODE;
      if (tn === $.TABLE) p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) endTagInBody(p, token);
}

function startTagInColumnGroup(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.COL) p._appendElement(token, NS.HTML);else if (tn === $.TEMPLATE) startTagInHead(p, token);else tokenInColumnGroup(p, token);
}

function endTagInColumnGroup(p, token) {
  var tn = token.tagName;

  if (tn === $.COLGROUP) {
    if (p.openElements.currentTagName === $.COLGROUP) {
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $.TEMPLATE) endTagInHead(p, token);else if (tn !== $.COL) tokenInColumnGroup(p, token);
}

function tokenInColumnGroup(p, token) {
  if (p.openElements.currentTagName === $.COLGROUP) {
    p.openElements.pop();
    p.insertionMode = IN_TABLE_MODE;

    p._processToken(token);
  }
}

function startTagInTableBody(p, token) {
  var tn = token.tagName;

  if (tn === $.TR) {
    p.openElements.clearBackToTableBodyContext();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_ROW_MODE;
  } else if (tn === $.TH || tn === $.TD) {
    p.openElements.clearBackToTableBodyContext();

    p._insertFakeElement($.TR);

    p.insertionMode = IN_ROW_MODE;

    p._processToken(token);
  } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasTableBodyContextInTableScope()) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else startTagInTable(p, token);
}

function endTagInTableBody(p, token) {
  var tn = token.tagName;

  if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $.TABLE) {
    if (p.openElements.hasTableBodyContextInTableScope()) {
      p.openElements.clearBackToTableBodyContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_MODE;

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) endTagInTable(p, token);
}

function startTagInRow(p, token) {
  var tn = token.tagName;

  if (tn === $.TH || tn === $.TD) {
    p.openElements.clearBackToTableRowContext();

    p._insertElement(token, NS.HTML);

    p.insertionMode = IN_CELL_MODE;
    p.activeFormattingElements.insertMarker();
  } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else startTagInTable(p, token);
}

function endTagInRow(p, token) {
  var tn = token.tagName;

  if (tn === $.TR) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;
    }
  } else if (tn === $.TABLE) {
    if (p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
    if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
      p.openElements.clearBackToTableRowContext();
      p.openElements.pop();
      p.insertionMode = IN_TABLE_BODY_MODE;

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) endTagInTable(p, token);
}

function startTagInCell(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
      p._closeTableCell();

      p._processToken(token);
    }
  } else startTagInBody(p, token);
}

function endTagInCell(p, token) {
  var tn = token.tagName;

  if (tn === $.TD || tn === $.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.generateImpliedEndTags();
      p.openElements.popUntilTagNamePopped(tn);
      p.activeFormattingElements.clearToLastMarker();
      p.insertionMode = IN_ROW_MODE;
    }
  } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
    if (p.openElements.hasInTableScope(tn)) {
      p._closeTableCell();

      p._processToken(token);
    }
  } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) endTagInBody(p, token);
}

function startTagInSelect(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.OPTION) {
    if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();

    p._insertElement(token, NS.HTML);
  } else if (tn === $.OPTGROUP) {
    if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();
    if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();

    p._insertElement(token, NS.HTML);
  } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
    if (p.openElements.hasInSelectScope($.SELECT)) {
      p.openElements.popUntilTagNamePopped($.SELECT);

      p._resetInsertionMode();

      if (tn !== $.SELECT) p._processToken(token);
    }
  } else if (tn === $.SCRIPT || tn === $.TEMPLATE) startTagInHead(p, token);
}

function endTagInSelect(p, token) {
  var tn = token.tagName;

  if (tn === $.OPTGROUP) {
    var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1],
        prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
    if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) p.openElements.pop();
    if (p.openElements.currentTagName === $.OPTGROUP) p.openElements.pop();
  } else if (tn === $.OPTION) {
    if (p.openElements.currentTagName === $.OPTION) p.openElements.pop();
  } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
    p.openElements.popUntilTagNamePopped($.SELECT);

    p._resetInsertionMode();
  } else if (tn === $.TEMPLATE) endTagInHead(p, token);
}

function startTagInSelectInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
    p.openElements.popUntilTagNamePopped($.SELECT);

    p._resetInsertionMode();

    p._processToken(token);
  } else startTagInSelect(p, token);
}

function endTagInSelectInTable(p, token) {
  var tn = token.tagName;

  if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
    if (p.openElements.hasInTableScope(tn)) {
      p.openElements.popUntilTagNamePopped($.SELECT);

      p._resetInsertionMode();

      p._processToken(token);
    }
  } else endTagInSelect(p, token);
}

function startTagInTemplate(p, token) {
  var tn = token.tagName;
  if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) startTagInHead(p, token);else {
    var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

    p._popTmplInsertionMode();

    p._pushTmplInsertionMode(newInsertionMode);

    p.insertionMode = newInsertionMode;

    p._processToken(token);
  }
}

function endTagInTemplate(p, token) {
  if (token.tagName === $.TEMPLATE) endTagInHead(p, token);
}

function eofInTemplate(p, token) {
  if (p.openElements.tmplCount > 0) {
    p.openElements.popUntilTagNamePopped($.TEMPLATE);
    p.activeFormattingElements.clearToLastMarker();

    p._popTmplInsertionMode();

    p._resetInsertionMode();

    p._processToken(token);
  } else p.stopped = true;
}

function startTagAfterBody(p, token) {
  if (token.tagName === $.HTML) startTagInBody(p, token);else tokenAfterBody(p, token);
}

function endTagAfterBody(p, token) {
  if (token.tagName === $.HTML) {
    if (!p.fragmentContext) p.insertionMode = AFTER_AFTER_BODY_MODE;
  } else tokenAfterBody(p, token);
}

function tokenAfterBody(p, token) {
  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
}

function startTagInFrameset(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.FRAMESET) p._insertElement(token, NS.HTML);else if (tn === $.FRAME) p._appendElement(token, NS.HTML);else if (tn === $.NOFRAMES) startTagInHead(p, token);
}

function endTagInFrameset(p, token) {
  if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
    p.openElements.pop();
    if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) p.insertionMode = AFTER_FRAMESET_MODE;
  }
}

function startTagAfterFrameset(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.NOFRAMES) startTagInHead(p, token);
}

function endTagAfterFrameset(p, token) {
  if (token.tagName === $.HTML) p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
}

function startTagAfterAfterBody(p, token) {
  if (token.tagName === $.HTML) startTagInBody(p, token);else tokenAfterAfterBody(p, token);
}

function tokenAfterAfterBody(p, token) {
  p.insertionMode = IN_BODY_MODE;

  p._processToken(token);
}

function startTagAfterAfterFrameset(p, token) {
  var tn = token.tagName;
  if (tn === $.HTML) startTagInBody(p, token);else if (tn === $.NOFRAMES) startTagInHead(p, token);
}

function nullCharacterInForeignContent(p, token) {
  token.chars = UNICODE.REPLACEMENT_CHARACTER;

  p._insertCharacters(token);
}

function characterInForeignContent(p, token) {
  p._insertCharacters(token);

  p.framesetOk = false;
}

function startTagInForeignContent(p, token) {
  if (foreignContent.causesExit(token) && !p.fragmentContext) {
    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
      p.openElements.pop();
    }

    p._processToken(token);
  } else {
    var current = p._getAdjustedCurrentElement(),
        currentNs = p.treeAdapter.getNamespaceURI(current);

    if (currentNs === NS.MATHML) foreignContent.adjustTokenMathMLAttrs(token);else if (currentNs === NS.SVG) {
      foreignContent.adjustTokenSVGTagName(token);
      foreignContent.adjustTokenSVGAttrs(token);
    }
    foreignContent.adjustTokenXMLAttrs(token);
    if (token.selfClosing) p._appendElement(token, currentNs);else p._insertElement(token, currentNs);
  }
}

function endTagInForeignContent(p, token) {
  for (var i = p.openElements.stackTop; i > 0; i--) {
    var element = p.openElements.items[i];

    if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
      p._processToken(token);

      break;
    }

    if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
      p.openElements.popUntilElementPopped(element);
      break;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlRva2VuaXplciIsInJlcXVpcmUiLCJPcGVuRWxlbWVudFN0YWNrIiwiRm9ybWF0dGluZ0VsZW1lbnRMaXN0IiwiTG9jYXRpb25JbmZvUGFyc2VyTWl4aW4iLCJkZWZhdWx0VHJlZUFkYXB0ZXIiLCJtZXJnZU9wdGlvbnMiLCJkb2N0eXBlIiwiZm9yZWlnbkNvbnRlbnQiLCJVTklDT0RFIiwiSFRNTCIsIiQiLCJUQUdfTkFNRVMiLCJOUyIsIk5BTUVTUEFDRVMiLCJBVFRSUyIsIkRFRkFVTFRfT1BUSU9OUyIsImxvY2F0aW9uSW5mbyIsInRyZWVBZGFwdGVyIiwiSElEREVOX0lOUFVUX1RZUEUiLCJBQV9PVVRFUl9MT09QX0lURVIiLCJBQV9JTk5FUl9MT09QX0lURVIiLCJJTklUSUFMX01PREUiLCJCRUZPUkVfSFRNTF9NT0RFIiwiQkVGT1JFX0hFQURfTU9ERSIsIklOX0hFQURfTU9ERSIsIkFGVEVSX0hFQURfTU9ERSIsIklOX0JPRFlfTU9ERSIsIlRFWFRfTU9ERSIsIklOX1RBQkxFX01PREUiLCJJTl9UQUJMRV9URVhUX01PREUiLCJJTl9DQVBUSU9OX01PREUiLCJJTl9DT0xVTU5fR1JPVVBfTU9ERSIsIklOX1RBQkxFX0JPRFlfTU9ERSIsIklOX1JPV19NT0RFIiwiSU5fQ0VMTF9NT0RFIiwiSU5fU0VMRUNUX01PREUiLCJJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERSIsIklOX1RFTVBMQVRFX01PREUiLCJBRlRFUl9CT0RZX01PREUiLCJJTl9GUkFNRVNFVF9NT0RFIiwiQUZURVJfRlJBTUVTRVRfTU9ERSIsIkFGVEVSX0FGVEVSX0JPRFlfTU9ERSIsIkFGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREUiLCJJTlNFUlRJT05fTU9ERV9SRVNFVF9NQVAiLCJPYmplY3QiLCJjcmVhdGUiLCJUUiIsIlRCT0RZIiwiVEhFQUQiLCJURk9PVCIsIkNBUFRJT04iLCJDT0xHUk9VUCIsIlRBQkxFIiwiQk9EWSIsIkZSQU1FU0VUIiwiVEVNUExBVEVfSU5TRVJUSU9OX01PREVfU1dJVENIX01BUCIsIkNPTCIsIlREIiwiVEgiLCJfIiwiQ0hBUkFDVEVSX1RPS0VOIiwiTlVMTF9DSEFSQUNURVJfVE9LRU4iLCJ0b2tlbkluSW5pdGlhbE1vZGUiLCJXSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTiIsImlnbm9yZVRva2VuIiwiQ09NTUVOVF9UT0tFTiIsImFwcGVuZENvbW1lbnQiLCJET0NUWVBFX1RPS0VOIiwiZG9jdHlwZUluSW5pdGlhbE1vZGUiLCJTVEFSVF9UQUdfVE9LRU4iLCJFTkRfVEFHX1RPS0VOIiwiRU9GX1RPS0VOIiwidG9rZW5CZWZvcmVIdG1sIiwic3RhcnRUYWdCZWZvcmVIdG1sIiwiZW5kVGFnQmVmb3JlSHRtbCIsInRva2VuQmVmb3JlSGVhZCIsInN0YXJ0VGFnQmVmb3JlSGVhZCIsImVuZFRhZ0JlZm9yZUhlYWQiLCJ0b2tlbkluSGVhZCIsImluc2VydENoYXJhY3RlcnMiLCJzdGFydFRhZ0luSGVhZCIsImVuZFRhZ0luSGVhZCIsInRva2VuQWZ0ZXJIZWFkIiwic3RhcnRUYWdBZnRlckhlYWQiLCJlbmRUYWdBZnRlckhlYWQiLCJjaGFyYWN0ZXJJbkJvZHkiLCJ3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5Iiwic3RhcnRUYWdJbkJvZHkiLCJlbmRUYWdJbkJvZHkiLCJlb2ZJbkJvZHkiLCJlbmRUYWdJblRleHQiLCJlb2ZJblRleHQiLCJjaGFyYWN0ZXJJblRhYmxlIiwic3RhcnRUYWdJblRhYmxlIiwiZW5kVGFnSW5UYWJsZSIsImNoYXJhY3RlckluVGFibGVUZXh0Iiwid2hpdGVzcGFjZUNoYXJhY3RlckluVGFibGVUZXh0IiwidG9rZW5JblRhYmxlVGV4dCIsInN0YXJ0VGFnSW5DYXB0aW9uIiwiZW5kVGFnSW5DYXB0aW9uIiwidG9rZW5JbkNvbHVtbkdyb3VwIiwic3RhcnRUYWdJbkNvbHVtbkdyb3VwIiwiZW5kVGFnSW5Db2x1bW5Hcm91cCIsInN0YXJ0VGFnSW5UYWJsZUJvZHkiLCJlbmRUYWdJblRhYmxlQm9keSIsInN0YXJ0VGFnSW5Sb3ciLCJlbmRUYWdJblJvdyIsInN0YXJ0VGFnSW5DZWxsIiwiZW5kVGFnSW5DZWxsIiwic3RhcnRUYWdJblNlbGVjdCIsImVuZFRhZ0luU2VsZWN0Iiwic3RhcnRUYWdJblNlbGVjdEluVGFibGUiLCJlbmRUYWdJblNlbGVjdEluVGFibGUiLCJzdGFydFRhZ0luVGVtcGxhdGUiLCJlbmRUYWdJblRlbXBsYXRlIiwiZW9mSW5UZW1wbGF0ZSIsInRva2VuQWZ0ZXJCb2R5IiwiYXBwZW5kQ29tbWVudFRvUm9vdEh0bWxFbGVtZW50Iiwic3RhcnRUYWdBZnRlckJvZHkiLCJlbmRUYWdBZnRlckJvZHkiLCJzdG9wUGFyc2luZyIsInN0YXJ0VGFnSW5GcmFtZXNldCIsImVuZFRhZ0luRnJhbWVzZXQiLCJzdGFydFRhZ0FmdGVyRnJhbWVzZXQiLCJlbmRUYWdBZnRlckZyYW1lc2V0IiwidG9rZW5BZnRlckFmdGVyQm9keSIsImFwcGVuZENvbW1lbnRUb0RvY3VtZW50Iiwic3RhcnRUYWdBZnRlckFmdGVyQm9keSIsInN0YXJ0VGFnQWZ0ZXJBZnRlckZyYW1lc2V0IiwiUGFyc2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJwZW5kaW5nU2NyaXB0IiwicHJvdG90eXBlIiwicGFyc2UiLCJodG1sIiwiZG9jdW1lbnQiLCJjcmVhdGVEb2N1bWVudCIsIl9ib290c3RyYXAiLCJ0b2tlbml6ZXIiLCJ3cml0ZSIsIl9ydW5QYXJzaW5nTG9vcCIsInBhcnNlRnJhZ21lbnQiLCJmcmFnbWVudENvbnRleHQiLCJjcmVhdGVFbGVtZW50IiwiVEVNUExBVEUiLCJkb2N1bWVudE1vY2siLCJnZXRUYWdOYW1lIiwiX3B1c2hUbXBsSW5zZXJ0aW9uTW9kZSIsIl9pbml0VG9rZW5pemVyRm9yRnJhZ21lbnRQYXJzaW5nIiwiX2luc2VydEZha2VSb290RWxlbWVudCIsIl9yZXNldEluc2VydGlvbk1vZGUiLCJfZmluZEZvcm1JbkZyYWdtZW50Q29udGV4dCIsInJvb3RFbGVtZW50IiwiZ2V0Rmlyc3RDaGlsZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsIl9hZG9wdE5vZGVzIiwic3RvcHBlZCIsImluc2VydGlvbk1vZGUiLCJvcmlnaW5hbEluc2VydGlvbk1vZGUiLCJoZWFkRWxlbWVudCIsImZvcm1FbGVtZW50Iiwib3BlbkVsZW1lbnRzIiwiYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzIiwidG1wbEluc2VydGlvbk1vZGVTdGFjayIsInRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3AiLCJjdXJyZW50VG1wbEluc2VydGlvbk1vZGUiLCJwZW5kaW5nQ2hhcmFjdGVyVG9rZW5zIiwiaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbiIsImZyYW1lc2V0T2siLCJza2lwTmV4dE5ld0xpbmUiLCJmb3N0ZXJQYXJlbnRpbmdFbmFibGVkIiwic2NyaXB0SGFuZGxlciIsIl9zZXR1cFRva2VuaXplckNEQVRBTW9kZSIsInRva2VuIiwiZ2V0TmV4dFRva2VuIiwidHlwZSIsIkhJQkVSTkFUSU9OX1RPS0VOIiwiY2hhcnMiLCJsZW5ndGgiLCJzdWJzdHIiLCJfcHJvY2Vzc0lucHV0VG9rZW4iLCJydW5QYXJzaW5nTG9vcEZvckN1cnJlbnRDaHVuayIsIndyaXRlQ2FsbGJhY2siLCJzY3JpcHQiLCJjdXJyZW50IiwiX2dldEFkanVzdGVkQ3VycmVudEVsZW1lbnQiLCJhbGxvd0NEQVRBIiwiZ2V0TmFtZXNwYWNlVVJJIiwiX2lzSW50ZWdyYXRpb25Qb2ludCIsIl9zd2l0Y2hUb1RleHRQYXJzaW5nIiwiY3VycmVudFRva2VuIiwibmV4dFRva2VuaXplclN0YXRlIiwiX2luc2VydEVsZW1lbnQiLCJzdGF0ZSIsInN3aXRjaFRvUGxhaW50ZXh0UGFyc2luZyIsIk1PREUiLCJQTEFJTlRFWFQiLCJzdGFja1RvcCIsIm5vZGUiLCJGT1JNIiwiZ2V0UGFyZW50Tm9kZSIsInRuIiwiVElUTEUiLCJURVhUQVJFQSIsIlJDREFUQSIsIlNUWUxFIiwiWE1QIiwiSUZSQU1FIiwiTk9FTUJFRCIsIk5PRlJBTUVTIiwiTk9TQ1JJUFQiLCJSQVdURVhUIiwiU0NSSVBUIiwiU0NSSVBUX0RBVEEiLCJfc2V0RG9jdW1lbnRUeXBlIiwic2V0RG9jdW1lbnRUeXBlIiwibmFtZSIsInB1YmxpY0lkIiwic3lzdGVtSWQiLCJfYXR0YWNoRWxlbWVudFRvVHJlZSIsImVsZW1lbnQiLCJfc2hvdWxkRm9zdGVyUGFyZW50T25JbnNlcnRpb24iLCJfZm9zdGVyUGFyZW50RWxlbWVudCIsInBhcmVudCIsImN1cnJlbnRUbXBsQ29udGVudCIsImFwcGVuZENoaWxkIiwiX2FwcGVuZEVsZW1lbnQiLCJuYW1lc3BhY2VVUkkiLCJ0YWdOYW1lIiwiYXR0cnMiLCJwdXNoIiwiX2luc2VydEZha2VFbGVtZW50IiwiX2luc2VydFRlbXBsYXRlIiwidG1wbCIsImNvbnRlbnQiLCJzZXRUZW1wbGF0ZUNvbnRlbnQiLCJfYXBwZW5kQ29tbWVudE5vZGUiLCJjb21tZW50Tm9kZSIsImNyZWF0ZUNvbW1lbnROb2RlIiwiZGF0YSIsIl9pbnNlcnRDaGFyYWN0ZXJzIiwiX2Zvc3RlclBhcmVudFRleHQiLCJpbnNlcnRUZXh0IiwiZG9ub3IiLCJyZWNpcGllbnQiLCJjaGlsZCIsImRldGFjaE5vZGUiLCJfc2hvdWxkUHJvY2Vzc1Rva2VuSW5Gb3JlaWduQ29udGVudCIsIm5zIiwiQU5OT1RBVElPTl9YTUwiLCJNQVRITUwiLCJTVkciLCJpc0NoYXJhY3RlclRva2VuIiwiaXNNYXRoTUxUZXh0U3RhcnRUYWciLCJNR0xZUEgiLCJNQUxJR05NQVJLIiwiX3Byb2Nlc3NUb2tlbiIsIl9wcm9jZXNzVG9rZW5JbkJvZHlNb2RlIiwiX3Byb2Nlc3NUb2tlbkluRm9yZWlnbkNvbnRlbnQiLCJjaGFyYWN0ZXJJbkZvcmVpZ25Db250ZW50IiwibnVsbENoYXJhY3RlckluRm9yZWlnbkNvbnRlbnQiLCJzdGFydFRhZ0luRm9yZWlnbkNvbnRlbnQiLCJlbmRUYWdJbkZvcmVpZ25Db250ZW50IiwiZm9yZWlnbk5TIiwiZ2V0QXR0ckxpc3QiLCJpc0ludGVncmF0aW9uUG9pbnQiLCJfcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMiLCJsaXN0TGVuZ3RoIiwidW5vcGVuSWR4IiwiZW50cnkiLCJlbnRyaWVzIiwiTUFSS0VSX0VOVFJZIiwiY29udGFpbnMiLCJpIiwiX2Nsb3NlVGFibGVDZWxsIiwiZ2VuZXJhdGVJbXBsaWVkRW5kVGFncyIsInBvcFVudGlsVGFibGVDZWxsUG9wcGVkIiwiY2xlYXJUb0xhc3RNYXJrZXIiLCJfY2xvc2VQRWxlbWVudCIsImdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uIiwiUCIsInBvcFVudGlsVGFnTmFtZVBvcHBlZCIsImxhc3QiLCJpdGVtcyIsIm5ld0luc2VydGlvbk1vZGUiLCJIRUFEIiwiU0VMRUNUIiwiX3Jlc2V0SW5zZXJ0aW9uTW9kZUZvclNlbGVjdCIsInNlbGVjdElkeCIsImFuY2VzdG9yIiwibW9kZSIsIl9wb3BUbXBsSW5zZXJ0aW9uTW9kZSIsInBvcCIsIl9pc0VsZW1lbnRDYXVzZXNGb3N0ZXJQYXJlbnRpbmciLCJfZmluZEZvc3RlclBhcmVudGluZ0xvY2F0aW9uIiwibG9jYXRpb24iLCJiZWZvcmVFbGVtZW50Iiwib3BlbkVsZW1lbnQiLCJnZXRUZW1wbGF0ZUNvbnRlbnQiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRUZXh0QmVmb3JlIiwiX2lzU3BlY2lhbEVsZW1lbnQiLCJTUEVDSUFMX0VMRU1FTlRTIiwiYWFPYnRhaW5Gb3JtYXR0aW5nRWxlbWVudEVudHJ5IiwicCIsImZvcm1hdHRpbmdFbGVtZW50RW50cnkiLCJnZXRFbGVtZW50RW50cnlJblNjb3BlV2l0aFRhZ05hbWUiLCJyZW1vdmVFbnRyeSIsImhhc0luU2NvcGUiLCJnZW5lcmljRW5kVGFnSW5Cb2R5IiwiYWFPYnRhaW5GdXJ0aGVzdEJsb2NrIiwiZnVydGhlc3RCbG9jayIsInBvcFVudGlsRWxlbWVudFBvcHBlZCIsImFhSW5uZXJMb29wIiwiZm9ybWF0dGluZ0VsZW1lbnQiLCJsYXN0RWxlbWVudCIsIm5leHRFbGVtZW50IiwiZ2V0Q29tbW9uQW5jZXN0b3IiLCJlbGVtZW50RW50cnkiLCJnZXRFbGVtZW50RW50cnkiLCJjb3VudGVyT3ZlcmZsb3ciLCJzaG91bGRSZW1vdmVGcm9tT3BlbkVsZW1lbnRzIiwicmVtb3ZlIiwiYWFSZWNyZWF0ZUVsZW1lbnRGcm9tRW50cnkiLCJib29rbWFyayIsIm5ld0VsZW1lbnQiLCJyZXBsYWNlIiwiYWFJbnNlcnRMYXN0Tm9kZUluQ29tbW9uQW5jZXN0b3IiLCJjb21tb25BbmNlc3RvciIsImFhUmVwbGFjZUZvcm1hdHRpbmdFbGVtZW50IiwiaW5zZXJ0RWxlbWVudEFmdGVyQm9va21hcmsiLCJpbnNlcnRBZnRlciIsImNhbGxBZG9wdGlvbkFnZW5jeSIsImZvcmNlUXVpcmtzIiwiRE9DVU1FTlRfTU9ERSIsIlFVSVJLUyIsImdldERvY3VtZW50TW9kZSIsInNldERvY3VtZW50TW9kZSIsIkJSIiwiQkFTRSIsIkJBU0VGT05UIiwiQkdTT1VORCIsIkxJTksiLCJNRVRBIiwiaW5zZXJ0TWFya2VyIiwidG1wbENvdW50IiwiaHRtbFN0YXJ0VGFnSW5Cb2R5IiwiYWRvcHRBdHRyaWJ1dGVzIiwiYm9keVN0YXJ0VGFnSW5Cb2R5IiwiYm9keUVsZW1lbnQiLCJ0cnlQZWVrUHJvcGVybHlOZXN0ZWRCb2R5RWxlbWVudCIsImZyYW1lc2V0U3RhcnRUYWdJbkJvZHkiLCJwb3BBbGxVcFRvSHRtbEVsZW1lbnQiLCJhZGRyZXNzU3RhcnRUYWdJbkJvZHkiLCJoYXNJbkJ1dHRvblNjb3BlIiwibnVtYmVyZWRIZWFkZXJTdGFydFRhZ0luQm9keSIsImN1cnJlbnRUYWdOYW1lIiwiSDEiLCJIMiIsIkgzIiwiSDQiLCJINSIsIkg2IiwicHJlU3RhcnRUYWdJbkJvZHkiLCJmb3JtU3RhcnRUYWdJbkJvZHkiLCJpblRlbXBsYXRlIiwibGlzdEl0ZW1TdGFydFRhZ0luQm9keSIsImVsZW1lbnRUbiIsImNsb3NlVG4iLCJMSSIsIkREIiwiRFQiLCJBRERSRVNTIiwiRElWIiwicGxhaW50ZXh0U3RhcnRUYWdJbkJvZHkiLCJidXR0b25TdGFydFRhZ0luQm9keSIsIkJVVFRPTiIsImFTdGFydFRhZ0luQm9keSIsImFjdGl2ZUVsZW1lbnRFbnRyeSIsIkEiLCJwdXNoRWxlbWVudCIsImJTdGFydFRhZ0luQm9keSIsIm5vYnJTdGFydFRhZ0luQm9keSIsIk5PQlIiLCJhcHBsZXRTdGFydFRhZ0luQm9keSIsInRhYmxlU3RhcnRUYWdJbkJvZHkiLCJhcmVhU3RhcnRUYWdJbkJvZHkiLCJpbnB1dFN0YXJ0VGFnSW5Cb2R5IiwiaW5wdXRUeXBlIiwiZ2V0VG9rZW5BdHRyIiwiVFlQRSIsInRvTG93ZXJDYXNlIiwicGFyYW1TdGFydFRhZ0luQm9keSIsImhyU3RhcnRUYWdJbkJvZHkiLCJNRU5VSVRFTSIsImltYWdlU3RhcnRUYWdJbkJvZHkiLCJJTUciLCJ0ZXh0YXJlYVN0YXJ0VGFnSW5Cb2R5IiwieG1wU3RhcnRUYWdJbkJvZHkiLCJpZnJhbWVTdGFydFRhZ0luQm9keSIsIm5vZW1iZWRTdGFydFRhZ0luQm9keSIsInNlbGVjdFN0YXJ0VGFnSW5Cb2R5Iiwib3B0Z3JvdXBTdGFydFRhZ0luQm9keSIsIk9QVElPTiIsInJiU3RhcnRUYWdJbkJvZHkiLCJSVUJZIiwicnRTdGFydFRhZ0luQm9keSIsIlJUQyIsIm1lbnVpdGVtU3RhcnRUYWdJbkJvZHkiLCJtZW51U3RhcnRUYWdJbkJvZHkiLCJtYXRoU3RhcnRUYWdJbkJvZHkiLCJhZGp1c3RUb2tlbk1hdGhNTEF0dHJzIiwiYWRqdXN0VG9rZW5YTUxBdHRycyIsInNlbGZDbG9zaW5nIiwic3ZnU3RhcnRUYWdJbkJvZHkiLCJhZGp1c3RUb2tlblNWR0F0dHJzIiwiZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5IiwiSSIsIlMiLCJCIiwiVSIsIkRMIiwiT0wiLCJVTCIsIkVNIiwiVFQiLCJIUiIsIlJCIiwiUlQiLCJSUCIsIkRJUiIsIk5BViIsIlBSRSIsIkJJRyIsIldCUiIsIk1BSU4iLCJDT0RFIiwiRk9OVCIsIkFSRUEiLCJNQVRIIiwiTUVOVSIsIkFTSURFIiwiU01BTEwiLCJFTUJFRCIsIklOUFVUIiwiUEFSQU0iLCJUUkFDSyIsIklNQUdFIiwiRlJBTUUiLCJDRU5URVIiLCJGSUdVUkUiLCJGT09URVIiLCJIRUFERVIiLCJIR1JPVVAiLCJTVFJJS0UiLCJTVFJPTkciLCJBUFBMRVQiLCJPQkpFQ1QiLCJLRVlHRU4iLCJTT1VSQ0UiLCJERVRBSUxTIiwiQVJUSUNMRSIsIlNFQ1RJT04iLCJTVU1NQVJZIiwiTElTVElORyIsIk1BUlFVRUUiLCJGSUVMRFNFVCIsIk9QVEdST1VQIiwiQkxPQ0tRVU9URSIsIkZJR0NBUFRJT04iLCJib2R5RW5kVGFnSW5Cb2R5IiwiaHRtbEVuZFRhZ0luQm9keSIsImFkZHJlc3NFbmRUYWdJbkJvZHkiLCJmb3JtRW5kVGFnSW5Cb2R5IiwicEVuZFRhZ0luQm9keSIsImxpRW5kVGFnSW5Cb2R5IiwiaGFzSW5MaXN0SXRlbVNjb3BlIiwiZGRFbmRUYWdJbkJvZHkiLCJudW1iZXJlZEhlYWRlckVuZFRhZ0luQm9keSIsImhhc051bWJlcmVkSGVhZGVySW5TY29wZSIsInBvcFVudGlsTnVtYmVyZWRIZWFkZXJQb3BwZWQiLCJhcHBsZXRFbmRUYWdJbkJvZHkiLCJickVuZFRhZ0luQm9keSIsImN1clRuIiwidG9rZW5JblRhYmxlIiwiY2FwdGlvblN0YXJ0VGFnSW5UYWJsZSIsImNsZWFyQmFja1RvVGFibGVDb250ZXh0IiwiY29sZ3JvdXBTdGFydFRhZ0luVGFibGUiLCJjb2xTdGFydFRhZ0luVGFibGUiLCJ0Ym9keVN0YXJ0VGFnSW5UYWJsZSIsInRkU3RhcnRUYWdJblRhYmxlIiwidGFibGVTdGFydFRhZ0luVGFibGUiLCJoYXNJblRhYmxlU2NvcGUiLCJpbnB1dFN0YXJ0VGFnSW5UYWJsZSIsImZvcm1TdGFydFRhZ0luVGFibGUiLCJzYXZlZEZvc3RlclBhcmVudGluZ1N0YXRlIiwiY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0IiwiaGFzVGFibGVCb2R5Q29udGV4dEluVGFibGVTY29wZSIsImNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0IiwiaGFzSW5TZWxlY3RTY29wZSIsInByZXZPcGVuRWxlbWVudCIsInByZXZPcGVuRWxlbWVudFRuIiwiaXNSb290SHRtbEVsZW1lbnRDdXJyZW50IiwiUkVQTEFDRU1FTlRfQ0hBUkFDVEVSIiwiY2F1c2VzRXhpdCIsImN1cnJlbnROcyIsImFkanVzdFRva2VuU1ZHVGFnTmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsU0FBUyxHQUFHQyxPQUFPLGdCQUF2QjtBQUFBLElBQ0lDLGdCQUFnQixHQUFHRCxPQUFPLHdCQUQ5QjtBQUFBLElBRUlFLHFCQUFxQixHQUFHRixPQUFPLDZCQUZuQztBQUFBLElBR0lHLHVCQUF1QixHQUFHSCxPQUFPLDRDQUhyQztBQUFBLElBSUlJLGtCQUFrQixHQUFHSixPQUFPLDRCQUpoQztBQUFBLElBS0lLLFlBQVksR0FBR0wsT0FBTywwQkFMMUI7QUFBQSxJQU1JTSxPQUFPLEdBQUdOLE9BQU8scUJBTnJCO0FBQUEsSUFPSU8sY0FBYyxHQUFHUCxPQUFPLDZCQVA1QjtBQUFBLElBUUlRLE9BQU8sR0FBR1IsT0FBTyxxQkFSckI7QUFBQSxJQVNJUyxJQUFJLEdBQUdULE9BQU8sa0JBVGxCOztBQVlBLElBQUlVLENBQUMsR0FBR0QsSUFBSSxDQUFDRSxTQUFiO0FBQUEsSUFDSUMsRUFBRSxHQUFHSCxJQUFJLENBQUNJLFVBRGQ7QUFBQSxJQUVJQyxLQUFLLEdBQUdMLElBQUksQ0FBQ0ssS0FGakI7QUFJQSxJQUFJQyxlQUFlLEdBQUc7QUFDbEJDLEVBQUFBLFlBQVksRUFBRSxLQURJO0FBRWxCQyxFQUFBQSxXQUFXLEVBQUViO0FBRkssQ0FBdEI7QUFNQSxJQUFJYyxpQkFBaUIsR0FBRyxRQUF4QjtBQUdBLElBQUlDLGtCQUFrQixHQUFHLENBQXpCO0FBQUEsSUFDSUMsa0JBQWtCLEdBQUcsQ0FEekI7QUFJQSxJQUFJQyxZQUFZLEdBQUcsY0FBbkI7QUFBQSxJQUNJQyxnQkFBZ0IsR0FBRyxrQkFEdkI7QUFB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ZSBzdHJpY3QnO1xuXG52YXIgVG9rZW5pemVyID0gcmVxdWlyZSgnLi4vdG9rZW5pemVyJyksXG4gICAgT3BlbkVsZW1lbnRTdGFjayA9IHJlcXVpcmUoJy4vb3Blbl9lbGVtZW50X3N0YWNrJyksXG4gICAgRm9ybWF0dGluZ0VsZW1lbnRMaXN0ID0gcmVxdWlyZSgnLi9mb3JtYXR0aW5nX2VsZW1lbnRfbGlzdCcpLFxuICAgIExvY2F0aW9uSW5mb1BhcnNlck1peGluID0gcmVxdWlyZSgnLi4vZXh0ZW5zaW9ucy9sb2NhdGlvbl9pbmZvL3BhcnNlcl9taXhpbicpLFxuICAgIGRlZmF1bHRUcmVlQWRhcHRlciA9IHJlcXVpcmUoJy4uL3RyZWVfYWRhcHRlcnMvZGVmYXVsdCcpLFxuICAgIG1lcmdlT3B0aW9ucyA9IHJlcXVpcmUoJy4uL3V0aWxzL21lcmdlX29wdGlvbnMnKSxcbiAgICBkb2N0eXBlID0gcmVxdWlyZSgnLi4vY29tbW9uL2RvY3R5cGUnKSxcbiAgICBmb3JlaWduQ29udGVudCA9IHJlcXVpcmUoJy4uL2NvbW1vbi9mb3JlaWduX2NvbnRlbnQnKSxcbiAgICBVTklDT0RFID0gcmVxdWlyZSgnLi4vY29tbW9uL3VuaWNvZGUnKSxcbiAgICBIVE1MID0gcmVxdWlyZSgnLi4vY29tbW9uL2h0bWwnKTtcblxuLy9BbGlhc2VzXG52YXIgJCA9IEhUTUwuVEFHX05BTUVTLFxuICAgIE5TID0gSFRNTC5OQU1FU1BBQ0VTLFxuICAgIEFUVFJTID0gSFRNTC5BVFRSUztcblxudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgICBsb2NhdGlvbkluZm86IGZhbHNlLFxuICAgIHRyZWVBZGFwdGVyOiBkZWZhdWx0VHJlZUFkYXB0ZXJcbn07XG5cbi8vTWlzYyBjb25zdGFudHNcbnZhciBISURERU5fSU5QVVRfVFlQRSA9ICdoaWRkZW4nO1xuXG4vL0Fkb3B0aW9uIGFnZW5jeSBsb29wcyBpdGVyYXRpb24gY291bnRcbnZhciBBQV9PVVRFUl9MT09QX0lURVIgPSA4LFxuICAgIEFBX0lOTkVSX0xPT1BfSVRFUiA9IDM7XG5cbi8vSW5zZXJ0aW9uIG1vZGVzXG52YXIgSU5JVElBTF9NT0RFID0gJ0lOSVRJQUxfTU9ERScsXG4gICAgQkVGT1JFX0hUTUxfTU9ERSA9ICdCRUZPUkVfSFRNTF9NT0RFJyxcbiAgICBCRUZPUkVfSEVBRF9NT0RFID0gJ0JFRk9SRV9IRUFEX01PREUnLFxuICAgIElOX0hFQURfTU9ERSA9ICdJTl9IRUFEX01PREUnLFxuICAgIEFGVEVSX0hFQURfTU9ERSA9ICdBRlRFUl9IRUFEX01PREUnLFxuICAgIElOX0JPRFlfTU9ERSA9ICdJTl9CT0RZX01PREUnLFxuICAgIFRFWFRfTU9ERSA9ICdURVhUX01PREUnLFxuICAgIElOX1RBQkxFX01PREUgPSAnSU5fVEFCTEVfTU9ERScsXG4gICAgSU5fVEFCTEVfVEVYVF9NT0RFID0gJ0lOX1RBQkxFX1RFWFRfTU9ERScsXG4gICAgSU5fQ0FQVElPTl9NT0RFID0gJ0lOX0NBUFRJT05fTU9ERScsXG4gICAgSU5fQ09MVU1OX0dST1VQX01PREUgPSAnSU5fQ09MVU1OX0dST1VQX01PREUnLFxuICAgIElOX1RBQkxFX0JPRFlfTU9ERSA9ICdJTl9UQUJMRV9CT0RZX01PREUnLFxuICAgIElOX1JPV19NT0RFID0gJ0lOX1JPV19NT0RFJyxcbiAgICBJTl9DRUxMX01PREUgPSAnSU5fQ0VMTF9NT0RFJyxcbiAgICBJTl9TRUxFQ1RfTU9ERSA9ICdJTl9TRUxFQ1RfTU9ERScsXG4gICAgSU5fU0VMRUNUX0lOX1RBQkxFX01PREUgPSAnSU5fU0VMRUNUX0lOX1RBQkxFX01PREUnLFxuICAgIElOX1RFTVBMQVRFX01PREUgPSAnSU5fVEVNUExBVEVfTU9ERScsXG4gICAgQUZURVJfQk9EWV9NT0RFID0gJ0FGVEVSX0JPRFlfTU9ERScsXG4gICAgSU5fRlJBTUVTRVRfTU9ERSA9ICdJTl9GUkFNRVNFVF9NT0RFJyxcbiAgICBBRlRFUl9GUkFNRVNFVF9NT0RFID0gJ0FGVEVSX0ZSQU1FU0VUX01PREUnLFxuICAgIEFGVEVSX0FGVEVSX0JPRFlfTU9ERSA9ICdBRlRFUl9BRlRFUl9CT0RZX01PREUnLFxuICAgIEFGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREUgPSAnQUZURVJfQUZURVJfRlJBTUVTRVRfTU9ERSc7XG5cbi8vSW5zZXJ0aW9uIG1vZGUgcmVzZXQgbWFwXG52YXIgSU5TRVJUSU9OX01PREVfUkVTRVRfTUFQID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuSU5TRVJUSU9OX01PREVfUkVTRVRfTUFQWyQuVFJdID0gSU5fUk9XX01PREU7XG5JTlNFUlRJT05fTU9ERV9SRVNFVF9NQVBbJC5UQk9EWV0gPVxuSU5TRVJUSU9OX01PREVfUkVTRVRfTUFQWyQuVEhFQURdID1cbklOU0VSVElPTl9NT0RFX1JFU0VUX01BUFskLlRGT09UXSA9IElOX1RBQkxFX0JPRFlfTU9ERTtcbklOU0VSVElPTl9NT0RFX1JFU0VUX01BUFskLkNBUFRJT05dID0gSU5fQ0FQVElPTl9NT0RFO1xuSU5TRVJUSU9OX01PREVfUkVTRVRfTUFQWyQuQ09MR1JPVVBdID0gSU5fQ09MVU1OX0dST1VQX01PREU7XG5JTlNFUlRJT05fTU9ERV9SRVNFVF9NQVBbJC5UQUJMRV0gPSBJTl9UQUJMRV9NT0RFO1xuSU5TRVJUSU9OX01PREVfUkVTRVRfTUFQWyQuQk9EWV0gPSBJTl9CT0RZX01PREU7XG5JTlNFUlRJT05fTU9ERV9SRVNFVF9NQVBbJC5GUkFNRVNFVF0gPSBJTl9GUkFNRVNFVF9NT0RFO1xuXG4vL1RlbXBsYXRlIGluc2VydGlvbiBtb2RlIHN3aXRjaCBtYXBcbnZhciBURU1QTEFURV9JTlNFUlRJT05fTU9ERV9TV0lUQ0hfTUFQID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuVEVNUExBVEVfSU5TRVJUSU9OX01PREVfU1dJVENIX01BUFskLkNBUFRJT05dID1cblRFTVBMQVRFX0lOU0VSVElPTl9NT0RFX1NXSVRDSF9NQVBbJC5DT0xHUk9VUF0gPVxuVEVNUExBVEVfSU5TRVJUSU9OX01PREVfU1dJVENIX01BUFskLlRCT0RZXSA9XG5URU1QTEFURV9JTlNFUlRJT05fTU9ERV9TV0lUQ0hfTUFQWyQuVEZPT1RdID1cblRFTVBMQVRFX0lOU0VSVElPTl9NT0RFX1NXSVRDSF9NQVBbJC5USEVBRF0gPSBJTl9UQUJMRV9NT0RFO1xuVEVNUExBVEVfSU5TRVJUSU9OX01PREVfU1dJVENIX01BUFskLkNPTF0gPSBJTl9DT0xVTU5fR1JPVVBfTU9ERTtcblRFTVBMQVRFX0lOU0VSVElPTl9NT0RFX1NXSVRDSF9NQVBbJC5UUl0gPSBJTl9UQUJMRV9CT0RZX01PREU7XG5URU1QTEFURV9JTlNFUlRJT05fTU9ERV9TV0lUQ0hfTUFQWyQuVERdID1cblRFTVBMQVRFX0lOU0VSVElPTl9NT0RFX1NXSVRDSF9NQVBbJC5USF0gPSBJTl9ST1dfTU9ERTtcblxuLy9Ub2tlbiBoYW5kbGVycyBtYXAgZm9yIGluc2VydGlvbiBtb2Rlc1xudmFyIF8gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5fW0lOSVRJQUxfTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tJTklUSUFMX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID1cbl9bSU5JVElBTF9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gdG9rZW5JbkluaXRpYWxNb2RlO1xuX1tJTklUSUFMX01PREVdW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5JVElBTF9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50O1xuX1tJTklUSUFMX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGRvY3R5cGVJbkluaXRpYWxNb2RlO1xuX1tJTklUSUFMX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID1cbl9bSU5JVElBTF9NT0RFXVtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl0gPVxuX1tJTklUSUFMX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gdG9rZW5JbkluaXRpYWxNb2RlO1xuXG5fW0JFRk9SRV9IVE1MX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bQkVGT1JFX0hUTUxfTU9ERV1bVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl0gPVxuX1tCRUZPUkVfSFRNTF9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gdG9rZW5CZWZvcmVIdG1sO1xuX1tCRUZPUkVfSFRNTF9NT0RFXVtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0JFRk9SRV9IVE1MX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0JFRk9SRV9IVE1MX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tCRUZPUkVfSFRNTF9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnQmVmb3JlSHRtbDtcbl9bQkVGT1JFX0hUTUxfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnQmVmb3JlSHRtbDtcbl9bQkVGT1JFX0hUTUxfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSB0b2tlbkJlZm9yZUh0bWw7XG5cbl9bQkVGT1JFX0hFQURfTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tCRUZPUkVfSEVBRF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0JFRk9SRV9IRUFEX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPSB0b2tlbkJlZm9yZUhlYWQ7XG5fW0JFRk9SRV9IRUFEX01PREVdW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bQkVGT1JFX0hFQURfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID0gYXBwZW5kQ29tbWVudDtcbl9bQkVGT1JFX0hFQURfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0JFRk9SRV9IRUFEX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdCZWZvcmVIZWFkO1xuX1tCRUZPUkVfSEVBRF9NT0RFXVtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl0gPSBlbmRUYWdCZWZvcmVIZWFkO1xuX1tCRUZPUkVfSEVBRF9NT0RFXVtUb2tlbml6ZXIuRU9GX1RPS0VOXSA9IHRva2VuQmVmb3JlSGVhZDtcblxuX1tJTl9IRUFEX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fSEVBRF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0lOX0hFQURfTU9ERV1bVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXSA9IHRva2VuSW5IZWFkO1xuX1tJTl9IRUFEX01PREVdW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl0gPSBpbnNlcnRDaGFyYWN0ZXJzO1xuX1tJTl9IRUFEX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0lOX0hFQURfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0lOX0hFQURfTU9ERV1bVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl0gPSBzdGFydFRhZ0luSGVhZDtcbl9bSU5fSEVBRF9NT0RFXVtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl0gPSBlbmRUYWdJbkhlYWQ7XG5fW0lOX0hFQURfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSB0b2tlbkluSGVhZDtcblxuX1tBRlRFUl9IRUFEX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bQUZURVJfSEVBRF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0FGVEVSX0hFQURfTU9ERV1bVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXSA9IHRva2VuQWZ0ZXJIZWFkO1xuX1tBRlRFUl9IRUFEX01PREVdW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl0gPSBpbnNlcnRDaGFyYWN0ZXJzO1xuX1tBRlRFUl9IRUFEX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0FGVEVSX0hFQURfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0FGVEVSX0hFQURfTU9ERV1bVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl0gPSBzdGFydFRhZ0FmdGVySGVhZDtcbl9bQUZURVJfSEVBRF9NT0RFXVtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl0gPSBlbmRUYWdBZnRlckhlYWQ7XG5fW0FGVEVSX0hFQURfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSB0b2tlbkFmdGVySGVhZDtcblxuX1tJTl9CT0RZX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fQk9EWV9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9IGNoYXJhY3RlckluQm9keTtcbl9bSU5fQk9EWV9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0lOX0JPRFlfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IHdoaXRlc3BhY2VDaGFyYWN0ZXJJbkJvZHk7XG5fW0lOX0JPRFlfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID0gYXBwZW5kQ29tbWVudDtcbl9bSU5fQk9EWV9NT0RFXVtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fQk9EWV9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5Cb2R5O1xuX1tJTl9CT0RZX01PREVdW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXSA9IGVuZFRhZ0luQm9keTtcbl9bSU5fQk9EWV9NT0RFXVtUb2tlbml6ZXIuRU9GX1RPS0VOXSA9IGVvZkluQm9keTtcblxuX1tURVhUX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bVEVYVF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW1RFWFRfTU9ERV1bVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW1RFWFRfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IGluc2VydENoYXJhY3RlcnM7XG5fW1RFWFRfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID1cbl9bVEVYVF9NT0RFXVtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl0gPVxuX1tURVhUX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW1RFWFRfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5UZXh0O1xuX1tURVhUX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gZW9mSW5UZXh0O1xuXG5fW0lOX1RBQkxFX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fVEFCTEVfTU9ERV1bVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl0gPVxuX1tJTl9UQUJMRV9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID1cbl9bSU5fVEFCTEVfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IGNoYXJhY3RlckluVGFibGU7XG5fW0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tJTl9UQUJMRV9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5UYWJsZTtcbl9bSU5fVEFCTEVfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5UYWJsZTtcbl9bSU5fVEFCTEVfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSBlb2ZJbkJvZHk7XG5cbl9bSU5fVEFCTEVfVEVYVF9NT0RFXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5fW0lOX1RBQkxFX1RFWFRfTU9ERV1bVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl0gPSBjaGFyYWN0ZXJJblRhYmxlVGV4dDtcbl9bSU5fVEFCTEVfVEVYVF9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0lOX1RBQkxFX1RFWFRfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IHdoaXRlc3BhY2VDaGFyYWN0ZXJJblRhYmxlVGV4dDtcbl9bSU5fVEFCTEVfVEVYVF9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPVxuX1tJTl9UQUJMRV9URVhUX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9XG5fW0lOX1RBQkxFX1RFWFRfTU9ERV1bVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl0gPVxuX1tJTl9UQUJMRV9URVhUX01PREVdW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXSA9XG5fW0lOX1RBQkxFX1RFWFRfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSB0b2tlbkluVGFibGVUZXh0O1xuXG5fW0lOX0NBUFRJT05fTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tJTl9DQVBUSU9OX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID0gY2hhcmFjdGVySW5Cb2R5O1xuX1tJTl9DQVBUSU9OX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fQ0FQVElPTl9NT0RFXVtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dID0gd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keTtcbl9bSU5fQ0FQVElPTl9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50O1xuX1tJTl9DQVBUSU9OX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tJTl9DQVBUSU9OX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdJbkNhcHRpb247XG5fW0lOX0NBUFRJT05fTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5DYXB0aW9uO1xuX1tJTl9DQVBUSU9OX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gZW9mSW5Cb2R5O1xuXG5fW0lOX0NPTFVNTl9HUk9VUF9NT0RFXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5fW0lOX0NPTFVNTl9HUk9VUF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0lOX0NPTFVNTl9HUk9VUF9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gdG9rZW5JbkNvbHVtbkdyb3VwO1xuX1tJTl9DT0xVTU5fR1JPVVBfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IGluc2VydENoYXJhY3RlcnM7XG5fW0lOX0NPTFVNTl9HUk9VUF9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50O1xuX1tJTl9DT0xVTU5fR1JPVVBfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0lOX0NPTFVNTl9HUk9VUF9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5Db2x1bW5Hcm91cDtcbl9bSU5fQ09MVU1OX0dST1VQX01PREVdW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXSA9IGVuZFRhZ0luQ29sdW1uR3JvdXA7XG5fW0lOX0NPTFVNTl9HUk9VUF9NT0RFXVtUb2tlbml6ZXIuRU9GX1RPS0VOXSA9IGVvZkluQm9keTtcblxuX1tJTl9UQUJMRV9CT0RZX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fVEFCTEVfQk9EWV9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0lOX1RBQkxFX0JPRFlfTU9ERV1bVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0lOX1RBQkxFX0JPRFlfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IGNoYXJhY3RlckluVGFibGU7XG5fW0lOX1RBQkxFX0JPRFlfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID0gYXBwZW5kQ29tbWVudDtcbl9bSU5fVEFCTEVfQk9EWV9NT0RFXVtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fVEFCTEVfQk9EWV9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5UYWJsZUJvZHk7XG5fW0lOX1RBQkxFX0JPRFlfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5UYWJsZUJvZHk7XG5fW0lOX1RBQkxFX0JPRFlfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSBlb2ZJbkJvZHk7XG5cbl9bSU5fUk9XX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fUk9XX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID1cbl9bSU5fUk9XX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPVxuX1tJTl9ST1dfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IGNoYXJhY3RlckluVGFibGU7XG5fW0lOX1JPV19NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50O1xuX1tJTl9ST1dfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0lOX1JPV19NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5Sb3c7XG5fW0lOX1JPV19NT0RFXVtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl0gPSBlbmRUYWdJblJvdztcbl9bSU5fUk9XX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gZW9mSW5Cb2R5O1xuXG5fW0lOX0NFTExfTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tJTl9DRUxMX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID0gY2hhcmFjdGVySW5Cb2R5O1xuX1tJTl9DRUxMX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fQ0VMTF9NT0RFXVtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dID0gd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keTtcbl9bSU5fQ0VMTF9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50O1xuX1tJTl9DRUxMX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tJTl9DRUxMX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdJbkNlbGw7XG5fW0lOX0NFTExfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5DZWxsO1xuX1tJTl9DRUxMX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gZW9mSW5Cb2R5O1xuXG5fW0lOX1NFTEVDVF9NT0RFXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5fW0lOX1NFTEVDVF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9IGluc2VydENoYXJhY3RlcnM7XG5fW0lOX1NFTEVDVF9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0lOX1NFTEVDVF9NT0RFXVtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dID0gaW5zZXJ0Q2hhcmFjdGVycztcbl9bSU5fU0VMRUNUX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0lOX1NFTEVDVF9NT0RFXVtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fU0VMRUNUX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdJblNlbGVjdDtcbl9bSU5fU0VMRUNUX01PREVdW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXSA9IGVuZFRhZ0luU2VsZWN0O1xuX1tJTl9TRUxFQ1RfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSBlb2ZJbkJvZHk7XG5cbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID0gaW5zZXJ0Q2hhcmFjdGVycztcbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl0gPSBpbnNlcnRDaGFyYWN0ZXJzO1xuX1tJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID0gYXBwZW5kQ29tbWVudDtcbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERV1bVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTl0gPSBzdGFydFRhZ0luU2VsZWN0SW5UYWJsZTtcbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXSA9IGVuZFRhZ0luU2VsZWN0SW5UYWJsZTtcbl9bSU5fU0VMRUNUX0lOX1RBQkxFX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gZW9mSW5Cb2R5O1xuXG5fW0lOX1RFTVBMQVRFX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bSU5fVEVNUExBVEVfTU9ERV1bVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl0gPSBjaGFyYWN0ZXJJbkJvZHk7XG5fW0lOX1RFTVBMQVRFX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fVEVNUExBVEVfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IHdoaXRlc3BhY2VDaGFyYWN0ZXJJbkJvZHk7XG5fW0lOX1RFTVBMQVRFX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0lOX1RFTVBMQVRFX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tJTl9URU1QTEFURV9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5UZW1wbGF0ZTtcbl9bSU5fVEVNUExBVEVfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5UZW1wbGF0ZTtcbl9bSU5fVEVNUExBVEVfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSBlb2ZJblRlbXBsYXRlO1xuXG5fW0FGVEVSX0JPRFlfTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tBRlRFUl9CT0RZX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID1cbl9bQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gdG9rZW5BZnRlckJvZHk7XG5fW0FGVEVSX0JPRFlfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IHdoaXRlc3BhY2VDaGFyYWN0ZXJJbkJvZHk7XG5fW0FGVEVSX0JPRFlfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID0gYXBwZW5kQ29tbWVudFRvUm9vdEh0bWxFbGVtZW50O1xuX1tBRlRFUl9CT0RZX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tBRlRFUl9CT0RZX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdBZnRlckJvZHk7XG5fW0FGVEVSX0JPRFlfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnQWZ0ZXJCb2R5O1xuX1tBRlRFUl9CT0RZX01PREVdW1Rva2VuaXplci5FT0ZfVE9LRU5dID0gc3RvcFBhcnNpbmc7XG5cbl9bSU5fRlJBTUVTRVRfTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tJTl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOXSA9XG5fW0lOX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5OVUxMX0NIQVJBQ1RFUl9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bSU5fRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOXSA9IGluc2VydENoYXJhY3RlcnM7XG5fW0lOX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5DT01NRU5UX1RPS0VOXSA9IGFwcGVuZENvbW1lbnQ7XG5fW0lOX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5ET0NUWVBFX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tJTl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnSW5GcmFtZXNldDtcbl9bSU5fRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gZW5kVGFnSW5GcmFtZXNldDtcbl9bSU5fRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLkVPRl9UT0tFTl0gPSBzdG9wUGFyc2luZztcblxuX1tBRlRFUl9GUkFNRVNFVF9NT0RFXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5fW0FGVEVSX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID1cbl9bQUZURVJfRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLk5VTExfQ0hBUkFDVEVSX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tBRlRFUl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dID0gaW5zZXJ0Q2hhcmFjdGVycztcbl9bQUZURVJfRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLkNPTU1FTlRfVE9LRU5dID0gYXBwZW5kQ29tbWVudDtcbl9bQUZURVJfRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0FGVEVSX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdBZnRlckZyYW1lc2V0O1xuX1tBRlRFUl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuRU5EX1RBR19UT0tFTl0gPSBlbmRUYWdBZnRlckZyYW1lc2V0O1xuX1tBRlRFUl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuRU9GX1RPS0VOXSA9IHN0b3BQYXJzaW5nO1xuXG5fW0FGVEVSX0FGVEVSX0JPRFlfTU9ERV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuX1tBRlRFUl9BRlRFUl9CT0RZX01PREVdW1Rva2VuaXplci5DSEFSQUNURVJfVE9LRU5dID0gdG9rZW5BZnRlckFmdGVyQm9keTtcbl9bQUZURVJfQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gdG9rZW5BZnRlckFmdGVyQm9keTtcbl9bQUZURVJfQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuV0hJVEVTUEFDRV9DSEFSQUNURVJfVE9LRU5dID0gd2hpdGVzcGFjZUNoYXJhY3RlckluQm9keTtcbl9bQUZURVJfQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50VG9Eb2N1bWVudDtcbl9bQUZURVJfQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuRE9DVFlQRV9UT0tFTl0gPSBpZ25vcmVUb2tlbjtcbl9bQUZURVJfQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOXSA9IHN0YXJ0VGFnQWZ0ZXJBZnRlckJvZHk7XG5fW0FGVEVSX0FGVEVSX0JPRFlfTU9ERV1bVG9rZW5pemVyLkVORF9UQUdfVE9LRU5dID0gdG9rZW5BZnRlckFmdGVyQm9keTtcbl9bQUZURVJfQUZURVJfQk9EWV9NT0RFXVtUb2tlbml6ZXIuRU9GX1RPS0VOXSA9IHN0b3BQYXJzaW5nO1xuXG5fW0FGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbl9bQUZURVJfQUZURVJfRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTl0gPVxuX1tBRlRFUl9BRlRFUl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0FGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTl0gPSB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5O1xuX1tBRlRFUl9BRlRFUl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTl0gPSBhcHBlbmRDb21tZW50VG9Eb2N1bWVudDtcbl9bQUZURVJfQUZURVJfRlJBTUVTRVRfTU9ERV1bVG9rZW5pemVyLkRPQ1RZUEVfVE9LRU5dID0gaWdub3JlVG9rZW47XG5fW0FGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5TVEFSVF9UQUdfVE9LRU5dID0gc3RhcnRUYWdBZnRlckFmdGVyRnJhbWVzZXQ7XG5fW0FGVEVSX0FGVEVSX0ZSQU1FU0VUX01PREVdW1Rva2VuaXplci5FTkRfVEFHX1RPS0VOXSA9IGlnbm9yZVRva2VuO1xuX1tBRlRFUl9BRlRFUl9GUkFNRVNFVF9NT0RFXVtUb2tlbml6ZXIuRU9GX1RPS0VOXSA9IHN0b3BQYXJzaW5nO1xuXG5cbi8vUGFyc2VyXG52YXIgUGFyc2VyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhERUZBVUxUX09QVElPTlMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy50cmVlQWRhcHRlciA9IHRoaXMub3B0aW9ucy50cmVlQWRhcHRlcjtcbiAgICB0aGlzLnBlbmRpbmdTY3JpcHQgPSBudWxsO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbkluZm8pXG4gICAgICAgIG5ldyBMb2NhdGlvbkluZm9QYXJzZXJNaXhpbih0aGlzKTtcbn07XG5cbi8vIEFQSVxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChodG1sKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy50cmVlQWRhcHRlci5jcmVhdGVEb2N1bWVudCgpO1xuXG4gICAgdGhpcy5fYm9vdHN0cmFwKGRvY3VtZW50LCBudWxsKTtcbiAgICB0aGlzLnRva2VuaXplci53cml0ZShodG1sLCB0cnVlKTtcbiAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcChudWxsKTtcblxuICAgIHJldHVybiBkb2N1bWVudDtcbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2VGcmFnbWVudCA9IGZ1bmN0aW9uIChodG1sLCBmcmFnbWVudENvbnRleHQpIHtcbiAgICAvL05PVEU6IHVzZSA8dGVtcGxhdGU+IGVsZW1lbnQgYXMgYSBmcmFnbWVudCBjb250ZXh0IGlmIGNvbnRleHQgZWxlbWVudCB3YXMgbm90IHByb3ZpZGVkLFxuICAgIC8vc28gd2Ugd2lsbCBwYXJzZSBpbiBcImZvcmdpdmluZ1wiIG1hbm5lclxuICAgIGlmICghZnJhZ21lbnRDb250ZXh0KVxuICAgICAgICBmcmFnbWVudENvbnRleHQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQoJC5URU1QTEFURSwgTlMuSFRNTCwgW10pO1xuXG4gICAgLy9OT1RFOiBjcmVhdGUgZmFrZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgdXNlZCBhcyAnZG9jdW1lbnQnIGZvciBmcmFnbWVudCBwYXJzaW5nLlxuICAgIC8vVGhpcyBpcyBpbXBvcnRhbnQgZm9yIGpzZG9tIHRoZXJlICdkb2N1bWVudCcgY2FuJ3QgYmUgcmVjcmVhdGVkLCB0aGVyZWZvcmVcbiAgICAvL2ZyYWdtZW50IHBhcnNpbmcgY2F1c2VzIG1lc3Npbmcgb2YgdGhlIG1haW4gYGRvY3VtZW50YC5cbiAgICB2YXIgZG9jdW1lbnRNb2NrID0gdGhpcy50cmVlQWRhcHRlci5jcmVhdGVFbGVtZW50KCdkb2N1bWVudG1vY2snLCBOUy5IVE1MLCBbXSk7XG5cbiAgICB0aGlzLl9ib290c3RyYXAoZG9jdW1lbnRNb2NrLCBmcmFnbWVudENvbnRleHQpO1xuXG4gICAgaWYgKHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShmcmFnbWVudENvbnRleHQpID09PSAkLlRFTVBMQVRFKVxuICAgICAgICB0aGlzLl9wdXNoVG1wbEluc2VydGlvbk1vZGUoSU5fVEVNUExBVEVfTU9ERSk7XG5cbiAgICB0aGlzLl9pbml0VG9rZW5pemVyRm9yRnJhZ21lbnRQYXJzaW5nKCk7XG4gICAgdGhpcy5faW5zZXJ0RmFrZVJvb3RFbGVtZW50KCk7XG4gICAgdGhpcy5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgdGhpcy5fZmluZEZvcm1JbkZyYWdtZW50Q29udGV4dCgpO1xuICAgIHRoaXMudG9rZW5pemVyLndyaXRlKGh0bWwsIHRydWUpO1xuICAgIHRoaXMuX3J1blBhcnNpbmdMb29wKG51bGwpO1xuXG4gICAgdmFyIHJvb3RFbGVtZW50ID0gdGhpcy50cmVlQWRhcHRlci5nZXRGaXJzdENoaWxkKGRvY3VtZW50TW9jayksXG4gICAgICAgIGZyYWdtZW50ID0gdGhpcy50cmVlQWRhcHRlci5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICB0aGlzLl9hZG9wdE5vZGVzKHJvb3RFbGVtZW50LCBmcmFnbWVudCk7XG5cbiAgICByZXR1cm4gZnJhZ21lbnQ7XG59O1xuXG4vL0Jvb3RzdHJhcCBwYXJzZXJcblBhcnNlci5wcm90b3R5cGUuX2Jvb3RzdHJhcCA9IGZ1bmN0aW9uIChkb2N1bWVudCwgZnJhZ21lbnRDb250ZXh0KSB7XG4gICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKHRoaXMub3B0aW9ucyk7XG5cbiAgICB0aGlzLnN0b3BwZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IElOSVRJQUxfTU9ERTtcbiAgICB0aGlzLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9ICcnO1xuXG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICAgIHRoaXMuZnJhZ21lbnRDb250ZXh0ID0gZnJhZ21lbnRDb250ZXh0O1xuXG4gICAgdGhpcy5oZWFkRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5mb3JtRWxlbWVudCA9IG51bGw7XG5cbiAgICB0aGlzLm9wZW5FbGVtZW50cyA9IG5ldyBPcGVuRWxlbWVudFN0YWNrKHRoaXMuZG9jdW1lbnQsIHRoaXMudHJlZUFkYXB0ZXIpO1xuICAgIHRoaXMuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzID0gbmV3IEZvcm1hdHRpbmdFbGVtZW50TGlzdCh0aGlzLnRyZWVBZGFwdGVyKTtcblxuICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFjayA9IFtdO1xuICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFja1RvcCA9IC0xO1xuICAgIHRoaXMuY3VycmVudFRtcGxJbnNlcnRpb25Nb2RlID0gbnVsbDtcblxuICAgIHRoaXMucGVuZGluZ0NoYXJhY3RlclRva2VucyA9IFtdO1xuICAgIHRoaXMuaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbiA9IGZhbHNlO1xuXG4gICAgdGhpcy5mcmFtZXNldE9rID0gdHJ1ZTtcbiAgICB0aGlzLnNraXBOZXh0TmV3TGluZSA9IGZhbHNlO1xuICAgIHRoaXMuZm9zdGVyUGFyZW50aW5nRW5hYmxlZCA9IGZhbHNlO1xufTtcblxuLy9QYXJzaW5nIGxvb3BcblBhcnNlci5wcm90b3R5cGUuX3J1blBhcnNpbmdMb29wICA9IGZ1bmN0aW9uIChzY3JpcHRIYW5kbGVyKSB7XG4gICAgd2hpbGUgKCF0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgdGhpcy5fc2V0dXBUb2tlbml6ZXJDREFUQU1vZGUoKTtcblxuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2VuaXplci5nZXROZXh0VG9rZW4oKTtcblxuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLkhJQkVSTkFUSU9OX1RPS0VOKVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgaWYgKHRoaXMuc2tpcE5leHROZXdMaW5lKSB7XG4gICAgICAgICAgICB0aGlzLnNraXBOZXh0TmV3TGluZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLldISVRFU1BBQ0VfQ0hBUkFDVEVSX1RPS0VOICYmIHRva2VuLmNoYXJzWzBdID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5jaGFycy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgdG9rZW4uY2hhcnMgPSB0b2tlbi5jaGFycy5zdWJzdHIoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wcm9jZXNzSW5wdXRUb2tlbih0b2tlbik7XG5cbiAgICAgICAgaWYgKHNjcmlwdEhhbmRsZXIgJiYgdGhpcy5wZW5kaW5nU2NyaXB0KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5ydW5QYXJzaW5nTG9vcEZvckN1cnJlbnRDaHVuayA9IGZ1bmN0aW9uICh3cml0ZUNhbGxiYWNrLCBzY3JpcHRIYW5kbGVyKSB7XG4gICAgdGhpcy5fcnVuUGFyc2luZ0xvb3Aoc2NyaXB0SGFuZGxlcik7XG5cbiAgICBpZiAoc2NyaXB0SGFuZGxlciAmJiB0aGlzLnBlbmRpbmdTY3JpcHQpIHtcbiAgICAgICAgdmFyIHNjcmlwdCA9IHRoaXMucGVuZGluZ1NjcmlwdDtcblxuICAgICAgICB0aGlzLnBlbmRpbmdTY3JpcHQgPSBudWxsO1xuXG4gICAgICAgIHNjcmlwdEhhbmRsZXIoc2NyaXB0KTtcblxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHdyaXRlQ2FsbGJhY2spXG4gICAgICAgIHdyaXRlQ2FsbGJhY2soKTtcbn07XG5cbi8vVGV4dCBwYXJzaW5nXG5QYXJzZXIucHJvdG90eXBlLl9zZXR1cFRva2VuaXplckNEQVRBTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuX2dldEFkanVzdGVkQ3VycmVudEVsZW1lbnQoKTtcblxuICAgIHRoaXMudG9rZW5pemVyLmFsbG93Q0RBVEEgPSBjdXJyZW50ICYmIGN1cnJlbnQgIT09IHRoaXMuZG9jdW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoY3VycmVudCkgIT09IE5TLkhUTUwgJiYgIXRoaXMuX2lzSW50ZWdyYXRpb25Qb2ludChjdXJyZW50KTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3N3aXRjaFRvVGV4dFBhcnNpbmcgPSBmdW5jdGlvbiAoY3VycmVudFRva2VuLCBuZXh0VG9rZW5pemVyU3RhdGUpIHtcbiAgICB0aGlzLl9pbnNlcnRFbGVtZW50KGN1cnJlbnRUb2tlbiwgTlMuSFRNTCk7XG4gICAgdGhpcy50b2tlbml6ZXIuc3RhdGUgPSBuZXh0VG9rZW5pemVyU3RhdGU7XG4gICAgdGhpcy5vcmlnaW5hbEluc2VydGlvbk1vZGUgPSB0aGlzLmluc2VydGlvbk1vZGU7XG4gICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gVEVYVF9NT0RFO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5zd2l0Y2hUb1BsYWludGV4dFBhcnNpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gVEVYVF9NT0RFO1xuICAgIHRoaXMub3JpZ2luYWxJbnNlcnRpb25Nb2RlID0gSU5fQk9EWV9NT0RFO1xuICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gVG9rZW5pemVyLk1PREUuUExBSU5URVhUO1xufTtcblxuLy9GcmFnbWVudCBwYXJzaW5nXG5QYXJzZXIucHJvdG90eXBlLl9nZXRBZGp1c3RlZEN1cnJlbnRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm9wZW5FbGVtZW50cy5zdGFja1RvcCA9PT0gMCAmJiB0aGlzLmZyYWdtZW50Q29udGV4dCA/XG4gICAgICAgIHRoaXMuZnJhZ21lbnRDb250ZXh0IDpcbiAgICAgICAgdGhpcy5vcGVuRWxlbWVudHMuY3VycmVudDtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2ZpbmRGb3JtSW5GcmFnbWVudENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLmZyYWdtZW50Q29udGV4dDtcblxuICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShub2RlKSA9PT0gJC5GT1JNKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1FbGVtZW50ID0gbm9kZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZSA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgICB9IHdoaWxlIChub2RlKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2luaXRUb2tlbml6ZXJGb3JGcmFnbWVudFBhcnNpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHRoaXMuZnJhZ21lbnRDb250ZXh0KSA9PT0gTlMuSFRNTCkge1xuICAgICAgICB2YXIgdG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUodGhpcy5mcmFnbWVudENvbnRleHQpO1xuXG4gICAgICAgIGlmICh0biA9PT0gJC5USVRMRSB8fCB0biA9PT0gJC5URVhUQVJFQSlcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gVG9rZW5pemVyLk1PREUuUkNEQVRBO1xuXG4gICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlNUWUxFIHx8IHRuID09PSAkLlhNUCB8fCB0biA9PT0gJC5JRlJBTUUgfHxcbiAgICAgICAgICAgICAgICAgdG4gPT09ICQuTk9FTUJFRCB8fCB0biA9PT0gJC5OT0ZSQU1FUyB8fCB0biA9PT0gJC5OT1NDUklQVClcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gVG9rZW5pemVyLk1PREUuUkFXVEVYVDtcblxuICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5TQ1JJUFQpXG4gICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplci5NT0RFLlNDUklQVF9EQVRBO1xuXG4gICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlBMQUlOVEVYVClcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gVG9rZW5pemVyLk1PREUuUExBSU5URVhUO1xuICAgIH1cbn07XG5cbi8vVHJlZSBtdXRhdGlvblxuUGFyc2VyLnByb3RvdHlwZS5fc2V0RG9jdW1lbnRUeXBlID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdGhpcy50cmVlQWRhcHRlci5zZXREb2N1bWVudFR5cGUodGhpcy5kb2N1bWVudCwgdG9rZW4ubmFtZSwgdG9rZW4ucHVibGljSWQsIHRva2VuLnN5c3RlbUlkKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2F0dGFjaEVsZW1lbnRUb1RyZWUgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIGlmICh0aGlzLl9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbigpKVxuICAgICAgICB0aGlzLl9mb3N0ZXJQYXJlbnRFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgZWxzZSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLm9wZW5FbGVtZW50cy5jdXJyZW50VG1wbENvbnRlbnQgfHwgdGhpcy5vcGVuRWxlbWVudHMuY3VycmVudDtcblxuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKHBhcmVudCwgZWxlbWVudCk7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fYXBwZW5kRWxlbWVudCA9IGZ1bmN0aW9uICh0b2tlbiwgbmFtZXNwYWNlVVJJKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodG9rZW4udGFnTmFtZSwgbmFtZXNwYWNlVVJJLCB0b2tlbi5hdHRycyk7XG5cbiAgICB0aGlzLl9hdHRhY2hFbGVtZW50VG9UcmVlKGVsZW1lbnQpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5faW5zZXJ0RWxlbWVudCA9IGZ1bmN0aW9uICh0b2tlbiwgbmFtZXNwYWNlVVJJKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodG9rZW4udGFnTmFtZSwgbmFtZXNwYWNlVVJJLCB0b2tlbi5hdHRycyk7XG5cbiAgICB0aGlzLl9hdHRhY2hFbGVtZW50VG9UcmVlKGVsZW1lbnQpO1xuICAgIHRoaXMub3BlbkVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9pbnNlcnRGYWtlRWxlbWVudCA9IGZ1bmN0aW9uICh0YWdOYW1lKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgTlMuSFRNTCwgW10pO1xuXG4gICAgdGhpcy5fYXR0YWNoRWxlbWVudFRvVHJlZShlbGVtZW50KTtcbiAgICB0aGlzLm9wZW5FbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5faW5zZXJ0VGVtcGxhdGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICB2YXIgdG1wbCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0b2tlbi50YWdOYW1lLCBOUy5IVE1MLCB0b2tlbi5hdHRycyksXG4gICAgICAgIGNvbnRlbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgIHRoaXMudHJlZUFkYXB0ZXIuc2V0VGVtcGxhdGVDb250ZW50KHRtcGwsIGNvbnRlbnQpO1xuICAgIHRoaXMuX2F0dGFjaEVsZW1lbnRUb1RyZWUodG1wbCk7XG4gICAgdGhpcy5vcGVuRWxlbWVudHMucHVzaCh0bXBsKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2luc2VydEZha2VSb290RWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCgkLkhUTUwsIE5TLkhUTUwsIFtdKTtcblxuICAgIHRoaXMudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQodGhpcy5vcGVuRWxlbWVudHMuY3VycmVudCwgZWxlbWVudCk7XG4gICAgdGhpcy5vcGVuRWxlbWVudHMucHVzaChlbGVtZW50KTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2FwcGVuZENvbW1lbnROb2RlID0gZnVuY3Rpb24gKHRva2VuLCBwYXJlbnQpIHtcbiAgICB2YXIgY29tbWVudE5vZGUgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUNvbW1lbnROb2RlKHRva2VuLmRhdGEpO1xuXG4gICAgdGhpcy50cmVlQWRhcHRlci5hcHBlbmRDaGlsZChwYXJlbnQsIGNvbW1lbnROb2RlKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2luc2VydENoYXJhY3RlcnMgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodGhpcy5fc2hvdWxkRm9zdGVyUGFyZW50T25JbnNlcnRpb24oKSlcbiAgICAgICAgdGhpcy5fZm9zdGVyUGFyZW50VGV4dCh0b2tlbi5jaGFycyk7XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnRUbXBsQ29udGVudCB8fCB0aGlzLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuXG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0VGV4dChwYXJlbnQsIHRva2VuLmNoYXJzKTtcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9hZG9wdE5vZGVzID0gZnVuY3Rpb24gKGRvbm9yLCByZWNpcGllbnQpIHtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLnRyZWVBZGFwdGVyLmdldEZpcnN0Q2hpbGQoZG9ub3IpO1xuXG4gICAgICAgIGlmICghY2hpbGQpXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmRldGFjaE5vZGUoY2hpbGQpO1xuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKHJlY2lwaWVudCwgY2hpbGQpO1xuICAgIH1cbn07XG5cbi8vVG9rZW4gcHJvY2Vzc2luZ1xuUGFyc2VyLnByb3RvdHlwZS5fc2hvdWxkUHJvY2Vzc1Rva2VuSW5Gb3JlaWduQ29udGVudCA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5fZ2V0QWRqdXN0ZWRDdXJyZW50RWxlbWVudCgpO1xuXG4gICAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQgPT09IHRoaXMuZG9jdW1lbnQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGN1cnJlbnQpO1xuXG4gICAgaWYgKG5zID09PSBOUy5IVE1MKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAodGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGN1cnJlbnQpID09PSAkLkFOTk9UQVRJT05fWE1MICYmIG5zID09PSBOUy5NQVRITUwgJiZcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLlNUQVJUX1RBR19UT0tFTiAmJiB0b2tlbi50YWdOYW1lID09PSAkLlNWRylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGlzQ2hhcmFjdGVyVG9rZW4gPSB0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuQ0hBUkFDVEVSX1RPS0VOIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU4gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuLnR5cGUgPT09IFRva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTixcbiAgICAgICAgaXNNYXRoTUxUZXh0U3RhcnRUYWcgPSB0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4udGFnTmFtZSAhPT0gJC5NR0xZUEggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbi50YWdOYW1lICE9PSAkLk1BTElHTk1BUks7XG5cbiAgICBpZiAoKGlzTWF0aE1MVGV4dFN0YXJ0VGFnIHx8IGlzQ2hhcmFjdGVyVG9rZW4pICYmIHRoaXMuX2lzSW50ZWdyYXRpb25Qb2ludChjdXJyZW50LCBOUy5NQVRITUwpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5TVEFSVF9UQUdfVE9LRU4gfHwgaXNDaGFyYWN0ZXJUb2tlbikgJiYgdGhpcy5faXNJbnRlZ3JhdGlvblBvaW50KGN1cnJlbnQsIE5TLkhUTUwpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gdG9rZW4udHlwZSAhPT0gVG9rZW5pemVyLkVPRl9UT0tFTjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3Byb2Nlc3NUb2tlbiA9IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIF9bdGhpcy5pbnNlcnRpb25Nb2RlXVt0b2tlbi50eXBlXSh0aGlzLCB0b2tlbik7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9wcm9jZXNzVG9rZW5JbkJvZHlNb2RlID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgX1tJTl9CT0RZX01PREVdW3Rva2VuLnR5cGVdKHRoaXMsIHRva2VuKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3Byb2Nlc3NUb2tlbkluRm9yZWlnbkNvbnRlbnQgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLkNIQVJBQ1RFUl9UT0tFTilcbiAgICAgICAgY2hhcmFjdGVySW5Gb3JlaWduQ29udGVudCh0aGlzLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuTlVMTF9DSEFSQUNURVJfVE9LRU4pXG4gICAgICAgIG51bGxDaGFyYWN0ZXJJbkZvcmVpZ25Db250ZW50KHRoaXMsIHRva2VuKTtcblxuICAgIGVsc2UgaWYgKHRva2VuLnR5cGUgPT09IFRva2VuaXplci5XSElURVNQQUNFX0NIQVJBQ1RFUl9UT0tFTilcbiAgICAgICAgaW5zZXJ0Q2hhcmFjdGVycyh0aGlzLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuQ09NTUVOVF9UT0tFTilcbiAgICAgICAgYXBwZW5kQ29tbWVudCh0aGlzLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSBUb2tlbml6ZXIuU1RBUlRfVEFHX1RPS0VOKVxuICAgICAgICBzdGFydFRhZ0luRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xuXG4gICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gVG9rZW5pemVyLkVORF9UQUdfVE9LRU4pXG4gICAgICAgIGVuZFRhZ0luRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fcHJvY2Vzc0lucHV0VG9rZW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICBpZiAodGhpcy5fc2hvdWxkUHJvY2Vzc1Rva2VuSW5Gb3JlaWduQ29udGVudCh0b2tlbikpXG4gICAgICAgIHRoaXMuX3Byb2Nlc3NUb2tlbkluRm9yZWlnbkNvbnRlbnQodG9rZW4pO1xuXG4gICAgZWxzZVxuICAgICAgICB0aGlzLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufTtcblxuLy9JbnRlZ3JhdGlvbiBwb2ludHNcblBhcnNlci5wcm90b3R5cGUuX2lzSW50ZWdyYXRpb25Qb2ludCA9IGZ1bmN0aW9uIChlbGVtZW50LCBmb3JlaWduTlMpIHtcbiAgICB2YXIgdG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoZWxlbWVudCksXG4gICAgICAgIG5zID0gdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoZWxlbWVudCksXG4gICAgICAgIGF0dHJzID0gdGhpcy50cmVlQWRhcHRlci5nZXRBdHRyTGlzdChlbGVtZW50KTtcblxuICAgIHJldHVybiBmb3JlaWduQ29udGVudC5pc0ludGVncmF0aW9uUG9pbnQodG4sIG5zLCBhdHRycywgZm9yZWlnbk5TKTtcbn07XG5cbi8vQWN0aXZlIGZvcm1hdHRpbmcgZWxlbWVudHMgcmVjb25zdHJ1Y3Rpb25cblBhcnNlci5wcm90b3R5cGUuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsaXN0TGVuZ3RoID0gdGhpcy5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMubGVuZ3RoO1xuXG4gICAgaWYgKGxpc3RMZW5ndGgpIHtcbiAgICAgICAgdmFyIHVub3BlbklkeCA9IGxpc3RMZW5ndGgsXG4gICAgICAgICAgICBlbnRyeSA9IG51bGw7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdW5vcGVuSWR4LS07XG4gICAgICAgICAgICBlbnRyeSA9IHRoaXMuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmVudHJpZXNbdW5vcGVuSWR4XTtcblxuICAgICAgICAgICAgaWYgKGVudHJ5LnR5cGUgPT09IEZvcm1hdHRpbmdFbGVtZW50TGlzdC5NQVJLRVJfRU5UUlkgfHwgdGhpcy5vcGVuRWxlbWVudHMuY29udGFpbnMoZW50cnkuZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICB1bm9wZW5JZHgrKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAodW5vcGVuSWR4ID4gMCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHVub3BlbklkeDsgaSA8IGxpc3RMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZW50cnkgPSB0aGlzLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5lbnRyaWVzW2ldO1xuICAgICAgICAgICAgdGhpcy5faW5zZXJ0RWxlbWVudChlbnRyeS50b2tlbiwgdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoZW50cnkuZWxlbWVudCkpO1xuICAgICAgICAgICAgZW50cnkuZWxlbWVudCA9IHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vL0Nsb3NlIGVsZW1lbnRzXG5QYXJzZXIucHJvdG90eXBlLl9jbG9zZVRhYmxlQ2VsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgdGhpcy5vcGVuRWxlbWVudHMucG9wVW50aWxUYWJsZUNlbGxQb3BwZWQoKTtcbiAgICB0aGlzLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IElOX1JPV19NT0RFO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fY2xvc2VQRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbigkLlApO1xuICAgIHRoaXMub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlApO1xufTtcblxuLy9JbnNlcnRpb24gbW9kZXNcblBhcnNlci5wcm90b3R5cGUuX3Jlc2V0SW5zZXJ0aW9uTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5vcGVuRWxlbWVudHMuc3RhY2tUb3AsIGxhc3QgPSBmYWxzZTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLm9wZW5FbGVtZW50cy5pdGVtc1tpXTtcblxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgbGFzdCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmZyYWdtZW50Q29udGV4dClcbiAgICAgICAgICAgICAgICBlbGVtZW50ID0gdGhpcy5mcmFnbWVudENvbnRleHQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoZWxlbWVudCksXG4gICAgICAgICAgICBuZXdJbnNlcnRpb25Nb2RlID0gSU5TRVJUSU9OX01PREVfUkVTRVRfTUFQW3RuXTtcblxuICAgICAgICBpZiAobmV3SW5zZXJ0aW9uTW9kZSkge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gbmV3SW5zZXJ0aW9uTW9kZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAoIWxhc3QgJiYgKHRuID09PSAkLlREIHx8IHRuID09PSAkLlRIKSkge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSU5fQ0VMTF9NT0RFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmICghbGFzdCAmJiB0biA9PT0gJC5IRUFEKSB7XG4gICAgICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJTl9IRUFEX01PREU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlNFTEVDVCkge1xuICAgICAgICAgICAgdGhpcy5fcmVzZXRJbnNlcnRpb25Nb2RlRm9yU2VsZWN0KGkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSkge1xuICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gdGhpcy5jdXJyZW50VG1wbEluc2VydGlvbk1vZGU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkhUTUwpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IHRoaXMuaGVhZEVsZW1lbnQgPyBBRlRFUl9IRUFEX01PREUgOiBCRUZPUkVfSEVBRF9NT0RFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIGlmIChsYXN0KSB7XG4gICAgICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJTl9CT0RZX01PREU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3Jlc2V0SW5zZXJ0aW9uTW9kZUZvclNlbGVjdCA9IGZ1bmN0aW9uIChzZWxlY3RJZHgpIHtcbiAgICBpZiAoc2VsZWN0SWR4ID4gMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gc2VsZWN0SWR4IC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIGFuY2VzdG9yID0gdGhpcy5vcGVuRWxlbWVudHMuaXRlbXNbaV0sXG4gICAgICAgICAgICAgICAgdG4gPSB0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoYW5jZXN0b3IpO1xuXG4gICAgICAgICAgICBpZiAodG4gPT09ICQuVEVNUExBVEUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSU5fU0VMRUNUX0lOX1RBQkxFX01PREU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSU5fU0VMRUNUX01PREU7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9wdXNoVG1wbEluc2VydGlvbk1vZGUgPSBmdW5jdGlvbiAobW9kZSkge1xuICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFjay5wdXNoKG1vZGUpO1xuICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFja1RvcCsrO1xuICAgIHRoaXMuY3VycmVudFRtcGxJbnNlcnRpb25Nb2RlID0gbW9kZTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3BvcFRtcGxJbnNlcnRpb25Nb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFjay5wb3AoKTtcbiAgICB0aGlzLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3AtLTtcbiAgICB0aGlzLmN1cnJlbnRUbXBsSW5zZXJ0aW9uTW9kZSA9IHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFja1t0aGlzLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3BdO1xufTtcblxuLy9Gb3N0ZXIgcGFyZW50aW5nXG5QYXJzZXIucHJvdG90eXBlLl9pc0VsZW1lbnRDYXVzZXNGb3N0ZXJQYXJlbnRpbmcgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHZhciB0biA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShlbGVtZW50KTtcblxuICAgIHJldHVybiB0biA9PT0gJC5UQUJMRSB8fCB0biA9PT0gJC5UQk9EWSB8fCB0biA9PT0gJC5URk9PVCB8fCB0biA9PT0gJC5USEVBRCB8fCB0biA9PT0gJC5UUjtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuX3Nob3VsZEZvc3RlclBhcmVudE9uSW5zZXJ0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmZvc3RlclBhcmVudGluZ0VuYWJsZWQgJiYgdGhpcy5faXNFbGVtZW50Q2F1c2VzRm9zdGVyUGFyZW50aW5nKHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnQpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fZmluZEZvc3RlclBhcmVudGluZ0xvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBsb2NhdGlvbiA9IHtcbiAgICAgICAgcGFyZW50OiBudWxsLFxuICAgICAgICBiZWZvcmVFbGVtZW50OiBudWxsXG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSB0aGlzLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdmFyIG9wZW5FbGVtZW50ID0gdGhpcy5vcGVuRWxlbWVudHMuaXRlbXNbaV0sXG4gICAgICAgICAgICB0biA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShvcGVuRWxlbWVudCksXG4gICAgICAgICAgICBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKG9wZW5FbGVtZW50KTtcblxuICAgICAgICBpZiAodG4gPT09ICQuVEVNUExBVEUgJiYgbnMgPT09IE5TLkhUTUwpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnBhcmVudCA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGVtcGxhdGVDb250ZW50KG9wZW5FbGVtZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuVEFCTEUpIHtcbiAgICAgICAgICAgIGxvY2F0aW9uLnBhcmVudCA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0UGFyZW50Tm9kZShvcGVuRWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhdGlvbi5wYXJlbnQpXG4gICAgICAgICAgICAgICAgbG9jYXRpb24uYmVmb3JlRWxlbWVudCA9IG9wZW5FbGVtZW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLnBhcmVudCA9IHRoaXMub3BlbkVsZW1lbnRzLml0ZW1zW2kgLSAxXTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWxvY2F0aW9uLnBhcmVudClcbiAgICAgICAgbG9jYXRpb24ucGFyZW50ID0gdGhpcy5vcGVuRWxlbWVudHMuaXRlbXNbMF07XG5cbiAgICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9mb3N0ZXJQYXJlbnRFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLl9maW5kRm9zdGVyUGFyZW50aW5nTG9jYXRpb24oKTtcblxuICAgIGlmIChsb2NhdGlvbi5iZWZvcmVFbGVtZW50KVxuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmluc2VydEJlZm9yZShsb2NhdGlvbi5wYXJlbnQsIGVsZW1lbnQsIGxvY2F0aW9uLmJlZm9yZUVsZW1lbnQpO1xuICAgIGVsc2VcbiAgICAgICAgdGhpcy50cmVlQWRhcHRlci5hcHBlbmRDaGlsZChsb2NhdGlvbi5wYXJlbnQsIGVsZW1lbnQpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5fZm9zdGVyUGFyZW50VGV4dCA9IGZ1bmN0aW9uIChjaGFycykge1xuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMuX2ZpbmRGb3N0ZXJQYXJlbnRpbmdMb2NhdGlvbigpO1xuXG4gICAgaWYgKGxvY2F0aW9uLmJlZm9yZUVsZW1lbnQpXG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0VGV4dEJlZm9yZShsb2NhdGlvbi5wYXJlbnQsIGNoYXJzLCBsb2NhdGlvbi5iZWZvcmVFbGVtZW50KTtcbiAgICBlbHNlXG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0VGV4dChsb2NhdGlvbi5wYXJlbnQsIGNoYXJzKTtcbn07XG5cbi8vU3BlY2lhbCBlbGVtZW50c1xuUGFyc2VyLnByb3RvdHlwZS5faXNTcGVjaWFsRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdmFyIHRuID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpLFxuICAgICAgICBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIEhUTUwuU1BFQ0lBTF9FTEVNRU5UU1tuc11bdG5dO1xufTtcblxuLy9BZG9wdGlvbiBhZ2VuY3kgYWxnb3JpdGhtXG4vLyhzZWU6IGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RyZWUtY29uc3RydWN0aW9uLmh0bWwjYWRvcHRpb25BZ2VuY3kpXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vL1N0ZXBzIDUtOCBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYU9idGFpbkZvcm1hdHRpbmdFbGVtZW50RW50cnkocCwgdG9rZW4pIHtcbiAgICB2YXIgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSA9IHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmdldEVsZW1lbnRFbnRyeUluU2NvcGVXaXRoVGFnTmFtZSh0b2tlbi50YWdOYW1lKTtcblxuICAgIGlmIChmb3JtYXR0aW5nRWxlbWVudEVudHJ5KSB7XG4gICAgICAgIGlmICghcC5vcGVuRWxlbWVudHMuY29udGFpbnMoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KSkge1xuICAgICAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucmVtb3ZlRW50cnkoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSk7XG4gICAgICAgICAgICBmb3JtYXR0aW5nRWxlbWVudEVudHJ5ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2UgaWYgKCFwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRva2VuLnRhZ05hbWUpKVxuICAgICAgICAgICAgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSA9IG51bGw7XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgIHJldHVybiBmb3JtYXR0aW5nRWxlbWVudEVudHJ5O1xufVxuXG4vL1N0ZXBzIDkgYW5kIDEwIG9mIHRoZSBhbGdvcml0aG1cbmZ1bmN0aW9uIGFhT2J0YWluRnVydGhlc3RCbG9jayhwLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5KSB7XG4gICAgdmFyIGZ1cnRoZXN0QmxvY2sgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IHAub3BlbkVsZW1lbnRzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zW2ldO1xuXG4gICAgICAgIGlmIChlbGVtZW50ID09PSBmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBpZiAocC5faXNTcGVjaWFsRWxlbWVudChlbGVtZW50KSlcbiAgICAgICAgICAgIGZ1cnRoZXN0QmxvY2sgPSBlbGVtZW50O1xuICAgIH1cblxuICAgIGlmICghZnVydGhlc3RCbG9jaykge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbEVsZW1lbnRQb3BwZWQoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucmVtb3ZlRW50cnkoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1cnRoZXN0QmxvY2s7XG59XG5cbi8vU3RlcCAxMyBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYUlubmVyTG9vcChwLCBmdXJ0aGVzdEJsb2NrLCBmb3JtYXR0aW5nRWxlbWVudCkge1xuICAgIHZhciBsYXN0RWxlbWVudCA9IGZ1cnRoZXN0QmxvY2ssXG4gICAgICAgIG5leHRFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuZ2V0Q29tbW9uQW5jZXN0b3IoZnVydGhlc3RCbG9jayk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgZWxlbWVudCA9IG5leHRFbGVtZW50OyBlbGVtZW50ICE9PSBmb3JtYXR0aW5nRWxlbWVudDsgaSsrLCBlbGVtZW50ID0gbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy9OT1RFOiBzdG9yZSBuZXh0IGVsZW1lbnQgZm9yIHRoZSBuZXh0IGxvb3AgaXRlcmF0aW9uIChpdCBtYXkgYmUgZGVsZXRlZCBmcm9tIHRoZSBzdGFjayBieSBzdGVwIDkuNSlcbiAgICAgICAgbmV4dEVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5nZXRDb21tb25BbmNlc3RvcihlbGVtZW50KTtcblxuICAgICAgICB2YXIgZWxlbWVudEVudHJ5ID0gcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuZ2V0RWxlbWVudEVudHJ5KGVsZW1lbnQpLFxuICAgICAgICAgICAgY291bnRlck92ZXJmbG93ID0gZWxlbWVudEVudHJ5ICYmIGkgPj0gQUFfSU5ORVJfTE9PUF9JVEVSLFxuICAgICAgICAgICAgc2hvdWxkUmVtb3ZlRnJvbU9wZW5FbGVtZW50cyA9ICFlbGVtZW50RW50cnkgfHwgY291bnRlck92ZXJmbG93O1xuXG4gICAgICAgIGlmIChzaG91bGRSZW1vdmVGcm9tT3BlbkVsZW1lbnRzKSB7XG4gICAgICAgICAgICBpZiAoY291bnRlck92ZXJmbG93KVxuICAgICAgICAgICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGVsZW1lbnRFbnRyeSk7XG5cbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudCA9IGFhUmVjcmVhdGVFbGVtZW50RnJvbUVudHJ5KHAsIGVsZW1lbnRFbnRyeSk7XG5cbiAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCA9PT0gZnVydGhlc3RCbG9jaylcbiAgICAgICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5ib29rbWFyayA9IGVsZW1lbnRFbnRyeTtcblxuICAgICAgICAgICAgcC50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGxhc3RFbGVtZW50KTtcbiAgICAgICAgICAgIHAudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCwgbGFzdEVsZW1lbnQpO1xuICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhc3RFbGVtZW50O1xufVxuXG4vL1N0ZXAgMTMuNyBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYVJlY3JlYXRlRWxlbWVudEZyb21FbnRyeShwLCBlbGVtZW50RW50cnkpIHtcbiAgICB2YXIgbnMgPSBwLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShlbGVtZW50RW50cnkuZWxlbWVudCksXG4gICAgICAgIG5ld0VsZW1lbnQgPSBwLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQoZWxlbWVudEVudHJ5LnRva2VuLnRhZ05hbWUsIG5zLCBlbGVtZW50RW50cnkudG9rZW4uYXR0cnMpO1xuXG4gICAgcC5vcGVuRWxlbWVudHMucmVwbGFjZShlbGVtZW50RW50cnkuZWxlbWVudCwgbmV3RWxlbWVudCk7XG4gICAgZWxlbWVudEVudHJ5LmVsZW1lbnQgPSBuZXdFbGVtZW50O1xuXG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59XG5cbi8vU3RlcCAxNCBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYUluc2VydExhc3ROb2RlSW5Db21tb25BbmNlc3RvcihwLCBjb21tb25BbmNlc3RvciwgbGFzdEVsZW1lbnQpIHtcbiAgICBpZiAocC5faXNFbGVtZW50Q2F1c2VzRm9zdGVyUGFyZW50aW5nKGNvbW1vbkFuY2VzdG9yKSlcbiAgICAgICAgcC5fZm9zdGVyUGFyZW50RWxlbWVudChsYXN0RWxlbWVudCk7XG5cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHRuID0gcC50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGNvbW1vbkFuY2VzdG9yKSxcbiAgICAgICAgICAgIG5zID0gcC50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoY29tbW9uQW5jZXN0b3IpO1xuXG4gICAgICAgIGlmICh0biA9PT0gJC5URU1QTEFURSAmJiBucyA9PT0gTlMuSFRNTClcbiAgICAgICAgICAgIGNvbW1vbkFuY2VzdG9yID0gcC50cmVlQWRhcHRlci5nZXRUZW1wbGF0ZUNvbnRlbnQoY29tbW9uQW5jZXN0b3IpO1xuXG4gICAgICAgIHAudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQoY29tbW9uQW5jZXN0b3IsIGxhc3RFbGVtZW50KTtcbiAgICB9XG59XG5cbi8vU3RlcHMgMTUtMTkgb2YgdGhlIGFsZ29yaXRobVxuZnVuY3Rpb24gYWFSZXBsYWNlRm9ybWF0dGluZ0VsZW1lbnQocCwgZnVydGhlc3RCbG9jaywgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSkge1xuICAgIHZhciBucyA9IHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGZvcm1hdHRpbmdFbGVtZW50RW50cnkuZWxlbWVudCksXG4gICAgICAgIHRva2VuID0gZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS50b2tlbixcbiAgICAgICAgbmV3RWxlbWVudCA9IHAudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0b2tlbi50YWdOYW1lLCBucywgdG9rZW4uYXR0cnMpO1xuXG4gICAgcC5fYWRvcHROb2RlcyhmdXJ0aGVzdEJsb2NrLCBuZXdFbGVtZW50KTtcbiAgICBwLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKGZ1cnRoZXN0QmxvY2ssIG5ld0VsZW1lbnQpO1xuXG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuaW5zZXJ0RWxlbWVudEFmdGVyQm9va21hcmsobmV3RWxlbWVudCwgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS50b2tlbik7XG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucmVtb3ZlRW50cnkoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSk7XG5cbiAgICBwLm9wZW5FbGVtZW50cy5yZW1vdmUoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KTtcbiAgICBwLm9wZW5FbGVtZW50cy5pbnNlcnRBZnRlcihmdXJ0aGVzdEJsb2NrLCBuZXdFbGVtZW50KTtcbn1cblxuLy9BbGdvcml0aG0gZW50cnkgcG9pbnRcbmZ1bmN0aW9uIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbikge1xuICAgIHZhciBmb3JtYXR0aW5nRWxlbWVudEVudHJ5O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBQV9PVVRFUl9MT09QX0lURVI7IGkrKykge1xuICAgICAgICBmb3JtYXR0aW5nRWxlbWVudEVudHJ5ID0gYWFPYnRhaW5Gb3JtYXR0aW5nRWxlbWVudEVudHJ5KHAsIHRva2VuLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5KTtcblxuICAgICAgICBpZiAoIWZvcm1hdHRpbmdFbGVtZW50RW50cnkpXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICB2YXIgZnVydGhlc3RCbG9jayA9IGFhT2J0YWluRnVydGhlc3RCbG9jayhwLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5KTtcblxuICAgICAgICBpZiAoIWZ1cnRoZXN0QmxvY2spXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5ib29rbWFyayA9IGZvcm1hdHRpbmdFbGVtZW50RW50cnk7XG5cbiAgICAgICAgdmFyIGxhc3RFbGVtZW50ID0gYWFJbm5lckxvb3AocCwgZnVydGhlc3RCbG9jaywgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KSxcbiAgICAgICAgICAgIGNvbW1vbkFuY2VzdG9yID0gcC5vcGVuRWxlbWVudHMuZ2V0Q29tbW9uQW5jZXN0b3IoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KTtcblxuICAgICAgICBwLnRyZWVBZGFwdGVyLmRldGFjaE5vZGUobGFzdEVsZW1lbnQpO1xuICAgICAgICBhYUluc2VydExhc3ROb2RlSW5Db21tb25BbmNlc3RvcihwLCBjb21tb25BbmNlc3RvciwgbGFzdEVsZW1lbnQpO1xuICAgICAgICBhYVJlcGxhY2VGb3JtYXR0aW5nRWxlbWVudChwLCBmdXJ0aGVzdEJsb2NrLCBmb3JtYXR0aW5nRWxlbWVudEVudHJ5KTtcbiAgICB9XG59XG5cblxuLy9HZW5lcmljIHRva2VuIGhhbmRsZXJzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gaWdub3JlVG9rZW4oKSB7XG4gICAgLy9OT1RFOiBkbyBub3RoaW5nID0pXG59XG5cbmZ1bmN0aW9uIGFwcGVuZENvbW1lbnQocCwgdG9rZW4pIHtcbiAgICBwLl9hcHBlbmRDb21tZW50Tm9kZSh0b2tlbiwgcC5vcGVuRWxlbWVudHMuY3VycmVudFRtcGxDb250ZW50IHx8IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDb21tZW50VG9Sb290SHRtbEVsZW1lbnQocCwgdG9rZW4pIHtcbiAgICBwLl9hcHBlbmRDb21tZW50Tm9kZSh0b2tlbiwgcC5vcGVuRWxlbWVudHMuaXRlbXNbMF0pO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDb21tZW50VG9Eb2N1bWVudChwLCB0b2tlbikge1xuICAgIHAuX2FwcGVuZENvbW1lbnROb2RlKHRva2VuLCBwLmRvY3VtZW50KTtcbn1cblxuZnVuY3Rpb24gaW5zZXJ0Q2hhcmFjdGVycyhwLCB0b2tlbikge1xuICAgIHAuX2luc2VydENoYXJhY3RlcnModG9rZW4pO1xufVxuXG5mdW5jdGlvbiBzdG9wUGFyc2luZyhwKSB7XG4gICAgcC5zdG9wcGVkID0gdHJ1ZTtcbn1cblxuLy8xMi4yLjUuNC4xIFRoZSBcImluaXRpYWxcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGRvY3R5cGVJbkluaXRpYWxNb2RlKHAsIHRva2VuKSB7XG4gICAgcC5fc2V0RG9jdW1lbnRUeXBlKHRva2VuKTtcblxuICAgIHZhciBtb2RlID0gdG9rZW4uZm9yY2VRdWlya3MgP1xuICAgICAgICBIVE1MLkRPQ1VNRU5UX01PREUuUVVJUktTIDpcbiAgICAgICAgZG9jdHlwZS5nZXREb2N1bWVudE1vZGUodG9rZW4ubmFtZSwgdG9rZW4ucHVibGljSWQsIHRva2VuLnN5c3RlbUlkKTtcblxuICAgIHAudHJlZUFkYXB0ZXIuc2V0RG9jdW1lbnRNb2RlKHAuZG9jdW1lbnQsIG1vZGUpO1xuXG4gICAgcC5pbnNlcnRpb25Nb2RlID0gQkVGT1JFX0hUTUxfTU9ERTtcbn1cblxuZnVuY3Rpb24gdG9rZW5JbkluaXRpYWxNb2RlKHAsIHRva2VuKSB7XG4gICAgcC50cmVlQWRhcHRlci5zZXREb2N1bWVudE1vZGUocC5kb2N1bWVudCwgSFRNTC5ET0NVTUVOVF9NT0RFLlFVSVJLUyk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gQkVGT1JFX0hUTUxfTU9ERTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG5cbi8vMTIuMi41LjQuMiBUaGUgXCJiZWZvcmUgaHRtbFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdCZWZvcmVIdG1sKHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuSFRNTCkge1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gQkVGT1JFX0hFQURfTU9ERTtcbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHRva2VuQmVmb3JlSHRtbChwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0JlZm9yZUh0bWwocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwgfHwgdG4gPT09ICQuSEVBRCB8fCB0biA9PT0gJC5CT0RZIHx8IHRuID09PSAkLkJSKVxuICAgICAgICB0b2tlbkJlZm9yZUh0bWwocCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiB0b2tlbkJlZm9yZUh0bWwocCwgdG9rZW4pIHtcbiAgICBwLl9pbnNlcnRGYWtlUm9vdEVsZW1lbnQoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBCRUZPUkVfSEVBRF9NT0RFO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG5cblxuLy8xMi4yLjUuNC4zIFRoZSBcImJlZm9yZSBoZWFkXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0JlZm9yZUhlYWQocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpXG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgIGVsc2UgaWYgKHRuID09PSAkLkhFQUQpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuaGVhZEVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9IRUFEX01PREU7XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICB0b2tlbkJlZm9yZUhlYWQocCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiBlbmRUYWdCZWZvcmVIZWFkKHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IRUFEIHx8IHRuID09PSAkLkJPRFkgfHwgdG4gPT09ICQuSFRNTCB8fCB0biA9PT0gJC5CUilcbiAgICAgICAgdG9rZW5CZWZvcmVIZWFkKHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gdG9rZW5CZWZvcmVIZWFkKHAsIHRva2VuKSB7XG4gICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoJC5IRUFEKTtcbiAgICBwLmhlYWRFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuY3VycmVudDtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9IRUFEX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuXG4vLzEyLjIuNS40LjQgVGhlIFwiaW4gaGVhZFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpXG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgIGVsc2UgaWYgKHRuID09PSAkLkJBU0UgfHwgdG4gPT09ICQuQkFTRUZPTlQgfHwgdG4gPT09ICQuQkdTT1VORCB8fCB0biA9PT0gJC5MSU5LIHx8IHRuID09PSAkLk1FVEEpXG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuVElUTEUpXG4gICAgICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIFRva2VuaXplci5NT0RFLlJDREFUQSk7XG5cbiAgICAvL05PVEU6IGhlcmUgd2UgYXNzdW1lIHRoYXQgd2UgYWx3YXlzIGFjdCBhcyBhbiBpbnRlcmFjdGl2ZSB1c2VyIGFnZW50IHdpdGggZW5hYmxlZCBzY3JpcHRpbmcsIHNvIHdlIHBhcnNlXG4gICAgLy88bm9zY3JpcHQ+IGFzIGEgcmF3dGV4dC5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5OT1NDUklQVCB8fCB0biA9PT0gJC5OT0ZSQU1FUyB8fCB0biA9PT0gJC5TVFlMRSlcbiAgICAgICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgVG9rZW5pemVyLk1PREUuUkFXVEVYVCk7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5TQ1JJUFQpXG4gICAgICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIFRva2VuaXplci5NT0RFLlNDUklQVF9EQVRBKTtcblxuICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKSB7XG4gICAgICAgIHAuX2luc2VydFRlbXBsYXRlKHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuaW5zZXJ0TWFya2VyKCk7XG4gICAgICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9URU1QTEFURV9NT0RFO1xuICAgICAgICBwLl9wdXNoVG1wbEluc2VydGlvbk1vZGUoSU5fVEVNUExBVEVfTU9ERSk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gIT09ICQuSEVBRClcbiAgICAgICAgdG9rZW5JbkhlYWQocCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiBlbmRUYWdJbkhlYWQocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhFQUQpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEFGVEVSX0hFQURfTU9ERTtcbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5CT0RZIHx8IHRuID09PSAkLkJSIHx8IHRuID09PSAkLkhUTUwpXG4gICAgICAgIHRva2VuSW5IZWFkKHAsIHRva2VuKTtcblxuICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFICYmIHAub3BlbkVsZW1lbnRzLnRtcGxDb3VudCA+IDApIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5URU1QTEFURSk7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmNsZWFyVG9MYXN0TWFya2VyKCk7XG4gICAgICAgIHAuX3BvcFRtcGxJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9rZW5JbkhlYWQocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9IRUFEX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuXG4vLzEyLjIuNS40LjYgVGhlIFwiYWZ0ZXIgaGVhZFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdBZnRlckhlYWQocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkhUTUwpXG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgIGVsc2UgaWYgKHRuID09PSAkLkJPRFkpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9CT0RZX01PREU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuRlJBTUVTRVQpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0ZSQU1FU0VUX01PREU7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuQkFTRSB8fCB0biA9PT0gJC5CQVNFRk9OVCB8fCB0biA9PT0gJC5CR1NPVU5EIHx8IHRuID09PSAkLkxJTksgfHwgdG4gPT09ICQuTUVUQSB8fFxuICAgICAgICAgICAgIHRuID09PSAkLk5PRlJBTUVTIHx8IHRuID09PSAkLlNDUklQVCB8fCB0biA9PT0gJC5TVFlMRSB8fCB0biA9PT0gJC5URU1QTEFURSB8fCB0biA9PT0gJC5USVRMRSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wdXNoKHAuaGVhZEVsZW1lbnQpO1xuICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShwLmhlYWRFbGVtZW50KTtcbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biAhPT0gJC5IRUFEKVxuICAgICAgICB0b2tlbkFmdGVySGVhZChwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0FmdGVySGVhZChwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuQk9EWSB8fCB0biA9PT0gJC5IVE1MIHx8IHRuID09PSAkLkJSKVxuICAgICAgICB0b2tlbkFmdGVySGVhZChwLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5URU1QTEFURSlcbiAgICAgICAgZW5kVGFnSW5IZWFkKHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gdG9rZW5BZnRlckhlYWQocCwgdG9rZW4pIHtcbiAgICBwLl9pbnNlcnRGYWtlRWxlbWVudCgkLkJPRFkpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0JPRFlfTU9ERTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG5cbi8vMTIuMi41LjQuNyBUaGUgXCJpbiBib2R5XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKTtcbn1cblxuZnVuY3Rpb24gY2hhcmFjdGVySW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaHRtbFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLnRtcGxDb3VudCA9PT0gMClcbiAgICAgICAgcC50cmVlQWRhcHRlci5hZG9wdEF0dHJpYnV0ZXMocC5vcGVuRWxlbWVudHMuaXRlbXNbMF0sIHRva2VuLmF0dHJzKTtcbn1cblxuZnVuY3Rpb24gYm9keVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgdmFyIGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMudHJ5UGVla1Byb3Blcmx5TmVzdGVkQm9keUVsZW1lbnQoKTtcblxuICAgIGlmIChib2R5RWxlbWVudCAmJiBwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPT09IDApIHtcbiAgICAgICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgICAgIHAudHJlZUFkYXB0ZXIuYWRvcHRBdHRyaWJ1dGVzKGJvZHlFbGVtZW50LCB0b2tlbi5hdHRycyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBmcmFtZXNldFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgdmFyIGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMudHJ5UGVla1Byb3Blcmx5TmVzdGVkQm9keUVsZW1lbnQoKTtcblxuICAgIGlmIChwLmZyYW1lc2V0T2sgJiYgYm9keUVsZW1lbnQpIHtcbiAgICAgICAgcC50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGJvZHlFbGVtZW50KTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wQWxsVXBUb0h0bWxFbGVtZW50KCk7XG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9GUkFNRVNFVF9NT0RFO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luQnV0dG9uU2NvcGUoJC5QKSlcbiAgICAgICAgcC5fY2xvc2VQRWxlbWVudCgpO1xuXG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG59XG5cbmZ1bmN0aW9uIG51bWJlcmVkSGVhZGVyU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKVxuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICB2YXIgdG4gPSBwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IMSB8fCB0biA9PT0gJC5IMiB8fCB0biA9PT0gJC5IMyB8fCB0biA9PT0gJC5INCB8fCB0biA9PT0gJC5INSB8fCB0biA9PT0gJC5INilcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gcHJlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKVxuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAvL05PVEU6IElmIHRoZSBuZXh0IHRva2VuIGlzIGEgVSswMDBBIExJTkUgRkVFRCAoTEYpIGNoYXJhY3RlciB0b2tlbiwgdGhlbiBpZ25vcmUgdGhhdCB0b2tlbiBhbmQgbW92ZVxuICAgIC8vb24gdG8gdGhlIG5leHQgb25lLiAoTmV3bGluZXMgYXQgdGhlIHN0YXJ0IG9mIHByZSBibG9ja3MgYXJlIGlnbm9yZWQgYXMgYW4gYXV0aG9yaW5nIGNvbnZlbmllbmNlLilcbiAgICBwLnNraXBOZXh0TmV3TGluZSA9IHRydWU7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGZvcm1TdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHZhciBpblRlbXBsYXRlID0gcC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMDtcblxuICAgIGlmICghcC5mb3JtRWxlbWVudCB8fCBpblRlbXBsYXRlKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKCQuUCkpXG4gICAgICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG5cbiAgICAgICAgaWYgKCFpblRlbXBsYXRlKVxuICAgICAgICAgICAgcC5mb3JtRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsaXN0SXRlbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG5cbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgZm9yICh2YXIgaSA9IHAub3BlbkVsZW1lbnRzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zW2ldLFxuICAgICAgICAgICAgZWxlbWVudFRuID0gcC50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpLFxuICAgICAgICAgICAgY2xvc2VUbiA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRuID09PSAkLkxJICYmIGVsZW1lbnRUbiA9PT0gJC5MSSlcbiAgICAgICAgICAgIGNsb3NlVG4gPSAkLkxJO1xuXG4gICAgICAgIGVsc2UgaWYgKCh0biA9PT0gJC5ERCB8fCB0biA9PT0gJC5EVCkgJiYgKGVsZW1lbnRUbiA9PT0gJC5ERCB8fCBlbGVtZW50VG4gPT09ICQuRFQpKVxuICAgICAgICAgICAgY2xvc2VUbiA9IGVsZW1lbnRUbjtcblxuICAgICAgICBpZiAoY2xvc2VUbikge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24oY2xvc2VUbik7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoY2xvc2VUbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtZW50VG4gIT09ICQuQUREUkVTUyAmJiBlbGVtZW50VG4gIT09ICQuRElWICYmIGVsZW1lbnRUbiAhPT0gJC5QICYmIHAuX2lzU3BlY2lhbEVsZW1lbnQoZWxlbWVudCkpXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKVxuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gcGxhaW50ZXh0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKVxuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLnRva2VuaXplci5zdGF0ZSA9IFRva2VuaXplci5NT0RFLlBMQUlOVEVYVDtcbn1cblxuZnVuY3Rpb24gYnV0dG9uU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLkJVVFRPTikpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5CVVRUT04pO1xuICAgIH1cblxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHZhciBhY3RpdmVFbGVtZW50RW50cnkgPSBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5nZXRFbGVtZW50RW50cnlJblNjb3BlV2l0aFRhZ05hbWUoJC5BKTtcblxuICAgIGlmIChhY3RpdmVFbGVtZW50RW50cnkpIHtcbiAgICAgICAgY2FsbEFkb3B0aW9uQWdlbmN5KHAsIHRva2VuKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucmVtb3ZlKGFjdGl2ZUVsZW1lbnRFbnRyeS5lbGVtZW50KTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucmVtb3ZlRW50cnkoYWN0aXZlRWxlbWVudEVudHJ5KTtcbiAgICB9XG5cbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnB1c2hFbGVtZW50KHAub3BlbkVsZW1lbnRzLmN1cnJlbnQsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gYlN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5wdXNoRWxlbWVudChwLm9wZW5FbGVtZW50cy5jdXJyZW50LCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIG5vYnJTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG5cbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLk5PQlIpKSB7XG4gICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG4gICAgICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgfVxuXG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHVzaEVsZW1lbnQocC5vcGVuRWxlbWVudHMuY3VycmVudCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiBhcHBsZXRTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuaW5zZXJ0TWFya2VyKCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHRhYmxlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC50cmVlQWRhcHRlci5nZXREb2N1bWVudE1vZGUocC5kb2N1bWVudCkgIT09IEhUTUwuRE9DVU1FTlRfTU9ERS5RVUlSS1MgJiYgcC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKVxuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9NT0RFO1xufVxuXG5mdW5jdGlvbiBhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpbnB1dFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcblxuICAgIHZhciBpbnB1dFR5cGUgPSBUb2tlbml6ZXIuZ2V0VG9rZW5BdHRyKHRva2VuLCBBVFRSUy5UWVBFKTtcblxuICAgIGlmICghaW5wdXRUeXBlIHx8IGlucHV0VHlwZS50b0xvd2VyQ2FzZSgpICE9PSBISURERU5fSU5QVVRfVFlQRSlcbiAgICAgICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG5cbn1cblxuZnVuY3Rpb24gcGFyYW1TdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xufVxuXG5mdW5jdGlvbiBoclN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luQnV0dG9uU2NvcGUoJC5QKSlcbiAgICAgICAgcC5fY2xvc2VQRWxlbWVudCgpO1xuXG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLk1FTlVJVEVNKVxuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpbWFnZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgdG9rZW4udGFnTmFtZSA9ICQuSU1HO1xuICAgIGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHRleHRhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAvL05PVEU6IElmIHRoZSBuZXh0IHRva2VuIGlzIGEgVSswMDBBIExJTkUgRkVFRCAoTEYpIGNoYXJhY3RlciB0b2tlbiwgdGhlbiBpZ25vcmUgdGhhdCB0b2tlbiBhbmQgbW92ZVxuICAgIC8vb24gdG8gdGhlIG5leHQgb25lLiAoTmV3bGluZXMgYXQgdGhlIHN0YXJ0IG9mIHRleHRhcmVhIGVsZW1lbnRzIGFyZSBpZ25vcmVkIGFzIGFuIGF1dGhvcmluZyBjb252ZW5pZW5jZS4pXG4gICAgcC5za2lwTmV4dE5ld0xpbmUgPSB0cnVlO1xuICAgIHAudG9rZW5pemVyLnN0YXRlID0gVG9rZW5pemVyLk1PREUuUkNEQVRBO1xuICAgIHAub3JpZ2luYWxJbnNlcnRpb25Nb2RlID0gcC5pbnNlcnRpb25Nb2RlO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IFRFWFRfTU9ERTtcbn1cblxuZnVuY3Rpb24geG1wU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZSgkLlApKVxuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG5cbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIFRva2VuaXplci5NT0RFLlJBV1RFWFQpO1xufVxuXG5mdW5jdGlvbiBpZnJhbWVTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIFRva2VuaXplci5NT0RFLlJBV1RFWFQpO1xufVxuXG4vL05PVEU6IGhlcmUgd2UgYXNzdW1lIHRoYXQgd2UgYWx3YXlzIGFjdCBhcyBhbiB1c2VyIGFnZW50IHdpdGggZW5hYmxlZCBwbHVnaW5zLCBzbyB3ZSBwYXJzZVxuLy88bm9lbWJlZD4gYXMgYSByYXd0ZXh0LlxuZnVuY3Rpb24gbm9lbWJlZFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgVG9rZW5pemVyLk1PREUuUkFXVEVYVCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcblxuICAgIGlmIChwLmluc2VydGlvbk1vZGUgPT09IElOX1RBQkxFX01PREUgfHxcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJTl9DQVBUSU9OX01PREUgfHxcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJTl9UQUJMRV9CT0RZX01PREUgfHxcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJTl9ST1dfTU9ERSB8fFxuICAgICAgICBwLmluc2VydGlvbk1vZGUgPT09IElOX0NFTExfTU9ERSlcblxuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9TRUxFQ1RfSU5fVEFCTEVfTU9ERTtcblxuICAgIGVsc2VcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fU0VMRUNUX01PREU7XG59XG5cbmZ1bmN0aW9uIG9wdGdyb3VwU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgPT09ICQuT1BUSU9OKVxuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG59XG5cbmZ1bmN0aW9uIHJiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLlJVQlkpKVxuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gcnRTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKCQuUlVCWSkpXG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uKCQuUlRDKTtcblxuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xufVxuXG5mdW5jdGlvbiBtZW51aXRlbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLk1FTlVJVEVNKVxuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgIC8vIFRPRE8gbmVlZHMgY2xhcmlmaWNhdGlvbiwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9wdWxsLzkwNy9maWxlcyNyNzM1MDU4NzdcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuXG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG59XG5cbmZ1bmN0aW9uIG1lbnVTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKCQuUCkpXG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcblxuICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5NRU5VSVRFTSlcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG5cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbn1cblxuZnVuY3Rpb24gbWF0aFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcblxuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuTWF0aE1MQXR0cnModG9rZW4pO1xuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuWE1MQXR0cnModG9rZW4pO1xuXG4gICAgaWYgKHRva2VuLnNlbGZDbG9zaW5nKVxuICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5NQVRITUwpO1xuICAgIGVsc2VcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuTUFUSE1MKTtcbn1cblxuZnVuY3Rpb24gc3ZnU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuXG4gICAgZm9yZWlnbkNvbnRlbnQuYWRqdXN0VG9rZW5TVkdBdHRycyh0b2tlbik7XG4gICAgZm9yZWlnbkNvbnRlbnQuYWRqdXN0VG9rZW5YTUxBdHRycyh0b2tlbik7XG5cbiAgICBpZiAodG9rZW4uc2VsZkNsb3NpbmcpXG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIE5TLlNWRyk7XG4gICAgZWxzZVxuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5TVkcpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xufVxuXG4vL09QVElNSVpBVElPTjogSW50ZWdlciBjb21wYXJpc29ucyBhcmUgbG93LWNvc3QsIHNvIHdlIGNhbiB1c2UgdmVyeSBmYXN0IHRhZyBuYW1lIGxlbmd0aCBmaWx0ZXJzIGhlcmUuXG4vL0l0J3MgZmFzdGVyIHRoYW4gdXNpbmcgZGljdGlvbmFyeS5cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIHN3aXRjaCAodG4ubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5JIHx8IHRuID09PSAkLlMgfHwgdG4gPT09ICQuQiB8fCB0biA9PT0gJC5VKVxuICAgICAgICAgICAgICAgIGJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlApXG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQSlcbiAgICAgICAgICAgICAgICBhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkRMIHx8IHRuID09PSAkLk9MIHx8IHRuID09PSAkLlVMKVxuICAgICAgICAgICAgICAgIGFkZHJlc3NTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkgxIHx8IHRuID09PSAkLkgyIHx8IHRuID09PSAkLkgzIHx8IHRuID09PSAkLkg0IHx8IHRuID09PSAkLkg1IHx8IHRuID09PSAkLkg2KVxuICAgICAgICAgICAgICAgIG51bWJlcmVkSGVhZGVyU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5MSSB8fCB0biA9PT0gJC5ERCB8fCB0biA9PT0gJC5EVClcbiAgICAgICAgICAgICAgICBsaXN0SXRlbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuRU0gfHwgdG4gPT09ICQuVFQpXG4gICAgICAgICAgICAgICAgYlN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQlIpXG4gICAgICAgICAgICAgICAgYXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuSFIpXG4gICAgICAgICAgICAgICAgaHJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlJCKVxuICAgICAgICAgICAgICAgIHJiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5SVCB8fCB0biA9PT0gJC5SUClcbiAgICAgICAgICAgICAgICBydFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gIT09ICQuVEggJiYgdG4gIT09ICQuVEQgJiYgdG4gIT09ICQuVFIpXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkRJViB8fCB0biA9PT0gJC5ESVIgfHwgdG4gPT09ICQuTkFWKVxuICAgICAgICAgICAgICAgIGFkZHJlc3NTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlBSRSlcbiAgICAgICAgICAgICAgICBwcmVTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkJJRylcbiAgICAgICAgICAgICAgICBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5JTUcgfHwgdG4gPT09ICQuV0JSKVxuICAgICAgICAgICAgICAgIGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlhNUClcbiAgICAgICAgICAgICAgICB4bXBTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlNWRylcbiAgICAgICAgICAgICAgICBzdmdTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlJUQylcbiAgICAgICAgICAgICAgICByYlN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gIT09ICQuQ09MKVxuICAgICAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5IVE1MKVxuICAgICAgICAgICAgICAgIGh0bWxTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkJBU0UgfHwgdG4gPT09ICQuTElOSyB8fCB0biA9PT0gJC5NRVRBKVxuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQk9EWSlcbiAgICAgICAgICAgICAgICBib2R5U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5NQUlOKVxuICAgICAgICAgICAgICAgIGFkZHJlc3NTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkZPUk0pXG4gICAgICAgICAgICAgICAgZm9ybVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQ09ERSB8fCB0biA9PT0gJC5GT05UKVxuICAgICAgICAgICAgICAgIGJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLk5PQlIpXG4gICAgICAgICAgICAgICAgbm9iclN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQVJFQSlcbiAgICAgICAgICAgICAgICBhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5NQVRIKVxuICAgICAgICAgICAgICAgIG1hdGhTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLk1FTlUpXG4gICAgICAgICAgICAgICAgbWVudVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gIT09ICQuSEVBRClcbiAgICAgICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuU1RZTEUgfHwgdG4gPT09ICQuVElUTEUpXG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5BU0lERSlcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5TTUFMTClcbiAgICAgICAgICAgICAgICBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5UQUJMRSlcbiAgICAgICAgICAgICAgICB0YWJsZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuRU1CRUQpXG4gICAgICAgICAgICAgICAgYXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuSU5QVVQpXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlBBUkFNIHx8IHRuID09PSAkLlRSQUNLKVxuICAgICAgICAgICAgICAgIHBhcmFtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5JTUFHRSlcbiAgICAgICAgICAgICAgICBpbWFnZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gIT09ICQuRlJBTUUgJiYgdG4gIT09ICQuVEJPRFkgJiYgdG4gIT09ICQuVEZPT1QgJiYgdG4gIT09ICQuVEhFQUQpXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlNDUklQVClcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkNFTlRFUiB8fCB0biA9PT0gJC5GSUdVUkUgfHwgdG4gPT09ICQuRk9PVEVSIHx8IHRuID09PSAkLkhFQURFUiB8fCB0biA9PT0gJC5IR1JPVVApXG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQlVUVE9OKVxuICAgICAgICAgICAgICAgIGJ1dHRvblN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuU1RSSUtFIHx8IHRuID09PSAkLlNUUk9ORylcbiAgICAgICAgICAgICAgICBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5BUFBMRVQgfHwgdG4gPT09ICQuT0JKRUNUKVxuICAgICAgICAgICAgICAgIGFwcGxldFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuS0VZR0VOKVxuICAgICAgICAgICAgICAgIGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlNPVVJDRSlcbiAgICAgICAgICAgICAgICBwYXJhbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuSUZSQU1FKVxuICAgICAgICAgICAgICAgIGlmcmFtZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuU0VMRUNUKVxuICAgICAgICAgICAgICAgIHNlbGVjdFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuT1BUSU9OKVxuICAgICAgICAgICAgICAgIG9wdGdyb3VwU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJHU09VTkQpXG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5ERVRBSUxTIHx8IHRuID09PSAkLkFERFJFU1MgfHwgdG4gPT09ICQuQVJUSUNMRSB8fCB0biA9PT0gJC5TRUNUSU9OIHx8IHRuID09PSAkLlNVTU1BUlkpXG4gICAgICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuTElTVElORylcbiAgICAgICAgICAgICAgICBwcmVTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLk1BUlFVRUUpXG4gICAgICAgICAgICAgICAgYXBwbGV0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5OT0VNQkVEKVxuICAgICAgICAgICAgICAgIG5vZW1iZWRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuICE9PSAkLkNBUFRJT04pXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJBU0VGT05UKVxuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuTUVOVUlURU0pXG4gICAgICAgICAgICAgICAgbWVudWl0ZW1TdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkZSQU1FU0VUKVxuICAgICAgICAgICAgICAgIGZyYW1lc2V0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5GSUVMRFNFVClcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5URVhUQVJFQSlcbiAgICAgICAgICAgICAgICB0ZXh0YXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuVEVNUExBVEUpXG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5OT1NDUklQVClcbiAgICAgICAgICAgICAgICBub2VtYmVkU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5PUFRHUk9VUClcbiAgICAgICAgICAgICAgICBvcHRncm91cFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gIT09ICQuQ09MR1JPVVApXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlBMQUlOVEVYVClcbiAgICAgICAgICAgICAgICBwbGFpbnRleHRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJMT0NLUVVPVEUgfHwgdG4gPT09ICQuRklHQ0FQVElPTilcbiAgICAgICAgICAgICAgICBhZGRyZXNzU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBib2R5RW5kVGFnSW5Cb2R5KHApIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLkJPRFkpKVxuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9CT0RZX01PREU7XG59XG5cbmZ1bmN0aW9uIGh0bWxFbmRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLkJPRFkpKSB7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEFGVEVSX0JPRFlfTU9ERTtcbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFkZHJlc3NFbmRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUodG4pKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKHRuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1FbmRUYWdJbkJvZHkocCkge1xuICAgIHZhciBpblRlbXBsYXRlID0gcC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMCxcbiAgICAgICAgZm9ybUVsZW1lbnQgPSBwLmZvcm1FbGVtZW50O1xuXG4gICAgaWYgKCFpblRlbXBsYXRlKVxuICAgICAgICBwLmZvcm1FbGVtZW50ID0gbnVsbDtcblxuICAgIGlmICgoZm9ybUVsZW1lbnQgfHwgaW5UZW1wbGF0ZSkgJiYgcC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZSgkLkZPUk0pKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcblxuICAgICAgICBpZiAoaW5UZW1wbGF0ZSlcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLkZPUk0pO1xuXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShmb3JtRWxlbWVudCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwRW5kVGFnSW5Cb2R5KHApIHtcbiAgICBpZiAoIXAub3BlbkVsZW1lbnRzLmhhc0luQnV0dG9uU2NvcGUoJC5QKSlcbiAgICAgICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoJC5QKTtcblxuICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbn1cblxuZnVuY3Rpb24gbGlFbmRUYWdJbkJvZHkocCkge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkxpc3RJdGVtU2NvcGUoJC5MSSkpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24oJC5MSSk7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLkxJKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRkRW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRuKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbih0bik7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJlZEhlYWRlckVuZFRhZ0luQm9keShwKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc051bWJlcmVkSGVhZGVySW5TY29wZSgpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxOdW1iZXJlZEhlYWRlclBvcHBlZCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXBwbGV0RW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRuKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmNsZWFyVG9MYXN0TWFya2VyKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBickVuZFRhZ0luQm9keShwKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRGYWtlRWxlbWVudCgkLkJSKTtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBmb3IgKHZhciBpID0gcC5vcGVuRWxlbWVudHMuc3RhY2tUb3A7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5pdGVtc1tpXTtcblxuICAgICAgICBpZiAocC50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVsZW1lbnQpID09PSB0bikge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24odG4pO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxFbGVtZW50UG9wcGVkKGVsZW1lbnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocC5faXNTcGVjaWFsRWxlbWVudChlbGVtZW50KSlcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cblxuLy9PUFRJTUlaQVRJT046IEludGVnZXIgY29tcGFyaXNvbnMgYXJlIGxvdy1jb3N0LCBzbyB3ZSBjYW4gdXNlIHZlcnkgZmFzdCB0YWcgbmFtZSBsZW5ndGggZmlsdGVycyBoZXJlLlxuLy9JdCdzIGZhc3RlciB0aGFuIHVzaW5nIGRpY3Rpb25hcnkuXG5mdW5jdGlvbiBlbmRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgc3dpdGNoICh0bi5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkEgfHwgdG4gPT09ICQuQiB8fCB0biA9PT0gJC5JIHx8IHRuID09PSAkLlMgfHwgdG4gPT09ICQuVSlcbiAgICAgICAgICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5QKVxuICAgICAgICAgICAgICAgIHBFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5ETCB8fCB0biA9PT0gJC5VTCB8fCB0biA9PT0gJC5PTClcbiAgICAgICAgICAgICAgICBhZGRyZXNzRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuTEkpXG4gICAgICAgICAgICAgICAgbGlFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5ERCB8fCB0biA9PT0gJC5EVClcbiAgICAgICAgICAgICAgICBkZEVuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkgxIHx8IHRuID09PSAkLkgyIHx8IHRuID09PSAkLkgzIHx8IHRuID09PSAkLkg0IHx8IHRuID09PSAkLkg1IHx8IHRuID09PSAkLkg2KVxuICAgICAgICAgICAgICAgIG51bWJlcmVkSGVhZGVyRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuQlIpXG4gICAgICAgICAgICAgICAgYnJFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5FTSB8fCB0biA9PT0gJC5UVClcbiAgICAgICAgICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5CSUcpXG4gICAgICAgICAgICAgICAgY2FsbEFkb3B0aW9uQWdlbmN5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuRElSIHx8IHRuID09PSAkLkRJViB8fCB0biA9PT0gJC5OQVYpXG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkJPRFkpXG4gICAgICAgICAgICAgICAgYm9keUVuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkhUTUwpXG4gICAgICAgICAgICAgICAgaHRtbEVuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkZPUk0pXG4gICAgICAgICAgICAgICAgZm9ybUVuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkNPREUgfHwgdG4gPT09ICQuRk9OVCB8fCB0biA9PT0gJC5OT0JSKVxuICAgICAgICAgICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLk1BSU4gfHwgdG4gPT09ICQuTUVOVSlcbiAgICAgICAgICAgICAgICBhZGRyZXNzRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuQVNJREUpXG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlNNQUxMKVxuICAgICAgICAgICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkNFTlRFUiB8fCB0biA9PT0gJC5GSUdVUkUgfHwgdG4gPT09ICQuRk9PVEVSIHx8IHRuID09PSAkLkhFQURFUiB8fCB0biA9PT0gJC5IR1JPVVApXG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLkFQUExFVCB8fCB0biA9PT0gJC5PQkpFQ1QpXG4gICAgICAgICAgICAgICAgYXBwbGV0RW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuU1RSSUtFIHx8IHRuID09PSAkLlNUUk9ORylcbiAgICAgICAgICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ2VuZXJpY0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5BRERSRVNTIHx8IHRuID09PSAkLkFSVElDTEUgfHwgdG4gPT09ICQuREVUQUlMUyB8fCB0biA9PT0gJC5TRUNUSU9OIHx8IHRuID09PSAkLlNVTU1BUlkpXG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLk1BUlFVRUUpXG4gICAgICAgICAgICAgICAgYXBwbGV0RW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuRklFTERTRVQpXG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKVxuICAgICAgICAgICAgICAgIGVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5CTE9DS1FVT1RFIHx8IHRuID09PSAkLkZJR0NBUFRJT04pXG4gICAgICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVvZkluQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tUb3AgPiAtMSlcbiAgICAgICAgZW9mSW5UZW1wbGF0ZShwLCB0b2tlbik7XG5cbiAgICBlbHNlXG4gICAgICAgIHAuc3RvcHBlZCA9IHRydWU7XG59XG5cbi8vMTIuMi41LjQuOCBUaGUgXCJ0ZXh0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBlbmRUYWdJblRleHQocCwgdG9rZW4pIHtcbiAgICBpZiAodG9rZW4udGFnTmFtZSA9PT0gJC5TQ1JJUFQpXG4gICAgICAgIHAucGVuZGluZ1NjcmlwdCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG5cbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbn1cblxuXG5mdW5jdGlvbiBlb2ZJblRleHQocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG5cbi8vMTIuMi41LjQuOSBUaGUgXCJpbiB0YWJsZVwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gY2hhcmFjdGVySW5UYWJsZShwLCB0b2tlbikge1xuICAgIHZhciBjdXJUbiA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lO1xuXG4gICAgaWYgKGN1clRuID09PSAkLlRBQkxFIHx8IGN1clRuID09PSAkLlRCT0RZIHx8IGN1clRuID09PSAkLlRGT09UIHx8IGN1clRuID09PSAkLlRIRUFEIHx8IGN1clRuID09PSAkLlRSKSB7XG4gICAgICAgIHAucGVuZGluZ0NoYXJhY3RlclRva2VucyA9IFtdO1xuICAgICAgICBwLmhhc05vbldoaXRlc3BhY2VQZW5kaW5nQ2hhcmFjdGVyVG9rZW4gPSBmYWxzZTtcbiAgICAgICAgcC5vcmlnaW5hbEluc2VydGlvbk1vZGUgPSBwLmluc2VydGlvbk1vZGU7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX1RFWFRfTU9ERTtcbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGNhcHRpb25TdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQ29udGV4dCgpO1xuICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmluc2VydE1hcmtlcigpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0NBUFRJT05fTU9ERTtcbn1cblxuZnVuY3Rpb24gY29sZ3JvdXBTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQ29udGV4dCgpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0NPTFVNTl9HUk9VUF9NT0RFO1xufVxuXG5mdW5jdGlvbiBjb2xTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQ29udGV4dCgpO1xuICAgIHAuX2luc2VydEZha2VFbGVtZW50KCQuQ09MR1JPVVApO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0NPTFVNTl9HUk9VUF9NT0RFO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHRib2R5U3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG59XG5cbmZ1bmN0aW9uIHRkU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLl9pbnNlcnRGYWtlRWxlbWVudCgkLlRCT0RZKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuZnVuY3Rpb24gdGFibGVTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVEFCTEUpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlRBQkxFKTtcbiAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbnB1dFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHZhciBpbnB1dFR5cGUgPSBUb2tlbml6ZXIuZ2V0VG9rZW5BdHRyKHRva2VuLCBBVFRSUy5UWVBFKTtcblxuICAgIGlmIChpbnB1dFR5cGUgJiYgaW5wdXRUeXBlLnRvTG93ZXJDYXNlKCkgPT09IEhJRERFTl9JTlBVVF9UWVBFKVxuICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcblxuICAgIGVsc2VcbiAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gZm9ybVN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIGlmICghcC5mb3JtRWxlbWVudCAmJiBwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPT09IDApIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG4gICAgICAgIHAuZm9ybUVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBzd2l0Y2ggKHRuLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuVEQgfHwgdG4gPT09ICQuVEggfHwgdG4gPT09ICQuVFIpXG4gICAgICAgICAgICAgICAgdGRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkNPTClcbiAgICAgICAgICAgICAgICBjb2xTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLkZPUk0pXG4gICAgICAgICAgICAgICAgZm9ybVN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuVEFCTEUpXG4gICAgICAgICAgICAgICAgdGFibGVTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlIGlmICh0biA9PT0gJC5TVFlMRSlcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlRCT0RZIHx8IHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIRUFEKVxuICAgICAgICAgICAgICAgIHRib2R5U3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09ICQuSU5QVVQpXG4gICAgICAgICAgICAgICAgaW5wdXRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlNDUklQVClcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICBpZiAodG4gPT09ICQuQ0FQVElPTilcbiAgICAgICAgICAgICAgICBjYXB0aW9uU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGlmICh0biA9PT0gJC5DT0xHUk9VUClcbiAgICAgICAgICAgICAgICBjb2xncm91cFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKVxuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcblxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG5cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgIH1cblxufVxuXG5mdW5jdGlvbiBlbmRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5UQUJMRSkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVEFCTEUpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5UQUJMRSk7XG4gICAgICAgICAgICBwLl9yZXNldEluc2VydGlvbk1vZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKVxuICAgICAgICBlbmRUYWdJbkhlYWQocCwgdG9rZW4pO1xuXG4gICAgZWxzZSBpZiAodG4gIT09ICQuQk9EWSAmJiB0biAhPT0gJC5DQVBUSU9OICYmIHRuICE9PSAkLkNPTCAmJiB0biAhPT0gJC5DT0xHUk9VUCAmJiB0biAhPT0gJC5IVE1MICYmXG4gICAgICAgICAgICAgdG4gIT09ICQuVEJPRFkgJiYgdG4gIT09ICQuVEQgJiYgdG4gIT09ICQuVEZPT1QgJiYgdG4gIT09ICQuVEggJiYgdG4gIT09ICQuVEhFQUQgJiYgdG4gIT09ICQuVFIpXG4gICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHRva2VuSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHZhciBzYXZlZEZvc3RlclBhcmVudGluZ1N0YXRlID0gcC5mb3N0ZXJQYXJlbnRpbmdFbmFibGVkO1xuXG4gICAgcC5mb3N0ZXJQYXJlbnRpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICBwLl9wcm9jZXNzVG9rZW5JbkJvZHlNb2RlKHRva2VuKTtcbiAgICBwLmZvc3RlclBhcmVudGluZ0VuYWJsZWQgPSBzYXZlZEZvc3RlclBhcmVudGluZ1N0YXRlO1xufVxuXG5cbi8vMTIuMi41LjQuMTAgVGhlIFwiaW4gdGFibGUgdGV4dFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gd2hpdGVzcGFjZUNoYXJhY3RlckluVGFibGVUZXh0KHAsIHRva2VuKSB7XG4gICAgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zLnB1c2godG9rZW4pO1xufVxuXG5mdW5jdGlvbiBjaGFyYWN0ZXJJblRhYmxlVGV4dChwLCB0b2tlbikge1xuICAgIHAucGVuZGluZ0NoYXJhY3RlclRva2Vucy5wdXNoKHRva2VuKTtcbiAgICBwLmhhc05vbldoaXRlc3BhY2VQZW5kaW5nQ2hhcmFjdGVyVG9rZW4gPSB0cnVlO1xufVxuXG5mdW5jdGlvbiB0b2tlbkluVGFibGVUZXh0KHAsIHRva2VuKSB7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgaWYgKHAuaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbikge1xuICAgICAgICBmb3IgKDsgaSA8IHAucGVuZGluZ0NoYXJhY3RlclRva2Vucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHRva2VuSW5UYWJsZShwLCBwLnBlbmRpbmdDaGFyYWN0ZXJUb2tlbnNbaV0pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IHAucGVuZGluZ0NoYXJhY3RlclRva2Vucy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIHAuX2luc2VydENoYXJhY3RlcnMocC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zW2ldKTtcbiAgICB9XG5cbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG5cbi8vMTIuMi41LjQuMTEgVGhlIFwiaW4gY2FwdGlvblwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkNhcHRpb24ocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkNBUFRJT04gfHwgdG4gPT09ICQuQ09MIHx8IHRuID09PSAkLkNPTEdST1VQIHx8IHRuID09PSAkLlRCT0RZIHx8XG4gICAgICAgIHRuID09PSAkLlREIHx8IHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIIHx8IHRuID09PSAkLlRIRUFEIHx8IHRuID09PSAkLlRSKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoJC5DQVBUSU9OKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuQ0FQVElPTik7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcbiAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5DYXB0aW9uKHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5DQVBUSU9OIHx8IHRuID09PSAkLlRBQkxFKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoJC5DQVBUSU9OKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuQ0FQVElPTik7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcblxuICAgICAgICAgICAgaWYgKHRuID09PSAkLlRBQkxFKVxuICAgICAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biAhPT0gJC5CT0RZICYmIHRuICE9PSAkLkNPTCAmJiB0biAhPT0gJC5DT0xHUk9VUCAmJiB0biAhPT0gJC5IVE1MICYmIHRuICE9PSAkLlRCT0RZICYmXG4gICAgICAgICAgICAgdG4gIT09ICQuVEQgJiYgdG4gIT09ICQuVEZPT1QgJiYgdG4gIT09ICQuVEggJiYgdG4gIT09ICQuVEhFQUQgJiYgdG4gIT09ICQuVFIpXG4gICAgICAgIGVuZFRhZ0luQm9keShwLCB0b2tlbik7XG59XG5cblxuLy8xMi4yLjUuNC4xMiBUaGUgXCJpbiBjb2x1bW4gZ3JvdXBcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5Db2x1bW5Hcm91cChwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuSFRNTClcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuQ09MKVxuICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcblxuICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKVxuICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG5cbiAgICBlbHNlXG4gICAgICAgIHRva2VuSW5Db2x1bW5Hcm91cChwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luQ29sdW1uR3JvdXAocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkNPTEdST1VQKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5DT0xHUk9VUCkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9NT0RFO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuVEVNUExBVEUpXG4gICAgICAgIGVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0biAhPT0gJC5DT0wpXG4gICAgICAgIHRva2VuSW5Db2x1bW5Hcm91cChwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIHRva2VuSW5Db2x1bW5Hcm91cChwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5DT0xHUk9VUCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcbiAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICB9XG59XG5cbi8vMTIuMi41LjQuMTMgVGhlIFwiaW4gdGFibGUgYm9keVwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJblRhYmxlQm9keShwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuVFIpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9ST1dfTU9ERTtcbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5USCB8fCB0biA9PT0gJC5URCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoJC5UUik7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1JPV19NT0RFO1xuICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKHRuID09PSAkLkNBUFRJT04gfHwgdG4gPT09ICQuQ09MIHx8IHRuID09PSAkLkNPTEdST1VQIHx8XG4gICAgICAgICAgICAgdG4gPT09ICQuVEJPRFkgfHwgdG4gPT09ICQuVEZPT1QgfHwgdG4gPT09ICQuVEhFQUQpIHtcblxuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzVGFibGVCb2R5Q29udGV4dEluVGFibGVTY29wZSgpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcbiAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luVGFibGVCb2R5KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5UQk9EWSB8fCB0biA9PT0gJC5URk9PVCB8fCB0biA9PT0gJC5USEVBRCkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKHRuKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX01PREU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5UQUJMRSkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzVGFibGVCb2R5Q29udGV4dEluVGFibGVTY29wZSgpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fVEFCTEVfTU9ERTtcbiAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biAhPT0gJC5CT0RZICYmIHRuICE9PSAkLkNBUFRJT04gJiYgdG4gIT09ICQuQ09MICYmIHRuICE9PSAkLkNPTEdST1VQIHx8XG4gICAgICAgICAgICAgdG4gIT09ICQuSFRNTCAmJiB0biAhPT0gJC5URCAmJiB0biAhPT0gJC5USCAmJiB0biAhPT0gJC5UUilcbiAgICAgICAgZW5kVGFnSW5UYWJsZShwLCB0b2tlbik7XG59XG5cbi8vMTIuMi41LjQuMTQgVGhlIFwiaW4gcm93XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luUm93KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5USCB8fCB0biA9PT0gJC5URCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fQ0VMTF9NT0RFO1xuICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5DQVBUSU9OIHx8IHRuID09PSAkLkNPTCB8fCB0biA9PT0gJC5DT0xHUk9VUCB8fCB0biA9PT0gJC5UQk9EWSB8fFxuICAgICAgICAgICAgIHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIRUFEIHx8IHRuID09PSAkLlRSKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoJC5UUikpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0KCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX1RBQkxFX0JPRFlfTU9ERTtcbiAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luUm93KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5UUikge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVFIpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5UQUJMRSkge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVFIpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuVEJPRFkgfHwgdG4gPT09ICQuVEZPT1QgfHwgdG4gPT09ICQuVEhFQUQpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSh0bikgfHwgcC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKCQuVFIpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9UQUJMRV9CT0RZX01PREU7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gIT09ICQuQk9EWSAmJiB0biAhPT0gJC5DQVBUSU9OICYmIHRuICE9PSAkLkNPTCAmJiB0biAhPT0gJC5DT0xHUk9VUCB8fFxuICAgICAgICAgICAgIHRuICE9PSAkLkhUTUwgJiYgdG4gIT09ICQuVEQgJiYgdG4gIT09ICQuVEgpXG4gICAgICAgIGVuZFRhZ0luVGFibGUocCwgdG9rZW4pO1xufVxuXG5cbi8vMTIuMi41LjQuMTUgVGhlIFwiaW4gY2VsbFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkNlbGwocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkNBUFRJT04gfHwgdG4gPT09ICQuQ09MIHx8IHRuID09PSAkLkNPTEdST1VQIHx8IHRuID09PSAkLlRCT0RZIHx8XG4gICAgICAgIHRuID09PSAkLlREIHx8IHRuID09PSAkLlRGT09UIHx8IHRuID09PSAkLlRIIHx8IHRuID09PSAkLlRIRUFEIHx8IHRuID09PSAkLlRSKSB7XG5cbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSgkLlREKSB8fCBwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoJC5USCkpIHtcbiAgICAgICAgICAgIHAuX2Nsb3NlVGFibGVDZWxsKCk7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0luQ2VsbChwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuVEQgfHwgdG4gPT09ICQuVEgpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSh0bikpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSU5fUk9XX01PREU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5UQUJMRSB8fCB0biA9PT0gJC5UQk9EWSB8fCB0biA9PT0gJC5URk9PVCB8fCB0biA9PT0gJC5USEVBRCB8fCB0biA9PT0gJC5UUikge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKHRuKSkge1xuICAgICAgICAgICAgcC5fY2xvc2VUYWJsZUNlbGwoKTtcbiAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biAhPT0gJC5CT0RZICYmIHRuICE9PSAkLkNBUFRJT04gJiYgdG4gIT09ICQuQ09MICYmIHRuICE9PSAkLkNPTEdST1VQICYmIHRuICE9PSAkLkhUTUwpXG4gICAgICAgIGVuZFRhZ0luQm9keShwLCB0b2tlbik7XG59XG5cbi8vMTIuMi41LjQuMTYgVGhlIFwiaW4gc2VsZWN0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luU2VsZWN0KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IVE1MKVxuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5PUFRJT04pIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLk9QVElPTilcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuXG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIE5TLkhUTUwpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKHRuID09PSAkLk9QVEdST1VQKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5PUFRJT04pXG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgPT09ICQuT1BUR1JPVVApXG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBOUy5IVE1MKTtcbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5JTlBVVCB8fCB0biA9PT0gJC5LRVlHRU4gfHwgdG4gPT09ICQuVEVYVEFSRUEgfHwgdG4gPT09ICQuU0VMRUNUKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNlbGVjdFNjb3BlKCQuU0VMRUNUKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuU0VMRUNUKTtcbiAgICAgICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuXG4gICAgICAgICAgICBpZiAodG4gIT09ICQuU0VMRUNUKVxuICAgICAgICAgICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5TQ1JJUFQgfHwgdG4gPT09ICQuVEVNUExBVEUpXG4gICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5TZWxlY3QocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLk9QVEdST1VQKSB7XG4gICAgICAgIHZhciBwcmV2T3BlbkVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5pdGVtc1twLm9wZW5FbGVtZW50cy5zdGFja1RvcCAtIDFdLFxuICAgICAgICAgICAgcHJldk9wZW5FbGVtZW50VG4gPSBwcmV2T3BlbkVsZW1lbnQgJiYgcC50cmVlQWRhcHRlci5nZXRUYWdOYW1lKHByZXZPcGVuRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdOYW1lID09PSAkLk9QVElPTiAmJiBwcmV2T3BlbkVsZW1lbnRUbiA9PT0gJC5PUFRHUk9VUClcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuXG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnTmFtZSA9PT0gJC5PUFRHUk9VUClcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKHRuID09PSAkLk9QVElPTikge1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgPT09ICQuT1BUSU9OKVxuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgfVxuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuU0VMRUNUICYmIHAub3BlbkVsZW1lbnRzLmhhc0luU2VsZWN0U2NvcGUoJC5TRUxFQ1QpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCgkLlNFTEVDVCk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgIH1cblxuICAgIGVsc2UgaWYgKHRuID09PSAkLlRFTVBMQVRFKVxuICAgICAgICBlbmRUYWdJbkhlYWQocCwgdG9rZW4pO1xufVxuXG4vLzEyLjIuNS40LjE3IFRoZSBcImluIHNlbGVjdCBpbiB0YWJsZVwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJblNlbGVjdEluVGFibGUocCwgdG9rZW4pIHtcbiAgICB2YXIgdG4gPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRuID09PSAkLkNBUFRJT04gfHwgdG4gPT09ICQuVEFCTEUgfHwgdG4gPT09ICQuVEJPRFkgfHwgdG4gPT09ICQuVEZPT1QgfHxcbiAgICAgICAgdG4gPT09ICQuVEhFQUQgfHwgdG4gPT09ICQuVFIgfHwgdG4gPT09ICQuVEQgfHwgdG4gPT09ICQuVEgpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKCQuU0VMRUNUKTtcbiAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICBzdGFydFRhZ0luU2VsZWN0KHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5TZWxlY3RJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5DQVBUSU9OIHx8IHRuID09PSAkLlRBQkxFIHx8IHRuID09PSAkLlRCT0RZIHx8IHRuID09PSAkLlRGT09UIHx8XG4gICAgICAgIHRuID09PSAkLlRIRUFEIHx8IHRuID09PSAkLlRSIHx8IHRuID09PSAkLlREIHx8IHRuID09PSAkLlRIKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUodG4pKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5TRUxFQ1QpO1xuICAgICAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZWxzZVxuICAgICAgICBlbmRUYWdJblNlbGVjdChwLCB0b2tlbik7XG59XG5cbi8vMTIuMi41LjQuMTggVGhlIFwiaW4gdGVtcGxhdGVcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5UZW1wbGF0ZShwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuQkFTRSB8fCB0biA9PT0gJC5CQVNFRk9OVCB8fCB0biA9PT0gJC5CR1NPVU5EIHx8IHRuID09PSAkLkxJTksgfHwgdG4gPT09ICQuTUVUQSB8fFxuICAgICAgICB0biA9PT0gJC5OT0ZSQU1FUyB8fCB0biA9PT0gJC5TQ1JJUFQgfHwgdG4gPT09ICQuU1RZTEUgfHwgdG4gPT09ICQuVEVNUExBVEUgfHwgdG4gPT09ICQuVElUTEUpXG4gICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcblxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgbmV3SW5zZXJ0aW9uTW9kZSA9IFRFTVBMQVRFX0lOU0VSVElPTl9NT0RFX1NXSVRDSF9NQVBbdG5dIHx8IElOX0JPRFlfTU9ERTtcblxuICAgICAgICBwLl9wb3BUbXBsSW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICBwLl9wdXNoVG1wbEluc2VydGlvbk1vZGUobmV3SW5zZXJ0aW9uTW9kZSk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IG5ld0luc2VydGlvbk1vZGU7XG4gICAgICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlbmRUYWdJblRlbXBsYXRlKHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuVEVNUExBVEUpXG4gICAgICAgIGVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVvZkluVGVtcGxhdGUocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoJC5URU1QTEFURSk7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmNsZWFyVG9MYXN0TWFya2VyKCk7XG4gICAgICAgIHAuX3BvcFRtcGxJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgIH1cblxuICAgIGVsc2VcbiAgICAgICAgcC5zdG9wcGVkID0gdHJ1ZTtcbn1cblxuXG4vLzEyLjIuNS40LjE5IFRoZSBcImFmdGVyIGJvZHlcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJCb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuSFRNTClcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgZWxzZVxuICAgICAgICB0b2tlbkFmdGVyQm9keShwLCB0b2tlbik7XG59XG5cbmZ1bmN0aW9uIGVuZFRhZ0FmdGVyQm9keShwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdOYW1lID09PSAkLkhUTUwpIHtcbiAgICAgICAgaWYgKCFwLmZyYWdtZW50Q29udGV4dClcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEFGVEVSX0FGVEVSX0JPRFlfTU9ERTtcbiAgICB9XG5cbiAgICBlbHNlXG4gICAgICAgIHRva2VuQWZ0ZXJCb2R5KHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gdG9rZW5BZnRlckJvZHkocCwgdG9rZW4pIHtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJTl9CT0RZX01PREU7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cblxuLy8xMi4yLjUuNC4yMCBUaGUgXCJpbiBmcmFtZXNldFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IVE1MKVxuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5GUkFNRVNFVClcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5GUkFNRSlcbiAgICAgICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgTlMuSFRNTCk7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5OT0ZSQU1FUylcbiAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiBlbmRUYWdJbkZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuRlJBTUVTRVQgJiYgIXAub3BlbkVsZW1lbnRzLmlzUm9vdEh0bWxFbGVtZW50Q3VycmVudCgpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuXG4gICAgICAgIGlmICghcC5mcmFnbWVudENvbnRleHQgJiYgcC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ05hbWUgIT09ICQuRlJBTUVTRVQpXG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBBRlRFUl9GUkFNRVNFVF9NT0RFO1xuICAgIH1cbn1cblxuLy8xMi4yLjUuNC4yMSBUaGUgXCJhZnRlciBmcmFtZXNldFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdBZnRlckZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgdmFyIHRuID0gdG9rZW4udGFnTmFtZTtcblxuICAgIGlmICh0biA9PT0gJC5IVE1MKVxuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG5cbiAgICBlbHNlIGlmICh0biA9PT0gJC5OT0ZSQU1FUylcbiAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xufVxuXG5mdW5jdGlvbiBlbmRUYWdBZnRlckZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuSFRNTClcbiAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gQUZURVJfQUZURVJfRlJBTUVTRVRfTU9ERTtcbn1cblxuLy8xMi4yLjUuNC4yMiBUaGUgXCJhZnRlciBhZnRlciBib2R5XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0FmdGVyQWZ0ZXJCb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ05hbWUgPT09ICQuSFRNTClcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgZWxzZVxuICAgICAgICB0b2tlbkFmdGVyQWZ0ZXJCb2R5KHAsIHRva2VuKTtcbn1cblxuZnVuY3Rpb24gdG9rZW5BZnRlckFmdGVyQm9keShwLCB0b2tlbikge1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IElOX0JPRFlfTU9ERTtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuXG4vLzEyLjIuNS40LjIzIFRoZSBcImFmdGVyIGFmdGVyIGZyYW1lc2V0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0FmdGVyQWZ0ZXJGcmFtZXNldChwLCB0b2tlbikge1xuICAgIHZhciB0biA9IHRva2VuLnRhZ05hbWU7XG5cbiAgICBpZiAodG4gPT09ICQuSFRNTClcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuXG4gICAgZWxzZSBpZiAodG4gPT09ICQuTk9GUkFNRVMpXG4gICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbn1cblxuXG4vLzEyLjIuNS41IFRoZSBydWxlcyBmb3IgcGFyc2luZyB0b2tlbnMgaW4gZm9yZWlnbiBjb250ZW50XG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gbnVsbENoYXJhY3RlckluRm9yZWlnbkNvbnRlbnQocCwgdG9rZW4pIHtcbiAgICB0b2tlbi5jaGFycyA9IFVOSUNPREUuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgIHAuX2luc2VydENoYXJhY3RlcnModG9rZW4pO1xufVxuXG5mdW5jdGlvbiBjaGFyYWN0ZXJJbkZvcmVpZ25Db250ZW50KHAsIHRva2VuKSB7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIGlmIChmb3JlaWduQ29udGVudC5jYXVzZXNFeGl0KHRva2VuKSAmJiAhcC5mcmFnbWVudENvbnRleHQpIHtcbiAgICAgICAgd2hpbGUgKHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHAub3BlbkVsZW1lbnRzLmN1cnJlbnQpICE9PSBOUy5IVE1MICYmICFwLl9pc0ludGVncmF0aW9uUG9pbnQocC5vcGVuRWxlbWVudHMuY3VycmVudCkpXG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcblxuICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY3VycmVudCA9IHAuX2dldEFkanVzdGVkQ3VycmVudEVsZW1lbnQoKSxcbiAgICAgICAgICAgIGN1cnJlbnROcyA9IHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGN1cnJlbnQpO1xuXG4gICAgICAgIGlmIChjdXJyZW50TnMgPT09IE5TLk1BVEhNTClcbiAgICAgICAgICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuTWF0aE1MQXR0cnModG9rZW4pO1xuXG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnROcyA9PT0gTlMuU1ZHKSB7XG4gICAgICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblNWR1RhZ05hbWUodG9rZW4pO1xuICAgICAgICAgICAgZm9yZWlnbkNvbnRlbnQuYWRqdXN0VG9rZW5TVkdBdHRycyh0b2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblhNTEF0dHJzKHRva2VuKTtcblxuICAgICAgICBpZiAodG9rZW4uc2VsZkNsb3NpbmcpXG4gICAgICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBjdXJyZW50TnMpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBjdXJyZW50TnMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZW5kVGFnSW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIGZvciAodmFyIGkgPSBwLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+IDA7IGktLSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zW2ldO1xuXG4gICAgICAgIGlmIChwLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShlbGVtZW50KSA9PT0gTlMuSFRNTCkge1xuICAgICAgICAgICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHAudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShlbGVtZW50KS50b0xvd2VyQ2FzZSgpID09PSB0b2tlbi50YWdOYW1lKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbEVsZW1lbnRQb3BwZWQoZWxlbWVudCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==