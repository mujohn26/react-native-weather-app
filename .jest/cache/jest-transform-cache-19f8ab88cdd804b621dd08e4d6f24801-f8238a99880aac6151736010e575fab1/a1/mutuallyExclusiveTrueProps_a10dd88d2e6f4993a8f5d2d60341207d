4ee78d4081a34637895fd8a82aed5bf5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = mutuallyExclusiveTrue;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function mutuallyExclusiveTrue() {
  for (var _len = arguments.length, exclusiveProps = new Array(_len), _key = 0; _key < _len; _key++) {
    exclusiveProps[_key] = arguments[_key];
  }

  if (exclusiveProps.length < 1) {
    throw new TypeError('at least one prop that is mutually exclusive is required');
  }

  if (!exclusiveProps.every(function (x) {
    return typeof x === 'string';
  })) {
    throw new TypeError('all exclusive true props must be strings');
  }

  var propsList = exclusiveProps.join(', or ');

  var validator = function mutuallyExclusiveTrueProps(props, propName, componentName) {
    var countProps = function countProps(count, prop) {
      return count + (props[prop] ? 1 : 0);
    };

    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);

    if (exclusivePropCount > 1) {
      return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
  };

  validator.isRequired = function mutuallyExclusiveTruePropsRequired(props, propName, componentName) {
    var countProps = function countProps(count, prop) {
      return count + (props[prop] ? 1 : 0);
    };

    var exclusivePropCount = exclusiveProps.reduce(countProps, 0);

    if (exclusivePropCount > 1) {
      return new Error("A ".concat(componentName, " cannot have more than one of these boolean props be true: ").concat(propsList));
    }

    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      rest[_key3 - 3] = arguments[_key3];
    }

    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, "mutuallyExclusiveTrueProps: ".concat(propsList), exclusiveProps);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wcy5qcyJdLCJuYW1lcyI6WyJleGNsdXNpdmVQcm9wcyIsInByb3BzTGlzdCIsInZhbGlkYXRvciIsInJlc3QiLCJjb3VudFByb3BzIiwiY291bnQiLCJwcm9wcyIsImV4Y2x1c2l2ZVByb3BDb3VudCIsImJvb2wiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLFVBQUEsR0FBQSxPQUFBLENBQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOzs7Ozs7OztBQUVlLFNBQUEscUJBQUEsR0FBa0Q7QUFBQSxPQUFBLElBQUEsSUFBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBQWhCQSxjQUFnQixHQUFBLElBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFoQkEsSUFBQUEsY0FBZ0IsQ0FBQSxJQUFBLENBQWhCQSxHQUFnQixTQUFBLENBQUEsSUFBQSxDQUFoQkE7QUFBZ0I7O0FBQy9ELE1BQUlBLGNBQWMsQ0FBZEEsTUFBQUEsR0FBSixDQUFBLEVBQStCO0FBQzdCLFVBQU0sSUFBQSxTQUFBLENBQU4sMERBQU0sQ0FBTjtBQUNEOztBQUNELE1BQUksQ0FBQyxjQUFjLENBQWQsS0FBQSxDQUFxQixVQUFBLENBQUEsRUFBQTtBQUFBLFdBQU8sT0FBQSxDQUFBLEtBQVAsUUFBQTtBQUExQixHQUFLLENBQUwsRUFBeUQ7QUFDdkQsVUFBTSxJQUFBLFNBQUEsQ0FBTiwwQ0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUyxHQUFHRCxjQUFjLENBQWRBLElBQUFBLENBQWxCLE9BQWtCQSxDQUFsQjs7QUFFQSxNQUFNRSxTQUFTLEdBQUcsU0FBQSwwQkFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUE2RTtBQUM3RixRQUFNRSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7QUFBQSxhQUFrQkMsS0FBSyxJQUFJQyxLQUFLLENBQUxBLElBQUssQ0FBTEEsR0FBQUEsQ0FBQUEsR0FBM0IsQ0FBdUIsQ0FBdkI7QUFBbkIsS0FBQTs7QUFFQSxRQUFNQyxrQkFBa0IsR0FBR1AsY0FBYyxDQUFkQSxNQUFBQSxDQUFBQSxVQUFBQSxFQUEzQixDQUEyQkEsQ0FBM0I7O0FBQ0EsUUFBSU8sa0JBQWtCLEdBQXRCLENBQUEsRUFBNEI7QUFDMUIsYUFBTyxJQUFBLEtBQUEsQ0FBQSxLQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsNkRBQUEsRUFBQSxNQUFBLENBQVAsU0FBTyxDQUFBLENBQVA7QUFDRDs7QUFONEYsU0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFOSixJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsS0FBQSxDQUFOQTtBQUFNOztBQU83RixXQUFPSyxVQUFBQSxDQUFBQSxJQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxLQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxLQUFBQSxFQUFBQSxRQUFBQSxFQUFBQSxhQUFBQSxFQUFBQSxNQUFBQSxDQUFQLElBQU9BLENBQUFBLENBQVA7QUFQRixHQUFBOztBQVVBTixFQUFBQSxTQUFTLENBQVRBLFVBQUFBLEdBQXVCLFNBQUEsa0NBQUEsQ0FBQSxLQUFBLEVBQUEsUUFBQSxFQUFBLGFBQUEsRUFLckI7QUFDQSxRQUFNRSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUE7QUFBQSxhQUFrQkMsS0FBSyxJQUFJQyxLQUFLLENBQUxBLElBQUssQ0FBTEEsR0FBQUEsQ0FBQUEsR0FBM0IsQ0FBdUIsQ0FBdkI7QUFBbkIsS0FBQTs7QUFFQSxRQUFNQyxrQkFBa0IsR0FBR1AsY0FBYyxDQUFkQSxNQUFBQSxDQUFBQSxVQUFBQSxFQUEzQixDQUEyQkEsQ0FBM0I7O0FBQ0EsUUFBSU8sa0JBQWtCLEdBQXRCLENBQUEsRUFBNEI7QUFDMUIsYUFBTyxJQUFBLEtBQUEsQ0FBQSxLQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsNkRBQUEsRUFBQSxNQUFBLENBQVAsU0FBTyxDQUFBLENBQVA7QUFDRDs7QUFORCxTQUFBLElBQUEsS0FBQSxHQUFBLFNBQUEsQ0FBQSxNQUFBLEVBREdKLElBQ0gsR0FBQSxJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLEtBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLENBQUEsRUFBQSxLQUFBLEdBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxFQUFBO0FBREdBLE1BQUFBLElBQ0gsQ0FBQSxLQUFBLEdBQUEsQ0FBQSxDQURHQSxHQUNILFNBQUEsQ0FBQSxLQUFBLENBREdBO0FBQ0g7O0FBT0EsV0FBT0ssVUFBQUEsQ0FBQUEsSUFBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsVUFBQUEsQ0FBQUEsSUFBQUEsRUFBQUEsQ0FBQUEsS0FBQUEsRUFBQUEsUUFBQUEsRUFBQUEsYUFBQUEsRUFBQUEsTUFBQUEsQ0FBUCxJQUFPQSxDQUFBQSxDQUFQO0FBWkZOLEdBQUFBOztBQWVBLFNBQU8sQ0FBQSxHQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxTQUFBLEVBQUEsK0JBQUEsTUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUFQLGNBQU8sQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbCB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtdXR1YWxseUV4Y2x1c2l2ZVRydWUoLi4uZXhjbHVzaXZlUHJvcHMpIHtcbiAgaWYgKGV4Y2x1c2l2ZVByb3BzLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdCBsZWFzdCBvbmUgcHJvcCB0aGF0IGlzIG11dHVhbGx5IGV4Y2x1c2l2ZSBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGlmICghZXhjbHVzaXZlUHJvcHMuZXZlcnkoKHgpID0+IHR5cGVvZiB4ID09PSAnc3RyaW5nJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhbGwgZXhjbHVzaXZlIHRydWUgcHJvcHMgbXVzdCBiZSBzdHJpbmdzJyk7XG4gIH1cblxuICBjb25zdCBwcm9wc0xpc3QgPSBleGNsdXNpdmVQcm9wcy5qb2luKCcsIG9yICcpO1xuXG4gIGNvbnN0IHZhbGlkYXRvciA9IGZ1bmN0aW9uIG11dHVhbGx5RXhjbHVzaXZlVHJ1ZVByb3BzKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICAgIGNvbnN0IGNvdW50UHJvcHMgPSAoY291bnQsIHByb3ApID0+IChjb3VudCArIChwcm9wc1twcm9wXSA/IDEgOiAwKSk7XG5cbiAgICBjb25zdCBleGNsdXNpdmVQcm9wQ291bnQgPSBleGNsdXNpdmVQcm9wcy5yZWR1Y2UoY291bnRQcm9wcywgMCk7XG4gICAgaWYgKGV4Y2x1c2l2ZVByb3BDb3VudCA+IDEpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYEEgJHtjb21wb25lbnROYW1lfSBjYW5ub3QgaGF2ZSBtb3JlIHRoYW4gb25lIG9mIHRoZXNlIGJvb2xlYW4gcHJvcHMgYmUgdHJ1ZTogJHtwcm9wc0xpc3R9YCk7XG4gICAgfVxuICAgIHJldHVybiBib29sKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgdmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBmdW5jdGlvbiBtdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wc1JlcXVpcmVkKFxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgLi4ucmVzdFxuICApIHtcbiAgICBjb25zdCBjb3VudFByb3BzID0gKGNvdW50LCBwcm9wKSA9PiAoY291bnQgKyAocHJvcHNbcHJvcF0gPyAxIDogMCkpO1xuXG4gICAgY29uc3QgZXhjbHVzaXZlUHJvcENvdW50ID0gZXhjbHVzaXZlUHJvcHMucmVkdWNlKGNvdW50UHJvcHMsIDApO1xuICAgIGlmIChleGNsdXNpdmVQcm9wQ291bnQgPiAxKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBBICR7Y29tcG9uZW50TmFtZX0gY2Fubm90IGhhdmUgbW9yZSB0aGFuIG9uZSBvZiB0aGVzZSBib29sZWFuIHByb3BzIGJlIHRydWU6ICR7cHJvcHNMaXN0fWApO1xuICAgIH1cbiAgICByZXR1cm4gYm9vbC5pc1JlcXVpcmVkKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBgbXV0dWFsbHlFeGNsdXNpdmVUcnVlUHJvcHM6ICR7cHJvcHNMaXN0fWAsIGV4Y2x1c2l2ZVByb3BzKTtcbn1cbiJdfQ==