7c8e560dd897e4d2c0130cafdae78f75
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = keysOfValidator;

var _isPrimitive = _interopRequireDefault(require("./helpers/isPrimitive"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function keysOfValidator(propType) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keysOf';

  if (typeof propType !== 'function') {
    throw new TypeError('argument to keysOf must be a valid PropType function');
  }

  var validator = function keysOf(props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    var propValue = props[propName];

    if (propValue == null || (0, _isPrimitive["default"])(propValue)) {
      return null;
    }

    var firstError = null;
    Object.keys(propValue).some(function (key) {
      firstError = propType.apply(void 0, [_defineProperty({}, key, key), key, componentName, location, "(".concat(propFullName, ").").concat(key)].concat(rest));
      return firstError != null;
    });
    return firstError || null;
  };

  validator.isRequired = function keyedByRequired(props, propName, componentName) {
    var propValue = props[propName];

    if (propValue == null) {
      return new TypeError("".concat(componentName, ": ").concat(propName, " is required, but value is ").concat(propValue));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return validator.apply(void 0, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, name, propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXlzT2YuanMiXSwibmFtZXMiOlsibmFtZSIsInZhbGlkYXRvciIsInJlc3QiLCJwcm9wVmFsdWUiLCJwcm9wcyIsImZpcnN0RXJyb3IiLCJPYmplY3QiLCJwcm9wVHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUEsWUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSx5QkFBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVlLFNBQUEsZUFBQSxDQUFBLFFBQUEsRUFBb0Q7QUFBQSxNQUFqQkEsSUFBaUIsR0FBQSxTQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLEtBQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsR0FBVixRQUFVOztBQUNqRSxNQUFJLE9BQUEsUUFBQSxLQUFKLFVBQUEsRUFBb0M7QUFDbEMsVUFBTSxJQUFBLFNBQUEsQ0FBTixzREFBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUyxHQUFHLFNBQUEsTUFBQSxDQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUEsYUFBQSxFQUFBLFFBQUEsRUFBQSxZQUFBLEVBT2hCO0FBQUEsU0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQURHQyxJQUNILEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQURHQSxNQUFBQSxJQUNILENBQUEsSUFBQSxHQUFBLENBQUEsQ0FER0EsR0FDSCxTQUFBLENBQUEsSUFBQSxDQURHQTtBQUNIOztBQUFBLFFBQ29CQyxTQURwQixHQUNrQ0MsS0FEbEMsQ0FBQSxRQUFBLENBQUE7O0FBR0EsUUFBSUQsU0FBUyxJQUFUQSxJQUFBQSxJQUFxQixDQUFBLEdBQUEsWUFBQSxDQUFBLFNBQUEsQ0FBQSxFQUF6QixTQUF5QixDQUF6QixFQUFpRDtBQUMvQyxhQUFBLElBQUE7QUFDRDs7QUFFRCxRQUFJRSxVQUFVLEdBQWQsSUFBQTtBQUNBQyxJQUFBQSxNQUFNLENBQU5BLElBQUFBLENBQUFBLFNBQUFBLEVBQUFBLElBQUFBLENBQTRCLFVBQUEsR0FBQSxFQUFTO0FBQ25DRCxNQUFBQSxVQUFVLEdBQUdFLFFBQVEsQ0FBUkEsS0FBQUEsQ0FBQUEsS0FBQUEsQ0FBQUEsRUFBQUEsQ0FBQUEsZUFBQUEsQ0FBQUEsRUFBQUEsRUFBQUEsR0FBQUEsRUFBQUEsR0FBQUEsQ0FBQUEsRUFBQUEsR0FBQUEsRUFBQUEsYUFBQUEsRUFBQUEsUUFBQUEsRUFBQUEsSUFBQUEsTUFBQUEsQ0FBQUEsWUFBQUEsRUFBQUEsSUFBQUEsRUFBQUEsTUFBQUEsQ0FBQUEsR0FBQUEsQ0FBQUEsRUFBQUEsTUFBQUEsQ0FBYkYsSUFBYUUsQ0FBQUEsQ0FBYkY7QUFRQSxhQUFPQSxVQUFVLElBQWpCLElBQUE7QUFURkMsS0FBQUE7QUFXQSxXQUFPRCxVQUFVLElBQWpCLElBQUE7QUExQkYsR0FBQTs7QUE2QkFKLEVBQUFBLFNBQVMsQ0FBVEEsVUFBQUEsR0FBdUIsU0FBQSxlQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQWtFO0FBQUEsUUFDbkVFLFNBRG1FLEdBQ3JEQyxLQURxRCxDQUFBLFFBQUEsQ0FBQTs7QUFHdkYsUUFBSUQsU0FBUyxJQUFiLElBQUEsRUFBdUI7QUFDckIsYUFBTyxJQUFBLFNBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxhQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsQ0FBQSxRQUFBLEVBQUEsNkJBQUEsRUFBQSxNQUFBLENBQVAsU0FBTyxDQUFBLENBQVA7QUFDRDs7QUFMc0YsU0FBQSxJQUFBLEtBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFORCxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsS0FBQSxHQUFBLENBQUEsR0FBQSxLQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsR0FBQSxDQUFBLEVBQUEsS0FBQSxHQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsRUFBQTtBQUFOQSxNQUFBQSxJQUFNLENBQUEsS0FBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsS0FBQSxDQUFOQTtBQUFNOztBQU92RixXQUFPRCxTQUFTLENBQVRBLEtBQUFBLENBQUFBLEtBQUFBLENBQUFBLEVBQUFBLENBQUFBLEtBQUFBLEVBQUFBLFFBQUFBLEVBQUFBLGFBQUFBLEVBQUFBLE1BQUFBLENBQVAsSUFBT0EsQ0FBQUEsQ0FBUDtBQVBGQSxHQUFBQTs7QUFVQSxTQUFPLENBQUEsR0FBQSxjQUFBLENBQUEsU0FBQSxDQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBUCxRQUFPLENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpc1ByaW1pdGl2ZSBmcm9tICcuL2hlbHBlcnMvaXNQcmltaXRpdmUnO1xuaW1wb3J0IHdyYXBWYWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlzT2ZWYWxpZGF0b3IocHJvcFR5cGUsIG5hbWUgPSAna2V5c09mJykge1xuICBpZiAodHlwZW9mIHByb3BUeXBlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYXJndW1lbnQgdG8ga2V5c09mIG11c3QgYmUgYSB2YWxpZCBQcm9wVHlwZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgY29uc3QgdmFsaWRhdG9yID0gZnVuY3Rpb24ga2V5c09mKFxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgbG9jYXRpb24sXG4gICAgcHJvcEZ1bGxOYW1lLFxuICAgIC4uLnJlc3RcbiAgKSB7XG4gICAgY29uc3QgeyBbcHJvcE5hbWVdOiBwcm9wVmFsdWUgfSA9IHByb3BzO1xuXG4gICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsIHx8IGlzUHJpbWl0aXZlKHByb3BWYWx1ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBmaXJzdEVycm9yID0gbnVsbDtcbiAgICBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnNvbWUoKGtleSkgPT4ge1xuICAgICAgZmlyc3RFcnJvciA9IHByb3BUeXBlKFxuICAgICAgICB7IFtrZXldOiBrZXkgfSxcbiAgICAgICAga2V5LFxuICAgICAgICBjb21wb25lbnROYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgYCgke3Byb3BGdWxsTmFtZX0pLiR7a2V5fWAsXG4gICAgICAgIC4uLnJlc3QsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGZpcnN0RXJyb3IgIT0gbnVsbDtcbiAgICB9KTtcbiAgICByZXR1cm4gZmlyc3RFcnJvciB8fCBudWxsO1xuICB9O1xuXG4gIHZhbGlkYXRvci5pc1JlcXVpcmVkID0gZnVuY3Rpb24ga2V5ZWRCeVJlcXVpcmVkKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCkge1xuICAgIGNvbnN0IHsgW3Byb3BOYW1lXTogcHJvcFZhbHVlIH0gPSBwcm9wcztcblxuICAgIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZX06ICR7cHJvcE5hbWV9IGlzIHJlcXVpcmVkLCBidXQgdmFsdWUgaXMgJHtwcm9wVmFsdWV9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9O1xuXG4gIHJldHVybiB3cmFwVmFsaWRhdG9yKHZhbGlkYXRvciwgbmFtZSwgcHJvcFR5cGUpO1xufVxuIl19