1331342a03f1ca7e969531f66102efcb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = booleanSomeValidator;

var _propTypes = require("prop-types");

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function booleanSomeValidator() {
  for (var _len = arguments.length, notAllPropsFalse = new Array(_len), _key = 0; _key < _len; _key++) {
    notAllPropsFalse[_key] = arguments[_key];
  }

  if (notAllPropsFalse.length < 1) {
    throw new TypeError('at least one prop (one of which must be `true`) is required');
  }

  if (!notAllPropsFalse.every(function (x) {
    return typeof x === 'string';
  })) {
    throw new TypeError('all booleanSome props must be strings');
  }

  var propsList = notAllPropsFalse.join(', or ');

  var validator = function booleanSome(props, propName, componentName) {
    var countFalse = function countFalse(count, prop) {
      return count + (props[prop] === false ? 1 : 0);
    };

    var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);

    if (falsePropCount === notAllPropsFalse.length) {
      return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return _propTypes.bool.apply(void 0, [props, propName, componentName].concat(rest));
  };

  validator.isRequired = function booleanSomeRequired(props, propName, componentName) {
    var countFalse = function countFalse(count, prop) {
      return count + (props[prop] === false ? 1 : 0);
    };

    var falsePropCount = notAllPropsFalse.reduce(countFalse, 0);

    if (falsePropCount === notAllPropsFalse.length) {
      return new Error("A ".concat(componentName, " must have at least one of these boolean props be `true`: ").concat(propsList));
    }

    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      rest[_key3 - 3] = arguments[_key3];
    }

    return _propTypes.bool.isRequired.apply(_propTypes.bool, [props, propName, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(validator, "booleanSome: ".concat(propsList), notAllPropsFalse);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ib29sZWFuU29tZS5qcyJdLCJuYW1lcyI6WyJub3RBbGxQcm9wc0ZhbHNlIiwicHJvcHNMaXN0IiwidmFsaWRhdG9yIiwicmVzdCIsImNvdW50RmFsc2UiLCJjb3VudCIsInByb3BzIiwiZmFsc2VQcm9wQ291bnQiLCJib29sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxVQUFBLEdBQUEsT0FBQSxDQUFBLFlBQUEsQ0FBQTs7QUFDQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsMkJBQUEsQ0FBQTs7Ozs7Ozs7QUFFZSxTQUFBLG9CQUFBLEdBQW1EO0FBQUEsT0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFsQkEsZ0JBQWtCLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLENBQUEsRUFBQSxJQUFBLEdBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBO0FBQWxCQSxJQUFBQSxnQkFBa0IsQ0FBQSxJQUFBLENBQWxCQSxHQUFrQixTQUFBLENBQUEsSUFBQSxDQUFsQkE7QUFBa0I7O0FBQ2hFLE1BQUlBLGdCQUFnQixDQUFoQkEsTUFBQUEsR0FBSixDQUFBLEVBQWlDO0FBQy9CLFVBQU0sSUFBQSxTQUFBLENBQU4sNkRBQU0sQ0FBTjtBQUNEOztBQUNELE1BQUksQ0FBQyxnQkFBZ0IsQ0FBaEIsS0FBQSxDQUF1QixVQUFBLENBQUEsRUFBQTtBQUFBLFdBQU8sT0FBQSxDQUFBLEtBQVAsUUFBQTtBQUE1QixHQUFLLENBQUwsRUFBMkQ7QUFDekQsVUFBTSxJQUFBLFNBQUEsQ0FBTix1Q0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUyxHQUFHRCxnQkFBZ0IsQ0FBaEJBLElBQUFBLENBQWxCLE9BQWtCQSxDQUFsQjs7QUFFQSxNQUFNRSxTQUFTLEdBQUcsU0FBQSxXQUFBLENBQUEsS0FBQSxFQUFBLFFBQUEsRUFBQSxhQUFBLEVBQThEO0FBQzlFLFFBQU1FLFVBQVUs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YWxpZGF0b3IgZnJvbSAnLi9oZWxwZXJzL3dyYXBWYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBib29sZWFuU29tZVZhbGlkYXRvciguLi5ub3RBbGxQcm9wc0ZhbHNlKSB7XG4gIGlmIChub3RBbGxQcm9wc0ZhbHNlLmxlbmd0aCA8IDEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhdCBsZWFzdCBvbmUgcHJvcCAob25lIG9mIHdoaWNoIG11c3QgYmUgYHRydWVgKSBpcyByZXF1aXJlZCcpO1xuICB9XG4gIGlmICghbm90QWxsUHJvcHNGYWxzZS5ldmVyeSgoeCkgPT4gdHlwZW9mIHggPT09ICdzdHJpbmcnKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FsbCBib29sZWFuU29tZSBwcm9wcyBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgfVxuXG4gIGNvbnN0IHByb3BzTGlzdCA9IG5vdEFsbFByb3BzRmFsc2Uuam9pbignLCBvciAnKTtcblxuICBjb25zdCB2YWxpZGF0b3IgPSBmdW5jdGlvbiBib29sZWFuU29tZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBjb25zdCBjb3VudEZhbHNlID0gKGNvdW50LCBwcm9wKSA9PiAoY291bnQgKyAocHJvcHNbcHJvcF0gPT09IGZhbHNlID8gMSA6IDApKTtcblxuICAgIGNvbnN0IGZhbHNlUHJvcENvdW50ID0gbm90QWxsUHJvcHNGYWxzZS5yZWR1Y2UoY291bnRGYWxzZSwgMCk7XG4gICAgaWYgKGZhbHNlUHJvcENvdW50ID09PSBub3RBbGxQcm9wc0ZhbHNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihgQSAke2NvbXBvbmVudE5hbWV9IG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUgb2YgdGhlc2UgYm9vbGVhbiBwcm9wcyBiZSBcXGB0cnVlXFxgOiAke3Byb3BzTGlzdH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGJvb2wocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgfTtcblxuICB2YWxpZGF0b3IuaXNSZXF1aXJlZCA9IGZ1bmN0aW9uIGJvb2xlYW5Tb21lUmVxdWlyZWQoXG4gICAgcHJvcHMsXG4gICAgcHJvcE5hbWUsXG4gICAgY29tcG9uZW50TmFtZSxcbiAgICAuLi5yZXN0XG4gICkge1xuICAgIGNvbnN0IGNvdW50RmFsc2UgPSAoY291bnQsIHByb3ApID0+IChjb3VudCArIChwcm9wc1twcm9wXSA9PT0gZmFsc2UgPyAxIDogMCkpO1xuXG4gICAgY29uc3QgZmFsc2VQcm9wQ291bnQgPSBub3RBbGxQcm9wc0ZhbHNlLnJlZHVjZShjb3VudEZhbHNlLCAwKTtcbiAgICBpZiAoZmFsc2VQcm9wQ291bnQgPT09IG5vdEFsbFByb3BzRmFsc2UubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKGBBICR7Y29tcG9uZW50TmFtZX0gbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGVzZSBib29sZWFuIHByb3BzIGJlIFxcYHRydWVcXGA6ICR7cHJvcHNMaXN0fWApO1xuICAgIH1cbiAgICByZXR1cm4gYm9vbC5pc1JlcXVpcmVkKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgLi4ucmVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBWYWxpZGF0b3IodmFsaWRhdG9yLCBgYm9vbGVhblNvbWU6ICR7cHJvcHNMaXN0fWAsIG5vdEFsbFByb3BzRmFsc2UpO1xufVxuIl19