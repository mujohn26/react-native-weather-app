0d597f87fcf641bcbf50fbf0b569c83b
'use strict';

var UNICODE = require("../common/unicode");

var $ = UNICODE.CODE_POINTS;

function isSurrogatePair(cp1, cp2) {
  return cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF;
}

function getSurrogatePairCodePoint(cp1, cp2) {
  return (cp1 - 0xD800) * 0x400 + 0x2400 + cp2;
}

var DEFAULT_BUFFER_WATERLINE = 1 << 16;

var Preprocessor = module.exports = function () {
  this.html = null;
  this.pos = -1;
  this.lastGapPos = -1;
  this.lastCharPos = -1;
  this.gapStack = [];
  this.skipNextNewLine = false;
  this.lastChunkWritten = false;
  this.endOfChunkHit = false;
  this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
};

Preprocessor.prototype.dropParsedChunk = function () {
  if (this.pos > this.bufferWaterline) {
    this.lastCharPos -= this.pos;
    this.html = this.html.substring(this.pos);
    this.pos = 0;
    this.lastGapPos = -1;
    this.gapStack = [];
  }
};

Preprocessor.prototype._addGap = function () {
  this.gapStack.push(this.lastGapPos);
  this.lastGapPos = this.pos;
};

Preprocessor.prototype._processHighRangeCodePoint = function (cp) {
  if (this.pos !== this.lastCharPos) {
    var nextCp = this.html.charCodeAt(this.pos + 1);

    if (isSurrogatePair(cp, nextCp)) {
      this.pos++;
      cp = getSurrogatePairCodePoint(cp, nextCp);

      this._addGap();
    }
  } else if (!this.lastChunkWritten) {
      this.endOfChunkHit = true;
      return $.EOF;
    }

  return cp;
};

Preprocessor.prototype.write = function (chunk, isLastChunk) {
  if (this.html) this.html += chunk;else this.html = chunk;
  this.lastCharPos = this.html.length - 1;
  this.endOfChunkHit = false;
  this.lastChunkWritten = isLastChunk;
};

Preprocessor.prototype.insertHtmlAtCurrentPos = function (chunk) {
  this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
  this.lastCharPos = this.html.length - 1;
  this.endOfChunkHit = false;
};

Preprocessor.prototype.advance = function () {
  this.pos++;

  if (this.pos > this.lastCharPos) {
    if (!this.lastChunkWritten) this.endOfChunkHit = true;
    return $.EOF;
  }

  var cp = this.html.charCodeAt(this.pos);

  if (this.skipNextNewLine && cp === $.LINE_FEED) {
    this.skipNextNewLine = false;

    this._addGap();

    return this.advance();
  }

  if (cp === $.CARRIAGE_RETURN) {
    this.skipNextNewLine = true;
    return $.LINE_FEED;
  }

  this.skipNextNewLine = false;
  return cp >= 0xD800 ? this._processHighRangeCodePoint(cp) : cp;
};

Preprocessor.prototype.retreat = function () {
  if (this.pos === this.lastGapPos) {
    this.lastGapPos = this.gapStack.pop();
    this.pos--;
  }

  this.pos--;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,