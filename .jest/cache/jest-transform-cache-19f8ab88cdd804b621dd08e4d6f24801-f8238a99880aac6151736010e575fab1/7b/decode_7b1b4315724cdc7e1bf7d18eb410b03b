19a8b49edd02c09b11a473114ec267b8
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeHTML = exports.decodeHTMLStrict = exports.decodeXML = void 0;

var entities_json_1 = __importDefault(require("./maps/entities.json"));

var legacy_json_1 = __importDefault(require("./maps/legacy.json"));

var xml_json_1 = __importDefault(require("./maps/xml.json"));

var decode_codepoint_1 = __importDefault(require("./decode_codepoint"));

exports.decodeXML = getStrictDecoder(xml_json_1.default);
exports.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);

function getStrictDecoder(map) {
  var keys = Object.keys(map).join("|");
  var replace = getReplacer(map);
  keys += "|#[xX][\\da-fA-F]+|#\\d+";
  var re = new RegExp("&(?:" + keys + ");", "g");
  return function (str) {
    return String(str).replace(re, replace);
  };
}

var sorter = function sorter(a, b) {
  return a < b ? 1 : -1;
};

exports.decodeHTML = function () {
  var legacy = Object.keys(legacy_json_1.default).sort(sorter);
  var keys = Object.keys(entities_json_1.default).sort(sorter);

  for (var i = 0, j = 0; i < keys.length; i++) {
    if (legacy[j] === keys[i]) {
      keys[i] += ";?";
      j++;
    } else {
      keys[i] += ";";
    }
  }

  var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
  var replace = getReplacer(entities_json_1.default);

  function replacer(str) {
    if (str.substr(-1) !== ";") str += ";";
    return replace(str);
  }

  return function (str) {
    return String(str).replace(re, replacer);
  };
}();

function getReplacer(map) {
  return function replace(str) {
    if (str.charAt(1) === "#") {
      var secondChar = str.charAt(2);

      if (secondChar === "X" || secondChar === "x") {
        return decode_codepoint_1.default(parseInt(str.substr(3), 16));
      }

      return decode_codepoint_1.default(parseInt(str.substr(2), 10));
    }

    return map[str.slice(1, -1)];
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlY29kZS5qcyJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVIVE1MIiwiZGVjb2RlSFRNTFN0cmljdCIsImRlY29kZVhNTCIsImVudGl0aWVzX2pzb25fMSIsInJlcXVpcmUiLCJsZWdhY3lfanNvbl8xIiwieG1sX2pzb25fMSIsImRlY29kZV9jb2RlcG9pbnRfMSIsImdldFN0cmljdERlY29kZXIiLCJkZWZhdWx0IiwibWFwIiwia2V5cyIsImpvaW4iLCJyZXBsYWNlIiwiZ2V0UmVwbGFjZXIiLCJyZSIsIlJlZ0V4cCIsInN0ciIsIlN0cmluZyIsInNvcnRlciIsImEiLCJiIiwibGVnYWN5Iiwic29ydCIsImkiLCJqIiwibGVuZ3RoIiwicmVwbGFjZXIiLCJzdWJzdHIiLCJjaGFyQXQiLCJzZWNvbmRDaGFyIiwicGFyc2VJbnQiLCJzbGljZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsZUFBZSxHQUFJLFFBQVEsS0FBS0EsZUFBZCxJQUFrQyxVQUFVQyxHQUFWLEVBQWU7QUFDbkUsU0FBUUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVosR0FBMEJELEdBQTFCLEdBQWdDO0FBQUUsZUFBV0E7QUFBYixHQUF2QztBQUNILENBRkQ7O0FBR0FFLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7QUFDQUQsT0FBTyxDQUFDRSxVQUFSLEdBQXFCRixPQUFPLENBQUNHLGdCQUFSLEdBQTJCSCxPQUFPLENBQUNJLFNBQVIsR0FBb0IsS0FBSyxDQUF6RTs7QUFDQSxJQUFJQyxlQUFlLEdBQUdWLGVBQWUsQ0FBQ1csT0FBTyx3QkFBUixDQUFyQzs7QUFDQSxJQUFJQyxhQUFhLEdBQUdaLGVBQWUsQ0FBQ1csT0FBTyxzQkFBUixD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QUFDekIsUUFBSUEsR0FBRyxDQUFDWSxNQUFKLENBQVcsQ0FBWCxNQUFrQixHQUF0QixFQUEyQjtBQUN2QixVQUFJQyxVQUFVLEdBQUdiLEdBQUcsQ0FBQ1ksTUFBSixDQUFXLENBQVgsQ0FBakI7O0FBQ0EsVUFBSUMsVUFBVSxLQUFLLEdBQWYsSUFBc0JBLFVBQVUsS0FBSyxHQUF6QyxFQUE4QztBQUMxQyxlQUFPdkIsa0JBQWtCLENBQUNFLE9BQW5CLENBQTJCc0IsUUFBUSxDQUFDZCxHQUFHLENBQUNXLE1BQUosQ0FBVyxDQUFYLENBQUQsRUFBZ0IsRUFBaEIsQ0FBbkMsQ0FBUDtBQUNIOztBQUNELGFBQU9yQixrQkFBa0IsQ0FBQ0UsT0FBbkIsQ0FBMkJzQixRQUFRLENBQUNkLEdBQUcsQ0FBQ1csTUFBSixDQUFXLENBQVgsQ0FBRCxFQUFnQixFQUFoQixDQUFuQyxDQUFQO0FBQ0g7O0FBQ0QsV0FBT2xCLEdBQUcsQ0FBQ08sR0FBRyxDQUFDZSxLQUFKLENBQVUsQ0FBVixFQUFhLENBQUMsQ0FBZCxDQUFELENBQVY7QUFDSCxHQVREO0FBVUgiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IGV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlWE1MID0gdm9pZCAwO1xudmFyIGVudGl0aWVzX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2VudGl0aWVzLmpzb25cIikpO1xudmFyIGxlZ2FjeV9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9sZWdhY3kuanNvblwiKSk7XG52YXIgeG1sX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL3htbC5qc29uXCIpKTtcbnZhciBkZWNvZGVfY29kZXBvaW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZGVjb2RlX2NvZGVwb2ludFwiKSk7XG5leHBvcnRzLmRlY29kZVhNTCA9IGdldFN0cmljdERlY29kZXIoeG1sX2pzb25fMS5kZWZhdWx0KTtcbmV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGdldFN0cmljdERlY29kZXIoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpO1xuZnVuY3Rpb24gZ2V0U3RyaWN0RGVjb2RlcihtYXApIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1hcCkuam9pbihcInxcIik7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihtYXApO1xuICAgIGtleXMgKz0gXCJ8I1t4WF1bXFxcXGRhLWZBLUZdK3wjXFxcXGQrXCI7XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMgKyBcIik7XCIsIFwiZ1wiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShyZSwgcmVwbGFjZSk7IH07XG59XG52YXIgc29ydGVyID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChhIDwgYiA/IDEgOiAtMSk7IH07XG5leHBvcnRzLmRlY29kZUhUTUwgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZWdhY3kgPSBPYmplY3Qua2V5cyhsZWdhY3lfanNvbl8xLmRlZmF1bHQpLnNvcnQoc29ydGVyKTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KS5zb3J0KHNvcnRlcik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobGVnYWN5W2pdID09PSBrZXlzW2ldKSB7XG4gICAgICAgICAgICBrZXlzW2ldICs9IFwiOz9cIjtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMuam9pbihcInxcIikgKyBcInwjW3hYXVtcXFxcZGEtZkEtRl0rOz98I1xcXFxkKzs/KVwiLCBcImdcIik7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG4gICAgZnVuY3Rpb24gcmVwbGFjZXIoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuc3Vic3RyKC0xKSAhPT0gXCI7XCIpXG4gICAgICAgICAgICBzdHIgKz0gXCI7XCI7XG4gICAgICAgIHJldHVybiByZXBsYWNlKHN0cik7XG4gICAgfVxuICAgIC8vIFRPRE8gY29uc2lkZXIgY3JlYXRpbmcgYSBtZXJnZWQgbWFwXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIFN0cmluZyhzdHIpLnJlcGxhY2UocmUsIHJlcGxhY2VyKTsgfTtcbn0pKCk7XG5mdW5jdGlvbiBnZXRSZXBsYWNlcihtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoMSkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICB2YXIgc2Vjb25kQ2hhciA9IHN0ci5jaGFyQXQoMik7XG4gICAgICAgICAgICBpZiAoc2Vjb25kQ2hhciA9PT0gXCJYXCIgfHwgc2Vjb25kQ2hhciA9PT0gXCJ4XCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF8xLmRlZmF1bHQocGFyc2VJbnQoc3RyLnN1YnN0cigzKSwgMTYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVfY29kZXBvaW50XzEuZGVmYXVsdChwYXJzZUludChzdHIuc3Vic3RyKDIpLCAxMCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXBbc3RyLnNsaWNlKDEsIC0xKV07XG4gICAgfTtcbn1cbiJdfQ==