35747b49604c8d0453e36979c3d0f6c3
var DomUtils = require("domutils"),
    isTag = DomUtils.isTag,
    getParent = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    getName = DomUtils.getName;

module.exports = {
  __proto__: null,
  attribute: require("./attributes.js").compile,
  pseudo: require("./pseudos.js").compile,
  tag: function tag(next, data) {
    var name = data.name;
    return function tag(elem) {
      return getName(elem) === name && next(elem);
    };
  },
  descendant: function descendant(next, rule, options, context, acceptSelf) {
    return function descendant(elem) {
      if (acceptSelf && next(elem)) return true;
      var found = false;

      while (!found && (elem = getParent(elem))) {
        found = next(elem);
      }

      return found;
    };
  },
  parent: function parent(next, data, options) {
    if (options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");
    return function parent(elem) {
      return getChildren(elem).some(test);
    };

    function test(elem) {
      return isTag(elem) && next(elem);
    }
  },
  child: function child(next) {
    return function child(elem) {
      var parent = getParent(elem);
      return !!parent && next(parent);
    };
  },
  sibling: function sibling(next) {
    return function sibling(elem) {
      var siblings = getSiblings(elem);

      for (var i = 0; i < siblings.length; i++) {
        if (isTag(siblings[i])) {
          if (siblings[i] === elem) break;
          if (next(siblings[i])) return true;
        }
      }

      return false;
    };
  },
  adjacent: function adjacent(next) {
    return function adjacent(elem) {
      var siblings = getSiblings(elem),
          lastElement;

      for (var i = 0; i < siblings.length; i++) {
        if (isTag(siblings[i])) {
          if (siblings[i] === elem) break;
          lastElement = siblings[i];
        }
      }

      return !!lastElement && next(lastElement);
    };
  },
  universal: function universal(next) {
    return next;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYWwuanMiXSwibmFtZXMiOlsiRG9tVXRpbHMiLCJyZXF1aXJlIiwiaXNUYWciLCJnZXRQYXJlbnQiLCJnZXRDaGlsZHJlbiIsImdldFNpYmxpbmdzIiwiZ2V0TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJfX3Byb3RvX18iLCJhdHRyaWJ1dGUiLCJjb21waWxlIiwicHNldWRvIiwidGFnIiwibmV4dCIsImRhdGEiLCJuYW1lIiwiZWxlbSIsImRlc2NlbmRhbnQiLCJydWxlIiwib3B0aW9ucyIsImNvbnRleHQiLCJhY2NlcHRTZWxmIiwiZm91bmQiLCJwYXJlbnQiLCJzdHJpY3QiLCJTeW50YXhFcnJvciIsInNvbWUiLCJ0ZXN0IiwiY2hpbGQiLCJzaWJsaW5nIiwic2libGluZ3MiLCJpIiwibGVuZ3RoIiwiYWRqYWNlbnQiLCJsYXN0RWxlbWVudCIsInVuaXZlcnNhbCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFNQyxPQUFPLENBQUMsVUFBRCxDQUF6QjtBQUFBLElBQ0lDLEtBQUssR0FBU0YsUUFBUSxDQUFDRSxLQUQzQjtBQUFBLElBRUlDLFNBQVMsR0FBS0gsUUFBUSxDQUFDRyxTQUYzQjtBQUFBLElBR0lDLFdBQVcsR0FBR0osUUFBUSxDQUFDSSxXQUgzQjtBQUFBLElBSUlDLFdBQVcsR0FBR0wsUUFBUSxDQUFDSyxXQUozQjtBQUFBLElBS0lDLE9BQU8sR0FBT04sUUFBUSxDQUFDTSxPQUwzQjs7QUFVQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2hCQyxFQUFBQSxTQUFTLEVBQUUsSUFESztBQUdoQkMsRUFBQUEsU0FBUyxFQUFFVCxPQUFPLG1CQUFQLENBQTJCVSxPQUh0QjtBQUloQkMsRUFBQUEsTUFBTSxFQUFFWCxPQUFPLGdCQUFQLENBQXdCVSxPQUpoQjtBQU9oQkUsRUFBQUEsR0FBRyxFQUFFLGFBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFvQjtBQUN4QixRQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFB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QUFELENBQVQsQ0FBUixFQUFzQjtBQUNyQixjQUFHRCxRQUFRLENBQUNDLENBQUQsQ0FBUixLQUFnQmYsSUFBbkIsRUFBeUI7QUFDekJrQixVQUFBQSxXQUFXLEdBQUdKLFFBQVEsQ0FBQ0MsQ0FBRCxDQUF0QjtBQUNBO0FBQ0Q7O0FBRUQsYUFBTyxDQUFDLENBQUNHLFdBQUYsSUFBaUJyQixJQUFJLENBQUNxQixXQUFELENBQTVCO0FBQ0EsS0FaRDtBQWFBLEdBMUVlO0FBMkVoQkMsRUFBQUEsU0FBUyxFQUFFLG1CQUFTdEIsSUFBVCxFQUFjO0FBQ3hCLFdBQU9BLElBQVA7QUFDQTtBQTdFZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBEb21VdGlscyAgICA9IHJlcXVpcmUoXCJkb211dGlsc1wiKSxcbiAgICBpc1RhZyAgICAgICA9IERvbVV0aWxzLmlzVGFnLFxuICAgIGdldFBhcmVudCAgID0gRG9tVXRpbHMuZ2V0UGFyZW50LFxuICAgIGdldENoaWxkcmVuID0gRG9tVXRpbHMuZ2V0Q2hpbGRyZW4sXG4gICAgZ2V0U2libGluZ3MgPSBEb21VdGlscy5nZXRTaWJsaW5ncyxcbiAgICBnZXROYW1lICAgICA9IERvbVV0aWxzLmdldE5hbWU7XG5cbi8qXG5cdGFsbCBhdmFpbGFibGUgcnVsZXNcbiovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXG5cdGF0dHJpYnV0ZTogcmVxdWlyZShcIi4vYXR0cmlidXRlcy5qc1wiKS5jb21waWxlLFxuXHRwc2V1ZG86IHJlcXVpcmUoXCIuL3BzZXVkb3MuanNcIikuY29tcGlsZSxcblxuXHQvL3RhZ3Ncblx0dGFnOiBmdW5jdGlvbihuZXh0LCBkYXRhKXtcblx0XHR2YXIgbmFtZSA9IGRhdGEubmFtZTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gdGFnKGVsZW0pe1xuXHRcdFx0cmV0dXJuIGdldE5hbWUoZWxlbSkgPT09IG5hbWUgJiYgbmV4dChlbGVtKTtcblx0XHR9O1xuXHR9LFxuXG5cdC8vdHJhdmVyc2FsXG5cdGRlc2NlbmRhbnQ6IGZ1bmN0aW9uKG5leHQsIHJ1bGUsIG9wdGlvbnMsIGNvbnRleHQsIGFjY2VwdFNlbGYpe1xuXHRcdHJldHVybiBmdW5jdGlvbiBkZXNjZW5kYW50KGVsZW0pe1xuXG5cdFx0XHRpZiAoYWNjZXB0U2VsZiAmJiBuZXh0KGVsZW0pKSByZXR1cm4gdHJ1ZTtcblxuXHRcdFx0dmFyIGZvdW5kID0gZmFsc2U7XG5cblx0XHRcdHdoaWxlKCFmb3VuZCAmJiAoZWxlbSA9IGdldFBhcmVudChlbGVtKSkpe1xuXHRcdFx0XHRmb3VuZCA9IG5leHQoZWxlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmb3VuZDtcblx0XHR9O1xuXHR9LFxuXHRwYXJlbnQ6IGZ1bmN0aW9uKG5leHQsIGRhdGEsIG9wdGlvbnMpe1xuXHRcdGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5zdHJpY3QpIHRocm93IFN5bnRheEVycm9yKFwiUGFyZW50IHNlbGVjdG9yIGlzbid0IHBhcnQgb2YgQ1NTM1wiKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYXJlbnQoZWxlbSl7XG5cdFx0XHRyZXR1cm4gZ2V0Q2hpbGRyZW4oZWxlbSkuc29tZSh0ZXN0KTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdGVzdChlbGVtKXtcblx0XHRcdHJldHVybiBpc1RhZyhlbGVtKSAmJiBuZXh0KGVsZW0pO1xuXHRcdH1cblx0fSxcblx0Y2hpbGQ6IGZ1bmN0aW9uKG5leHQpe1xuXHRcdHJldHVybiBmdW5jdGlvbiBjaGlsZChlbGVtKXtcblx0XHRcdHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG5cdFx0XHRyZXR1cm4gISFwYXJlbnQgJiYgbmV4dChwYXJlbnQpO1xuXHRcdH07XG5cdH0sXG5cdHNpYmxpbmc6IGZ1bmN0aW9uKG5leHQpe1xuXHRcdHJldHVybiBmdW5jdGlvbiBzaWJsaW5nKGVsZW0pe1xuXHRcdFx0dmFyIHNpYmxpbmdzID0gZ2V0U2libGluZ3MoZWxlbSk7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzaWJsaW5ncy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdGlmKGlzVGFnKHNpYmxpbmdzW2ldKSl7XG5cdFx0XHRcdFx0aWYoc2libGluZ3NbaV0gPT09IGVsZW0pIGJyZWFrO1xuXHRcdFx0XHRcdGlmKG5leHQoc2libGluZ3NbaV0pKSByZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fSxcblx0YWRqYWNlbnQ6IGZ1bmN0aW9uKG5leHQpe1xuXHRcdHJldHVybiBmdW5jdGlvbiBhZGphY2VudChlbGVtKXtcblx0XHRcdHZhciBzaWJsaW5ncyA9IGdldFNpYmxpbmdzKGVsZW0pLFxuXHRcdFx0ICAgIGxhc3RFbGVtZW50O1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2libGluZ3MubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRpZihpc1RhZyhzaWJsaW5nc1tpXSkpe1xuXHRcdFx0XHRcdGlmKHNpYmxpbmdzW2ldID09PSBlbGVtKSBicmVhaztcblx0XHRcdFx0XHRsYXN0RWxlbWVudCA9IHNpYmxpbmdzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAhIWxhc3RFbGVtZW50ICYmIG5leHQobGFzdEVsZW1lbnQpO1xuXHRcdH07XG5cdH0sXG5cdHVuaXZlcnNhbDogZnVuY3Rpb24obmV4dCl7XG5cdFx0cmV0dXJuIG5leHQ7XG5cdH1cbn07Il19