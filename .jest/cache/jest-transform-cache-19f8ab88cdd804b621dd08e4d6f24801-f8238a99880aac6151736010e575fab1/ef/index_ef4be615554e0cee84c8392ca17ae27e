8f88644a65363f48815d9d826245c8c9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sub;

var _index = _interopRequireDefault(require("../subDays/index.js"));

var _index2 = _interopRequireDefault(require("../subMonths/index.js"));

var _index3 = _interopRequireDefault(require("../toDate/index.js"));

var _index4 = _interopRequireDefault(require("../_lib/requiredArgs/index.js"));

var _index5 = _interopRequireDefault(require("../_lib/toInteger/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function sub(dirtyDate, duration) {
  (0, _index4.default)(2, arguments);
  if (!duration || typeof duration !== 'object') return new Date(NaN);
  var years = 'years' in duration ? (0, _index5.default)(duration.years) : 0;
  var months = 'months' in duration ? (0, _index5.default)(duration.months) : 0;
  var weeks = 'weeks' in duration ? (0, _index5.default)(duration.weeks) : 0;
  var days = 'days' in duration ? (0, _index5.default)(duration.days) : 0;
  var hours = 'hours' in duration ? (0, _index5.default)(duration.hours) : 0;
  var minutes = 'minutes' in duration ? (0, _index5.default)(duration.minutes) : 0;
  var seconds = 'seconds' in duration ? (0, _index5.default)(duration.seconds) : 0;
  var dateWithoutMonths = (0, _index2.default)((0, _index3.default)(dirtyDate), months + years * 12);
  var dateWithoutDays = (0, _index.default)(dateWithoutMonths, days + weeks * 7);
  var minutestoSub = minutes + hours * 60;
  var secondstoSub = seconds + minutestoSub * 60;
  var mstoSub = secondstoSub * 1000;
  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);
  return finalDate;
}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInN1YiIsIl9pbmRleCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2luZGV4MiIsIl9pbmRleDMiLCJfaW5kZXg0IiwiX2luZGV4NSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkaXJ0eURhdGUiLCJkdXJhdGlvbiIsImFyZ3VtZW50cyIsIkRhdGUiLCJOYU4iLCJ5ZWFycyIsIm1vbnRocyIsIndlZWtzIiwiZGF5cyIsImhvdXJzIiwibWludXRlcyIsInNlY29uZHMiLCJkYXRlV2l0aG91dE1vbnRocyIsImRhdGVXaXRob3V0RGF5cyIsIm1pbnV0ZXN0b1N1YiIsInNlY29uZHN0b1N1YiIsIm1zdG9TdWIiLCJmaW5hbERhdGUiLCJnZXRUaW1lIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsR0FBbEI7O0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyx1QkFBUixDQUFuQzs7QUFFQSxJQUFJQyxPQUFPLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLHlCQUFSLENBQXBDOztBQUVBLElBQUlFLE9BQU8sR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sc0JBQVIsQ0FBcEM7O0FBRUEsSUFBSUcsT0FBTyxHQUFHSixzQkFBc0IsQ0FBQ0MsT0FBTyxpQ0FBUixDQUFwQzs7QUFFQSxJQUFJSSxPQUFPLEdBQUdMLHNCQUFzQixDQUFDQyxPQUFPLDhCQUFSLENBQXBDOztBQUVBLFNBQVNELHNCQUFULENBQWdDTSxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFVCxJQUFBQSxPQUFPLEVBQUVTO0FBQVgsR0FBckM7QUFBd0Q7O0FBeUMvRixTQUFTUixHQUFULENBQWFVLFNBQWIsRUFBd0JDLFFBQXhCLEVBQWtDO0FBQ2hDLEdBQUMsR0FBR0wsT0FBTyxDQUFDUCxPQUFaLEVBQXFCLENBQXJCLEVBQXdCYSxTQUF4QjtBQUNBLE1BQUksQ0FBQ0QsUUFBRCxJQUFhLE9BQU9BLFFBQVAsS0FBb0IsUUFBckMsRUFBK0MsT0FBTyxJQUFJRSxJQUFKLENBQVNDLEdBQVQsQ0FBUDtBQUMvQyxNQUFJQyxLQUFLLEdBQUcsV0FBV0osUUFBWCxHQUFzQixDQUFDLEdBQUdKLE9BQU8sQ0FBQ1IsT0FBWixFQUFxQlksUUFBUSxDQUFDSSxLQUE5QixDQUF0QixHQUE2RCxDQUF6RTtBQUNBLE1BQUlDLE1BQU0sR0FBRyxZQUFZTCxRQUFaLEdBQXVCLENBQUMsR0FBR0osT0FBTyxDQUFDUixPQUFaLEVBQXFCWSxRQUFRLENBQUNLLE1BQTlCLENBQXZCLEdBQStELENBQTVFO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLFdBQVdOLFFBQVgsR0FBc0IsQ0FBQyxHQUFHSixPQUFPLENBQUNSLE9BQVosRUFBcUJZLFFBQVEsQ0FBQ00sS0FBOUIsQ0FBdEIsR0FBNkQsQ0FBekU7QUFDQSxNQUFJQyxJQUFJLEdBQUcsVUFBVVAsUUFBVixHQUFxQixDQUFDLEdBQUdKLE9BQU8sQ0FBQ1IsT0FBWixFQUFxQlksUUFBUSxDQUFDTyxJQUE5QixDQUFyQixHQUEyRCxDQUF0RTtBQUNBLE1BQUlDLEtBQUssR0FBRyxXQUFXUixRQUFYLEdBQXNCLENBQUMsR0FBR0osT0FBTyxDQUFDUixPQUFaLEVBQXFCWSxRQUFRLENBQUNRLEtBQTlCLENBQXRCLEdBQTZELENBQXpFO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLGFBQWFULFFBQWIsR0FBd0IsQ0FBQyxHQUFHSixPQUFPLENBQUNSLE9BQVosRUFBcUJZLFFBQVEsQ0FBQ1MsT0FBOUIsQ0FBeEIsR0FBaUUsQ0FBL0U7QUFDQSxNQUFJQyxPQUFPLEdBQUcsYUFBYVYsUUFBYixHQUF3QixDQUFDLEdBQUdKLE9BQU8sQ0FBQ1IsT0FBWixFQUFxQlksUUFBUSxDQUFDVSxPQUE5QixDQUF4QixHQUFpRSxDQUEvRTtBQUVBLE1BQUlDLGlCQUFpQixHQUFHLENBQUMsR0FBR2xCLE9BQU8sQ0FBQ0wsT0FBWixFQUFxQixDQUFDLEdBQUdNLE9BQU8sQ0FBQ04sT0FBWixFQUFxQlcsU0FBckIsQ0FBckIsRUFBc0RNLE1BQU0sR0FBR0QsS0FBSyxHQUFHLEVBQXZFLENBQXhCO0FBRUEsTUFBSVEsZUFBZSxHQUFHLENBQUMsR0FBR3RCLE1BQU0sQ0FBQ0YsT0FBWCxFQUFvQnVCLGlCQUFwQixFQUF1Q0osSUFBSSxHQUFHRCxLQUFLLEdBQUcsQ0FBdEQsQ0FBdEI7QUFFQSxNQUFJTyxZQUFZLEdBQUdKLE9BQU8sR0FBR0QsS0FBSyxHQUFHLEVBQXJDO0FBQ0EsTUFBSU0sWUFBWSxHQUFHSixPQUFPLEdBQUdHLFlBQVksR0FBRyxFQUE1QztBQUNBLE1BQUlFLE9BQU8sR0FBR0QsWUFBWSxHQUFHLElBQTdCO0FBQ0EsTUFBSUUsU0FBUyxHQUFHLElBQUlkLElBQUosQ0FBU1UsZUFBZSxDQUFDSyxPQUFoQixLQUE0QkYsT0FBckMsQ0FBaEI7QUFDQSxTQUFPQyxTQUFQO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ2hDLE9BQVAsR0FBaUJBLE9BQU8sQ0FBQ0UsT0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN1YjtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N1YkRheXMvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3N1Yk1vbnRocy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdG9EYXRlL2luZGV4LmpzXCIpKTtcblxudmFyIF9pbmRleDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXg1ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN1YlxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIHllYXJzLCBtb250aHMsIHdlZWtzLCBkYXlzLCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCB5ZWFycywgbW9udGhzLCB3ZWVrcywgZGF5cywgaG91cnMsIG1pbnV0ZXMgYW5kIHNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtEdXJhdGlvbn0gZHVyYXRpb24gLSB0aGUgb2JqZWN0IHdpdGggeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWRcbiAqXG4gKiB8IEtleSAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB5ZWFycyAgIHwgQW1vdW50IG9mIHllYXJzIHRvIGJlIHN1YnRyYWN0ZWQgICB8XG4gKiB8IG1vbnRocyAgfCBBbW91bnQgb2YgbW9udGhzIHRvIGJlIHN1YnRyYWN0ZWQgIHxcbiAqIHwgd2Vla3MgICB8IEFtb3VudCBvZiB3ZWVrcyB0byBiZSBzdWJ0cmFjdGVkICAgfFxuICogfCBkYXlzICAgIHwgQW1vdW50IG9mIGRheXMgdG8gYmUgc3VidHJhY3RlZCAgICB8XG4gKiB8IGhvdXJzICAgfCBBbW91bnQgb2YgaG91cnMgdG8gYmUgc3VidHJhY3RlZCAgIHxcbiAqIHwgbWludXRlcyB8IEFtb3VudCBvZiBtaW51dGVzIHRvIGJlIHN1YnRyYWN0ZWQgfFxuICogfCBzZWNvbmRzIHwgQW1vdW50IG9mIHNlY29uZHMgdG8gYmUgc3VidHJhY3RlZCB8XG4gKlxuICogQWxsIHZhbHVlcyBkZWZhdWx0IHRvIDBcbiAqXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIHNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCB0aGUgZm9sbG93aW5nIGR1cmF0aW9uIGZyb20gMTUgSnVuZSAyMDE3IDE1OjI5OjIwXG4gKiBjb25zdCByZXN1bHQgPSBzdWIobmV3IERhdGUoMjAxNywgNSwgMTUsIDE1LCAyOSwgMjApLCB7XG4gKiAgIHllYXJzOiAyLFxuICogICBtb250aHM6IDksXG4gKiAgIHdlZWtzOiAxLFxuICogICBkYXlzOiA3LFxuICogICBob3VyczogNSxcbiAqICAgbWludXRlczogOSxcbiAqICAgc2Vjb25kczogMzBcbiAqIH0pXG4gKiAvLz0+IE1vbiBTZXAgMSAyMDE0IDEwOjE5OjUwXG4gKi9cbmZ1bmN0aW9uIHN1YihkaXJ0eURhdGUsIGR1cmF0aW9uKSB7XG4gICgwLCBfaW5kZXg0LmRlZmF1bHQpKDIsIGFyZ3VtZW50cyk7XG4gIGlmICghZHVyYXRpb24gfHwgdHlwZW9mIGR1cmF0aW9uICE9PSAnb2JqZWN0JykgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIHZhciB5ZWFycyA9ICd5ZWFycycgaW4gZHVyYXRpb24gPyAoMCwgX2luZGV4NS5kZWZhdWx0KShkdXJhdGlvbi55ZWFycykgOiAwO1xuICB2YXIgbW9udGhzID0gJ21vbnRocycgaW4gZHVyYXRpb24gPyAoMCwgX2luZGV4NS5kZWZhdWx0KShkdXJhdGlvbi5tb250aHMpIDogMDtcbiAgdmFyIHdlZWtzID0gJ3dlZWtzJyBpbiBkdXJhdGlvbiA/ICgwLCBfaW5kZXg1LmRlZmF1bHQpKGR1cmF0aW9uLndlZWtzKSA6IDA7XG4gIHZhciBkYXlzID0gJ2RheXMnIGluIGR1cmF0aW9uID8gKDAsIF9pbmRleDUuZGVmYXVsdCkoZHVyYXRpb24uZGF5cykgOiAwO1xuICB2YXIgaG91cnMgPSAnaG91cnMnIGluIGR1cmF0aW9uID8gKDAsIF9pbmRleDUuZGVmYXVsdCkoZHVyYXRpb24uaG91cnMpIDogMDtcbiAgdmFyIG1pbnV0ZXMgPSAnbWludXRlcycgaW4gZHVyYXRpb24gPyAoMCwgX2luZGV4NS5kZWZhdWx0KShkdXJhdGlvbi5taW51dGVzKSA6IDA7XG4gIHZhciBzZWNvbmRzID0gJ3NlY29uZHMnIGluIGR1cmF0aW9uID8gKDAsIF9pbmRleDUuZGVmYXVsdCkoZHVyYXRpb24uc2Vjb25kcykgOiAwOyAvLyBTdWJ0cmFjdCB5ZWFycyBhbmQgbW9udGhzXG5cbiAgdmFyIGRhdGVXaXRob3V0TW9udGhzID0gKDAsIF9pbmRleDIuZGVmYXVsdCkoKDAsIF9pbmRleDMuZGVmYXVsdCkoZGlydHlEYXRlKSwgbW9udGhzICsgeWVhcnMgKiAxMik7IC8vIFN1YnRyYWN0IHdlZWtzIGFuZCBkYXlzXG5cbiAgdmFyIGRhdGVXaXRob3V0RGF5cyA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGF0ZVdpdGhvdXRNb250aHMsIGRheXMgKyB3ZWVrcyAqIDcpOyAvLyBTdWJ0cmFjdCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kc1xuXG4gIHZhciBtaW51dGVzdG9TdWIgPSBtaW51dGVzICsgaG91cnMgKiA2MDtcbiAgdmFyIHNlY29uZHN0b1N1YiA9IHNlY29uZHMgKyBtaW51dGVzdG9TdWIgKiA2MDtcbiAgdmFyIG1zdG9TdWIgPSBzZWNvbmRzdG9TdWIgKiAxMDAwO1xuICB2YXIgZmluYWxEYXRlID0gbmV3IERhdGUoZGF0ZVdpdGhvdXREYXlzLmdldFRpbWUoKSAtIG1zdG9TdWIpO1xuICByZXR1cm4gZmluYWxEYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXX0=