62310c0a7db644c54848de148874314f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = childrenOf;

var _renderableChildren = _interopRequireDefault(require("./helpers/renderableChildren"));

var _wrapValidator = _interopRequireDefault(require("./helpers/wrapValidator"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function validateChildren(propType, children, props) {
  for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    rest[_key - 3] = arguments[_key];
  }

  var error;
  children.some(function (child) {
    error = propType.apply(void 0, [_objectSpread(_objectSpread({}, props), {}, {
      children: child
    }), 'children'].concat(rest));
    return error;
  });
  return error || null;
}

function childrenOf(propType) {
  function childrenOfPropType(props, propName, componentName) {
    if (propName !== 'children') {
      return new TypeError("".concat(componentName, " is using the childrenOf validator on non-children prop \"").concat(propName, "\""));
    }

    var propValue = props[propName];

    if (propValue == null) {
      return null;
    }

    var children = (0, _renderableChildren["default"])(propValue);

    if (children.length === 0) {
      return null;
    }

    for (var _len2 = arguments.length, rest = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
      rest[_key2 - 3] = arguments[_key2];
    }

    return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
  }

  childrenOfPropType.isRequired = function (props, propName, componentName) {
    if (propName !== 'children') {
      return new TypeError("".concat(componentName, " is using the childrenOf validator on non-children prop \"").concat(propName, "\""));
    }

    var children = (0, _renderableChildren["default"])(props[propName]);

    if (children.length === 0) {
      return new TypeError("`".concat(componentName, "` requires at least one node of type ").concat(propType.typeName || propType.name));
    }

    for (var _len3 = arguments.length, rest = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
      rest[_key3 - 3] = arguments[_key3];
    }

    return validateChildren.apply(void 0, [propType, children, props, componentName].concat(rest));
  };

  return (0, _wrapValidator["default"])(childrenOfPropType, 'childrenOf', propType);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jaGlsZHJlbk9mLmpzIl0sIm5hbWVzIjpbInJlc3QiLCJjaGlsZHJlbiIsImVycm9yIiwiY2hpbGQiLCJwcm9wTmFtZSIsInByb3BWYWx1ZSIsInByb3BzIiwidmFsaWRhdGVDaGlsZHJlbiIsImNoaWxkcmVuT2ZQcm9wVHlwZSIsInByb3BUeXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxtQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxnQ0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxTQUFBLGdCQUFBLENBQUEsUUFBQSxFQUFBLFFBQUEsRUFBQSxLQUFBLEVBQThEO0FBQUEsT0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLENBQUEsTUFBQSxFQUFOQSxJQUFNLEdBQUEsSUFBQSxLQUFBLENBQUEsSUFBQSxHQUFBLENBQUEsR0FBQSxJQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxFQUFBLElBQUEsR0FBQSxDQUFBLEVBQUEsSUFBQSxHQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQTtBQUFOQSxJQUFBQSxJQUFNLENBQUEsSUFBQSxHQUFBLENBQUEsQ0FBTkEsR0FBTSxTQUFBLENBQUEsSUFBQSxDQUFOQTtBQUFNOztBQUM1RCxNQUFBLEtBQUE7QUFDQUMsRUFBQUEsUUFBUSxDQUFSQSxJQUFBQSxDQUFjLFVBQUEsS0FBQSxFQUFXO0FBQ3ZCQyxJQUFBQSxLQUFLLEdBQUcsUUFBUSxDQUFSLEtBQUEsQ0FBQSxLQUFBLENBQUEsRUFBQSxDQUFBLGFBQUEsQ0FBQSxhQUFBLENBQUEsRUFBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQTtBQUFxQkQsTUFBQUEsUUFBUSxFQUFFRTtBQUEvQixLQUFBLENBQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxDQUFS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LENBQVA7QUFWRkMsR0FBQUE7O0FBYUEsU0FBTyxDQUFBLEdBQUEsY0FBQSxDQUFBLFNBQUEsQ0FBQSxFQUFBLGtCQUFBLEVBQUEsWUFBQSxFQUFQLFFBQU8sQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlbmRlcmFibGVDaGlsZHJlbiBmcm9tICcuL2hlbHBlcnMvcmVuZGVyYWJsZUNoaWxkcmVuJztcbmltcG9ydCB3cmFwVmFsaWRhdG9yIGZyb20gJy4vaGVscGVycy93cmFwVmFsaWRhdG9yJztcblxuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZHJlbihwcm9wVHlwZSwgY2hpbGRyZW4sIHByb3BzLCAuLi5yZXN0KSB7XG4gIGxldCBlcnJvcjtcbiAgY2hpbGRyZW4uc29tZSgoY2hpbGQpID0+IHtcbiAgICBlcnJvciA9IHByb3BUeXBlKHsgLi4ucHJvcHMsIGNoaWxkcmVuOiBjaGlsZCB9LCAnY2hpbGRyZW4nLCAuLi5yZXN0KTtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH0pO1xuXG4gIHJldHVybiBlcnJvciB8fCBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjaGlsZHJlbk9mKHByb3BUeXBlKSB7XG4gIGZ1bmN0aW9uIGNoaWxkcmVuT2ZQcm9wVHlwZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpIHtcbiAgICBpZiAocHJvcE5hbWUgIT09ICdjaGlsZHJlbicpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKGAke2NvbXBvbmVudE5hbWV9IGlzIHVzaW5nIHRoZSBjaGlsZHJlbk9mIHZhbGlkYXRvciBvbiBub24tY2hpbGRyZW4gcHJvcCBcIiR7cHJvcE5hbWV9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IFtwcm9wTmFtZV06IHByb3BWYWx1ZSB9ID0gcHJvcHM7XG5cbiAgICBpZiAocHJvcFZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZHJlbiA9IHJlbmRlcmFibGVDaGlsZHJlbihwcm9wVmFsdWUpO1xuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0ZUNoaWxkcmVuKHByb3BUeXBlLCBjaGlsZHJlbiwgcHJvcHMsIGNvbXBvbmVudE5hbWUsIC4uLnJlc3QpO1xuICB9XG5cbiAgY2hpbGRyZW5PZlByb3BUeXBlLmlzUmVxdWlyZWQgPSAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KSA9PiB7XG4gICAgaWYgKHByb3BOYW1lICE9PSAnY2hpbGRyZW4nKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgJHtjb21wb25lbnROYW1lfSBpcyB1c2luZyB0aGUgY2hpbGRyZW5PZiB2YWxpZGF0b3Igb24gbm9uLWNoaWxkcmVuIHByb3AgXCIke3Byb3BOYW1lfVwiYCk7XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSByZW5kZXJhYmxlQ2hpbGRyZW4ocHJvcHNbcHJvcE5hbWVdKTtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcihgXFxgJHtjb21wb25lbnROYW1lfVxcYCByZXF1aXJlcyBhdCBsZWFzdCBvbmUgbm9kZSBvZiB0eXBlICR7cHJvcFR5cGUudHlwZU5hbWUgfHwgcHJvcFR5cGUubmFtZX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdGVDaGlsZHJlbihwcm9wVHlwZSwgY2hpbGRyZW4sIHByb3BzLCBjb21wb25lbnROYW1lLCAuLi5yZXN0KTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFZhbGlkYXRvcihjaGlsZHJlbk9mUHJvcFR5cGUsICdjaGlsZHJlbk9mJywgcHJvcFR5cGUpO1xufVxuIl19