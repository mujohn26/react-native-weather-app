{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","closestIndexTo","_index","_interopRequireDefault","require","_index2","obj","__esModule","dirtyDateToCompare","dirtyDatesArray","arguments","dateToCompare","isNaN","NaN","timeToCompare","getTime","datesArray","forEach","Array","prototype","slice","call","result","minDistance","dirtyDate","index","currentDate","distance","Math","abs","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,sBAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,iCAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAiC/F,SAASL,cAAT,CAAwBO,kBAAxB,EAA4CC,eAA5C,EAA6D;AAC3D,GAAC,GAAGJ,OAAO,CAACL,OAAZ,EAAqB,CAArB,EAAwBU,SAAxB;AACA,MAAIC,aAAa,GAAG,CAAC,GAAGT,MAAM,CAACF,OAAX,EAAoBQ,kBAApB,CAApB;;AAEA,MAAII,KAAK,CAACD,aAAD,CAAT,EAA0B;AACxB,WAAOE,GAAP;AACD;;AAED,MAAIC,aAAa,GAAGH,aAAa,CAACI,OAAd,EAApB;AACA,MAAIC,UAAJ;;AAEA,MAAIP,eAAe,IAAI,IAAvB,EAA6B;AAC3BO,IAAAA,UAAU,GAAG,EAAb;AACD,GAFD,MAEO,IAAI,OAAOP,eAAe,CAACQ,OAAvB,KAAmC,UAAvC,EAAmD;AACxDD,IAAAA,UAAU,GAAGP,eAAb;AACD,GAFM,MAEA;AACLO,IAAAA,UAAU,GAAGE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BZ,eAA3B,CAAb;AACD;;AAED,MAAIa,MAAJ;AACA,MAAIC,WAAJ;AACAP,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUO,SAAV,EAAqBC,KAArB,EAA4B;AAC7C,QAAIC,WAAW,GAAG,CAAC,GAAGxB,MAAM,CAACF,OAAX,EAAoBwB,SAApB,CAAlB;;AAEA,QAAIZ,KAAK,CAACc,WAAD,CAAT,EAAwB;AACtBJ,MAAAA,MAAM,GAAGT,GAAT;AACAU,MAAAA,WAAW,GAAGV,GAAd;AACA;AACD;;AAED,QAAIc,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASf,aAAa,GAAGY,WAAW,CAACX,OAAZ,EAAzB,CAAf;;AAEA,QAAIO,MAAM,IAAI,IAAV,IAAkBK,QAAQ,GAAGJ,WAAjC,EAA8C;AAC5CD,MAAAA,MAAM,GAAGG,KAAT;AACAF,MAAAA,WAAW,GAAGI,QAAd;AACD;AACF,GAfD;AAgBA,SAAOL,MAAP;AACD;;AAEDQ,MAAM,CAAChC,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = closestIndexTo;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestIndexTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Number} an index of the date closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * var dateToCompare = new Date(2015, 8, 6)\n * var datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * var result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\nfunction closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  (0, _index2.default)(2, arguments);\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return NaN;\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = (0, _index.default)(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}\n\nmodule.exports = exports.default;"]}